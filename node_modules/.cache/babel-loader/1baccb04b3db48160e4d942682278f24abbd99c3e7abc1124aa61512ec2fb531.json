{"ast":null,"code":"var $fpZC2$jssha = require(\"jssha\");\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) {\n      return;\n    }\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      }\n    });\n  });\n  return dest;\n}\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $dedcfd393dea00ca$exports = {};\n/**\n * Do not reorder the exports in this file.\n * It is ordered this way to prevent circular dependencies.\n * If modified, save without organizing imports to prevent breaking the order.\n */\nvar $6c617017d170275f$exports = {};\n$parcel$export($6c617017d170275f$exports, \"Field\", () => $6c617017d170275f$export$a455218a85c89869);\nclass $6c617017d170275f$export$a455218a85c89869 {}\nvar $dde8a229c2cb8a5c$exports = {};\n$parcel$export($dde8a229c2cb8a5c$exports, \"FieldExt\", () => $dde8a229c2cb8a5c$export$d11d456c2f7a68f6);\nclass $dde8a229c2cb8a5c$export$d11d456c2f7a68f6 extends (0, $6c617017d170275f$export$a455218a85c89869) {\n  Q;\n  elements;\n  basefield;\n  constructor(Q, elements) {\n    super();\n    this.Q = Q;\n    this.elements = elements;\n    this.basefield = elements[0];\n  }\n  constructWithRoot(Q, elements) {\n    return this.construct(Q, elements).withRoot(this.root);\n  }\n  withRoot(root) {\n    this.root = root;\n    return this;\n  }\n  fromBytes(Q, bytes) {\n    const length = this.extension * 48;\n    if (bytes.length !== length) throw new RangeError(`Expected ${length} bytes.`);\n    const embeddedSize = 48 * (this.extension / this.elements.length);\n    const elements = [];\n    for (let i = 0; i < this.elements.length; i++) elements.push(bytes.slice(i * embeddedSize, (i + 1) * embeddedSize));\n    return new this.constructor(Q, ...elements.reverse().map(bytes => this.basefield.fromBytes(Q, bytes)));\n  }\n  fromHex(Q, hex) {\n    return this.fromBytes(Q, (0, $11b8831ba7e63616$export$1a8ceedbd5845648)(hex));\n  }\n  fromFq(Q, fq) {\n    const y = this.basefield.fromFq(Q, fq);\n    const z = this.basefield.zero(Q);\n    const elements = [];\n    for (let i = 0; i < this.elements.length; i++) elements.push(i === 0 ? y : z);\n    const result = this.construct(Q, elements);\n    if (this instanceof (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)) result.root = new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(Q, -1n);else if (this instanceof (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)) result.root = new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)(Q, (0, $61122e18a0bc5a58$export$312db8bf004879ae).nil.one(Q), (0, $61122e18a0bc5a58$export$312db8bf004879ae).nil.one(Q));else if (this instanceof (0, $e01fe8766586be5e$export$d12e5c25403eca16)) result.root = new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)(Q, (0, $ee4c81c840b9d78d$export$3250f1bd1b840331).nil.zero(Q), (0, $ee4c81c840b9d78d$export$3250f1bd1b840331).nil.one(Q), (0, $ee4c81c840b9d78d$export$3250f1bd1b840331).nil.zero(Q));\n    return result;\n  }\n  zero(Q) {\n    return this.fromFq(Q, new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(Q, 0n));\n  }\n  one(Q) {\n    return this.fromFq(Q, new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(Q, 1n));\n  }\n  clone() {\n    return this.constructWithRoot(this.Q, this.elements.map(element => element.clone()));\n  }\n  toBytes() {\n    const bytes = [];\n    for (let i = this.elements.length - 1; i >= 0; i--) bytes.push(...this.elements[i].toBytes());\n    return Uint8Array.from(bytes);\n  }\n  toBool() {\n    return this.elements.findIndex(element => !element.toBool()) === -1;\n  }\n  toHex() {\n    return (0, $11b8831ba7e63616$export$7ea66e3774a60b67)(this.toBytes());\n  }\n  toString() {\n    return `Fq${this.extension}(${this.elements.join(\", \")})`;\n  }\n  negate() {\n    return this.constructWithRoot(this.Q, this.elements.map(element => element.negate()));\n  }\n  qiPower(i) {\n    if (this.Q != (0, $00e9cfcde39d0b4a$export$9e5f44173e64f162)) throw new (0, $652b9d23a743e8c2$export$b279dc3e096c808b)(\"Invalid Q in qiPower.\");\n    i = (0, $013cd1e91a5ae572$export$64b58c5b0372ae95)(i, this.extension);\n    if (i === 0) return this;\n    return this.constructWithRoot(this.Q, this.elements.map((element, index) => index === 0 ? element.qiPower(i) : element.qiPower(i).multiply((0, $3dc2627f1a74b978$export$3fa013b223651431)(this.extension, i, index))));\n  }\n  pow(exponent) {\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(exponent >= 0n);\n    let result = this.one(this.Q).withRoot(this.root);\n    let base = this;\n    while (exponent != 0n) {\n      if (exponent & 1n) result = result.multiply(base);\n      base = base.multiply(base);\n      exponent >>= 1n;\n    }\n    return result;\n  }\n  addTo(value) {\n    let elements;\n    if (value instanceof $dde8a229c2cb8a5c$export$d11d456c2f7a68f6 && value instanceof this.constructor) elements = value.elements;else {\n      if (typeof value !== \"bigint\" && value.extension > this.extension) throw new (0, $652b9d23a743e8c2$export$b279dc3e096c808b)(\"Operand must be higher than extension.\");\n      elements = this.elements.map(() => this.basefield.zero(this.Q));\n      elements[0] = elements[0].add(value);\n    }\n    return this.constructWithRoot(this.Q, this.elements.map((element, i) => element.add(elements[i])));\n  }\n  multiplyWith(value) {\n    if (typeof value === \"bigint\") return this.constructWithRoot(this.Q, this.elements.map(element => element.multiply(value)));else if (this.extension < value.extension) throw new (0, $652b9d23a743e8c2$export$b279dc3e096c808b)(\"Extension must be lower than operand.\");\n    const elements = this.elements.map(() => this.basefield.zero(this.Q));\n    for (const [i, x] of this.elements.entries()) {\n      if (value instanceof $dde8a229c2cb8a5c$export$d11d456c2f7a68f6 && value.extension === this.extension) {\n        for (const [j, y] of value.elements.entries()) if (x.toBool() && y.toBool()) {\n          const index = (0, $013cd1e91a5ae572$export$64b58c5b0372ae95)(i + j, this.elements.length);\n          if (i + j >= this.elements.length) elements[index] = elements[index].add(x.multiply(y).multiply(this.root));else elements[index] = elements[index].add(x.multiply(y));\n        }\n      } else if (x.toBool()) elements[i] = x.multiply(value);\n    }\n    return this.constructWithRoot(this.Q, elements);\n  }\n  subtract(value) {\n    return this.add(typeof value === \"bigint\" ? -value : value.negate());\n  }\n  divide(value) {\n    return this.multiply(typeof value === \"bigint\" ? ~value : value.inverse());\n  }\n  equalTo(value) {\n    if (!(value instanceof $dde8a229c2cb8a5c$export$d11d456c2f7a68f6 && value instanceof this.constructor)) {\n      if (typeof value === \"bigint\" || value instanceof $dde8a229c2cb8a5c$export$d11d456c2f7a68f6 && this.extension > value.extension) {\n        for (let i = 1; i < this.elements.length; i++) {\n          if (!this.elements[i].equals(this.root.zero(this.Q))) return false;\n        }\n        return this.elements[0].equals(value);\n      }\n      throw new (0, $652b9d23a743e8c2$export$b279dc3e096c808b)(\"Invalid operand.\");\n    } else return this.elements.findIndex((element, i) => !element.equals(value.elements[i])) === -1 && this.Q === value.Q;\n  }\n  lt(value) {\n    for (let i = this.elements.length - 1; i >= 0; i--) {\n      const a = this.elements[i];\n      const b = value.elements[i];\n      if (a.lt(b)) return true;else if (a.gt(b)) return false;\n    }\n    return false;\n  }\n  gt(value) {\n    for (let i = this.elements.length - 1; i >= 0; i--) {\n      const a = this.elements[i];\n      const b = value.elements[i];\n      if (a.gt(b)) return true;else if (a.lt(b)) return false;\n    }\n    return false;\n  }\n  lteq(value) {\n    return this.lt(value) || this.equals(value);\n  }\n  gteq(value) {\n    return this.gt(value) || this.equals(value);\n  }\n  add(value) {\n    try {\n      return this.addTo(value);\n    } catch (error) {\n      if (!(error instanceof (0, $652b9d23a743e8c2$export$b279dc3e096c808b)) || typeof value === \"bigint\") throw error;\n      return value.addTo(this);\n    }\n  }\n  multiply(value) {\n    try {\n      return this.multiplyWith(value);\n    } catch (error) {\n      if (!(error instanceof (0, $652b9d23a743e8c2$export$b279dc3e096c808b)) || typeof value === \"bigint\") throw error;\n      return value.multiplyWith(this);\n    }\n  }\n  equals(value) {\n    try {\n      return this.equalTo(value);\n    } catch (error) {\n      if (!(error instanceof (0, $652b9d23a743e8c2$export$b279dc3e096c808b))) throw error;\n      return typeof value === \"bigint\" ? false : value.equalTo(this);\n    }\n  }\n}\nvar $61122e18a0bc5a58$exports = {};\n$parcel$export($61122e18a0bc5a58$exports, \"Fq\", () => $61122e18a0bc5a58$export$312db8bf004879ae);\nclass $61122e18a0bc5a58$export$312db8bf004879ae extends (0, $6c617017d170275f$export$a455218a85c89869) {\n  Q;\n  static nil = new $61122e18a0bc5a58$export$312db8bf004879ae(1n, 0n);\n  extension;\n  value;\n  constructor(Q, value) {\n    super();\n    this.Q = Q;\n    this.extension = 1;\n    this.value = (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(value, Q);\n  }\n  fromBytes(Q, bytes) {\n    if (bytes.length !== 48) throw new RangeError(\"Expected 48 bytes.\");\n    return new $61122e18a0bc5a58$export$312db8bf004879ae(Q, (0, $11b8831ba7e63616$export$2a52511e4f35930a)(bytes, \"big\"));\n  }\n  fromHex(Q, hex) {\n    return $61122e18a0bc5a58$export$312db8bf004879ae.nil.fromBytes(Q, (0, $11b8831ba7e63616$export$1a8ceedbd5845648)(hex));\n  }\n  fromFq(_Q, fq) {\n    return fq;\n  }\n  zero(Q) {\n    return new $61122e18a0bc5a58$export$312db8bf004879ae(Q, 0n);\n  }\n  one(Q) {\n    return new $61122e18a0bc5a58$export$312db8bf004879ae(Q, 1n);\n  }\n  clone() {\n    return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, this.value);\n  }\n  toBytes() {\n    return (0, $11b8831ba7e63616$export$c0f6630717bc20c7)(this.value, 48, \"big\");\n  }\n  toBool() {\n    return true;\n  }\n  toHex() {\n    return (0, $11b8831ba7e63616$export$7ea66e3774a60b67)(this.toBytes());\n  }\n  toString() {\n    const hex = this.value.toString(16);\n    return `Fq(0x${hex.length > 10 ? `${hex.slice(0, 5)}..${hex.slice(hex.length - 5)}` : hex})`;\n  }\n  negate() {\n    return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, -this.value);\n  }\n  inverse() {\n    let x0 = 1n,\n      x1 = 0n,\n      y0 = 0n,\n      y1 = 1n;\n    let a = this.Q;\n    let b = this.value;\n    while (a != 0n) {\n      const q = b / a;\n      const tempB = b;\n      b = a;\n      a = (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(tempB, a);\n      const temp_x0 = x0;\n      x0 = x1;\n      x1 = temp_x0 - q * x1;\n      const temp_y0 = y0;\n      y0 = y1;\n      y1 = temp_y0 - q * y1;\n    }\n    return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, x0);\n  }\n  qiPower(_i) {\n    return this;\n  }\n  pow(exponent) {\n    return exponent === 0n ? new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, 1n) : exponent === 1n ? new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, this.value) : (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(exponent, 2n) === 0n ? new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, this.value * this.value).pow(exponent / 2n) : new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, this.value * this.value).pow(exponent / 2n).multiply(this);\n  }\n  addTo(value) {\n    if (typeof value === \"bigint\") return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, this.value + value);else if (value instanceof $61122e18a0bc5a58$export$312db8bf004879ae) return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, this.value + value.value);else throw new (0, $652b9d23a743e8c2$export$b279dc3e096c808b)(\"Can only add with Fq or bigint values.\");\n  }\n  multiplyWith(value) {\n    if (typeof value === \"bigint\") return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, this.value * value);else if (value instanceof $61122e18a0bc5a58$export$312db8bf004879ae) return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, this.value * value.value);else throw new (0, $652b9d23a743e8c2$export$b279dc3e096c808b)(\"Can only multiply with Fq or bigint values.\");\n  }\n  subtract(value) {\n    return this.add(typeof value === \"bigint\" ? -value : value.negate());\n  }\n  divide(value) {\n    return this.multiply((typeof value === \"bigint\" ? new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, value) : value).inverse());\n  }\n  equalTo(value) {\n    return value instanceof $61122e18a0bc5a58$export$312db8bf004879ae && this.value === value.value && this.Q === value.Q;\n  }\n  lt(value) {\n    return this.value < value.value;\n  }\n  gt(value) {\n    return this.value > value.value;\n  }\n  lteq(value) {\n    return this.lt(value) || this.equals(value);\n  }\n  gteq(value) {\n    return this.gt(value) || this.equals(value);\n  }\n  modSqrt() {\n    if (this.value === 0n) return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, 0n);else if ((0, $013cd1e91a5ae572$export$9747a4fa913461f)(this.value, (this.Q - 1n) / 2n, this.Q) != 1n) throw new Error(\"No sqrt exists.\");else if ((0, $013cd1e91a5ae572$export$842a2cf37af977e1)(this.Q, 4n) === 3n) return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, (0, $013cd1e91a5ae572$export$9747a4fa913461f)(this.value, (this.Q + 1n) / 4n, this.Q));else if ((0, $013cd1e91a5ae572$export$842a2cf37af977e1)(this.Q, 8n) === 5n) return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, (0, $013cd1e91a5ae572$export$9747a4fa913461f)(this.value, (this.Q + 3n) / 8n, this.Q));\n    let S = 0n;\n    let q = this.Q - 1n;\n    while ((0, $013cd1e91a5ae572$export$842a2cf37af977e1)(q, 2n) === 0n) {\n      q /= 2n;\n      S++;\n    }\n    let z = 0n;\n    for (let i = 0n; i < this.Q; i += 1n) {\n      const euler = (0, $013cd1e91a5ae572$export$9747a4fa913461f)(i, (this.Q - 1n) / 2n, this.Q);\n      if (euler === (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(-1n, this.Q)) {\n        z = i;\n        break;\n      }\n    }\n    let M = S;\n    let c = (0, $013cd1e91a5ae572$export$9747a4fa913461f)(z, q, this.Q);\n    let t = (0, $013cd1e91a5ae572$export$9747a4fa913461f)(this.value, q, this.Q);\n    let R = (0, $013cd1e91a5ae572$export$9747a4fa913461f)(this.value, (q + 1n) / 2n, this.Q);\n    while (true) {\n      if (t === 0n) return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, 0n);else if (t === 1n) return new $61122e18a0bc5a58$export$312db8bf004879ae(this.Q, R);\n      let i = 0n;\n      let f = t;\n      while (f != 1n) {\n        f = (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(f ** 2n, this.Q);\n        i++;\n      }\n      const b = (0, $013cd1e91a5ae572$export$9747a4fa913461f)(c, (0, $013cd1e91a5ae572$export$9747a4fa913461f)(2n, M - i - 1n, this.Q), this.Q);\n      M = i;\n      c = (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(b ** 2n, this.Q);\n      t = (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(t * c, this.Q);\n      R = (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(R * b, this.Q);\n    }\n  }\n  add(value) {\n    try {\n      return this.addTo(value);\n    } catch (error) {\n      if (!(error instanceof (0, $652b9d23a743e8c2$export$b279dc3e096c808b)) || typeof value === \"bigint\") throw error;\n      return value.addTo(this);\n    }\n  }\n  multiply(value) {\n    try {\n      return this.multiplyWith(value);\n    } catch (error) {\n      if (!(error instanceof (0, $652b9d23a743e8c2$export$b279dc3e096c808b)) || typeof value === \"bigint\") throw error;\n      return value.multiplyWith(this);\n    }\n  }\n  equals(value) {\n    try {\n      return this.equalTo(value);\n    } catch (error) {\n      if (!(error instanceof (0, $652b9d23a743e8c2$export$b279dc3e096c808b))) throw error;\n      return typeof value === \"bigint\" ? false : value.equalTo(this);\n    }\n  }\n}\nvar $ee4c81c840b9d78d$exports = {};\n$parcel$export($ee4c81c840b9d78d$exports, \"Fq2\", () => $ee4c81c840b9d78d$export$3250f1bd1b840331);\nclass $ee4c81c840b9d78d$export$3250f1bd1b840331 extends (0, $dde8a229c2cb8a5c$export$d11d456c2f7a68f6) {\n  static nil = new $ee4c81c840b9d78d$export$3250f1bd1b840331(1n, (0, $61122e18a0bc5a58$export$312db8bf004879ae).nil, (0, $61122e18a0bc5a58$export$312db8bf004879ae).nil);\n  extension = 2;\n  root;\n  constructor(Q, x, y) {\n    super(Q, [x, y]);\n    this.root = new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(Q, -1n);\n  }\n  construct(Q, elements) {\n    return new $ee4c81c840b9d78d$export$3250f1bd1b840331(Q, elements[0], elements[1]);\n  }\n  inverse() {\n    const [a, b] = this.elements;\n    const factor = a.multiply(a).add(b.multiply(b)).inverse();\n    return new $ee4c81c840b9d78d$export$3250f1bd1b840331(this.Q, a.multiply(factor), b.negate().multiply(factor));\n  }\n  mulByNonResidue() {\n    const [a, b] = this.elements;\n    return new $ee4c81c840b9d78d$export$3250f1bd1b840331(this.Q, a.subtract(b), a.add(b));\n  }\n  modSqrt() {\n    const [a0, a1] = this.elements;\n    if (a1.equals(this.basefield.one(this.Q))) return this.fromFq(this.Q, a0.modSqrt());\n    let alpha = a0.pow(2n).add(a1.pow(2n));\n    let gamma = alpha.pow((this.Q - 1n) / 2n);\n    if (new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.Q, -1n).equals(gamma)) throw new Error(\"No sqrt exists.\");\n    alpha = alpha.modSqrt();\n    let delta = a0.add(alpha).multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.Q, 2n).inverse());\n    gamma = delta.pow((this.Q - 1n) / 2n);\n    if (gamma.equals(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.Q, -1n))) delta = a0.subtract(alpha).multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.Q, 2n).inverse());\n    const x0 = delta.modSqrt();\n    const x1 = a1.multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.Q, 2n).multiply(x0).inverse());\n    return new $ee4c81c840b9d78d$export$3250f1bd1b840331(this.Q, x0, x1);\n  }\n}\nvar $f9eca204c73b879f$exports = {};\n$parcel$export($f9eca204c73b879f$exports, \"Fq6\", () => $f9eca204c73b879f$export$4b83d0846fa6fe37);\nclass $f9eca204c73b879f$export$4b83d0846fa6fe37 extends (0, $dde8a229c2cb8a5c$export$d11d456c2f7a68f6) {\n  static nil = new $f9eca204c73b879f$export$4b83d0846fa6fe37(1n, (0, $ee4c81c840b9d78d$export$3250f1bd1b840331).nil, (0, $ee4c81c840b9d78d$export$3250f1bd1b840331).nil, (0, $ee4c81c840b9d78d$export$3250f1bd1b840331).nil);\n  extension = 6;\n  root;\n  constructor(Q, x, y, z) {\n    super(Q, [x, y, z]);\n    this.root = new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)(Q, (0, $61122e18a0bc5a58$export$312db8bf004879ae).nil.one(Q), (0, $61122e18a0bc5a58$export$312db8bf004879ae).nil.one(Q));\n  }\n  construct(Q, elements) {\n    return new $f9eca204c73b879f$export$4b83d0846fa6fe37(Q, elements[0], elements[1], elements[2]);\n  }\n  inverse() {\n    const [a, b, c] = this.elements;\n    const g0 = a.multiply(a).subtract(b.multiply(c.mulByNonResidue()));\n    const g1 = c.multiply(c).mulByNonResidue().subtract(a.multiply(b));\n    const g2 = b.multiply(b).subtract(a.multiply(c));\n    const factor = g0.multiply(a).add(g1.multiply(c).add(g2.multiply(b)).mulByNonResidue()).inverse();\n    return new $f9eca204c73b879f$export$4b83d0846fa6fe37(this.Q, g0.multiply(factor), g1.multiply(factor), g2.multiply(factor));\n  }\n  mulByNonResidue() {\n    const [a, b, c] = this.elements;\n    return new $f9eca204c73b879f$export$4b83d0846fa6fe37(this.Q, c.multiply(this.root), a, b);\n  }\n}\nvar $e01fe8766586be5e$exports = {};\n$parcel$export($e01fe8766586be5e$exports, \"Fq12\", () => $e01fe8766586be5e$export$d12e5c25403eca16);\nclass $e01fe8766586be5e$export$d12e5c25403eca16 extends (0, $dde8a229c2cb8a5c$export$d11d456c2f7a68f6) {\n  static nil = new $e01fe8766586be5e$export$d12e5c25403eca16(1n, (0, $f9eca204c73b879f$export$4b83d0846fa6fe37).nil, (0, $f9eca204c73b879f$export$4b83d0846fa6fe37).nil);\n  extension = 12;\n  root;\n  constructor(Q, x, y) {\n    super(Q, [x, y]);\n    this.root = new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)(Q, (0, $ee4c81c840b9d78d$export$3250f1bd1b840331).nil.zero(Q), (0, $ee4c81c840b9d78d$export$3250f1bd1b840331).nil.one(Q), (0, $ee4c81c840b9d78d$export$3250f1bd1b840331).nil.zero(Q));\n  }\n  construct(Q, elements) {\n    return new $e01fe8766586be5e$export$d12e5c25403eca16(Q, elements[0], elements[1]);\n  }\n  inverse() {\n    const [a, b] = this.elements;\n    const factor = a.multiply(a).subtract(b.multiply(b).mulByNonResidue()).inverse();\n    return new $e01fe8766586be5e$export$d12e5c25403eca16(this.Q, a.multiply(factor), b.negate().multiply(factor));\n  }\n}\nvar $00e9cfcde39d0b4a$exports = {};\n$parcel$export($00e9cfcde39d0b4a$exports, \"x\", () => $00e9cfcde39d0b4a$export$d141bba7fdc215a3);\n$parcel$export($00e9cfcde39d0b4a$exports, \"q\", () => $00e9cfcde39d0b4a$export$9e5f44173e64f162);\n$parcel$export($00e9cfcde39d0b4a$exports, \"a\", () => $00e9cfcde39d0b4a$export$407448d2b89b1813);\n$parcel$export($00e9cfcde39d0b4a$exports, \"b\", () => $00e9cfcde39d0b4a$export$8b22cf2602fb60ce);\n$parcel$export($00e9cfcde39d0b4a$exports, \"aTwist\", () => $00e9cfcde39d0b4a$export$371e57e0e902051d);\n$parcel$export($00e9cfcde39d0b4a$exports, \"bTwist\", () => $00e9cfcde39d0b4a$export$a1902a2bd2e92b96);\n$parcel$export($00e9cfcde39d0b4a$exports, \"gx\", () => $00e9cfcde39d0b4a$export$881ce897a4237459);\n$parcel$export($00e9cfcde39d0b4a$exports, \"gy\", () => $00e9cfcde39d0b4a$export$5056eb87f1daa9b4);\n$parcel$export($00e9cfcde39d0b4a$exports, \"g2x\", () => $00e9cfcde39d0b4a$export$2cdfd364bfc1179f);\n$parcel$export($00e9cfcde39d0b4a$exports, \"g2y\", () => $00e9cfcde39d0b4a$export$85e678c171039b5a);\n$parcel$export($00e9cfcde39d0b4a$exports, \"n\", () => $00e9cfcde39d0b4a$export$7ccc53e8f1e7dfc5);\n$parcel$export($00e9cfcde39d0b4a$exports, \"h\", () => $00e9cfcde39d0b4a$export$dda1d9f60106f0e9);\n$parcel$export($00e9cfcde39d0b4a$exports, \"hEff\", () => $00e9cfcde39d0b4a$export$41b7b4fef7f76fa9);\n$parcel$export($00e9cfcde39d0b4a$exports, \"k\", () => $00e9cfcde39d0b4a$export$342063e11d6c3cad);\n$parcel$export($00e9cfcde39d0b4a$exports, \"sqrtN3\", () => $00e9cfcde39d0b4a$export$985f9eea851ca5f9);\n$parcel$export($00e9cfcde39d0b4a$exports, \"sqrtN3m1o2\", () => $00e9cfcde39d0b4a$export$3d2b20680da13ad6);\n$parcel$export($00e9cfcde39d0b4a$exports, \"defaultEc\", () => $00e9cfcde39d0b4a$export$df72980aaa0ca402);\n$parcel$export($00e9cfcde39d0b4a$exports, \"defaultEcTwist\", () => $00e9cfcde39d0b4a$export$89bff894721071da);\nconst $00e9cfcde39d0b4a$export$d141bba7fdc215a3 = -0xd201000000010000n;\nconst $00e9cfcde39d0b4a$export$9e5f44173e64f162 = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\nconst $00e9cfcde39d0b4a$export$407448d2b89b1813 = new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 0n);\nconst $00e9cfcde39d0b4a$export$8b22cf2602fb60ce = new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 4n);\nconst $00e9cfcde39d0b4a$export$371e57e0e902051d = new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)($00e9cfcde39d0b4a$export$9e5f44173e64f162, new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 0n));\nconst $00e9cfcde39d0b4a$export$a1902a2bd2e92b96 = new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)($00e9cfcde39d0b4a$export$9e5f44173e64f162, new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 4n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 4n));\nconst $00e9cfcde39d0b4a$export$881ce897a4237459 = new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bbn);\nconst $00e9cfcde39d0b4a$export$5056eb87f1daa9b4 = new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1n);\nconst $00e9cfcde39d0b4a$export$2cdfd364bfc1179f = new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)($00e9cfcde39d0b4a$export$9e5f44173e64f162, new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758n));\nconst $00e9cfcde39d0b4a$export$85e678c171039b5a = new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)($00e9cfcde39d0b4a$export$9e5f44173e64f162, new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)($00e9cfcde39d0b4a$export$9e5f44173e64f162, 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582n));\nconst $00e9cfcde39d0b4a$export$7ccc53e8f1e7dfc5 = 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001n;\nconst $00e9cfcde39d0b4a$export$dda1d9f60106f0e9 = 0x396c8c005555e1568c00aaab0000aaabn;\nconst $00e9cfcde39d0b4a$export$41b7b4fef7f76fa9 = 0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551n;\nconst $00e9cfcde39d0b4a$export$342063e11d6c3cad = 12n;\nconst $00e9cfcde39d0b4a$export$985f9eea851ca5f9 = 1586958781458431025242759403266842894121773480562120986020912974854563298150952611241517463240701n;\nconst $00e9cfcde39d0b4a$export$3d2b20680da13ad6 = 793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n;\nconst $00e9cfcde39d0b4a$export$df72980aaa0ca402 = {\n  q: $00e9cfcde39d0b4a$export$9e5f44173e64f162,\n  a: $00e9cfcde39d0b4a$export$407448d2b89b1813,\n  b: $00e9cfcde39d0b4a$export$8b22cf2602fb60ce,\n  gx: $00e9cfcde39d0b4a$export$881ce897a4237459,\n  gy: $00e9cfcde39d0b4a$export$5056eb87f1daa9b4,\n  g2x: $00e9cfcde39d0b4a$export$2cdfd364bfc1179f,\n  g2y: $00e9cfcde39d0b4a$export$85e678c171039b5a,\n  n: $00e9cfcde39d0b4a$export$7ccc53e8f1e7dfc5,\n  h: $00e9cfcde39d0b4a$export$dda1d9f60106f0e9,\n  x: $00e9cfcde39d0b4a$export$d141bba7fdc215a3,\n  k: $00e9cfcde39d0b4a$export$342063e11d6c3cad,\n  sqrtN3: $00e9cfcde39d0b4a$export$985f9eea851ca5f9,\n  sqrtN3m1o2: $00e9cfcde39d0b4a$export$3d2b20680da13ad6\n};\nconst $00e9cfcde39d0b4a$export$89bff894721071da = {\n  q: $00e9cfcde39d0b4a$export$9e5f44173e64f162,\n  a: $00e9cfcde39d0b4a$export$371e57e0e902051d,\n  b: $00e9cfcde39d0b4a$export$a1902a2bd2e92b96,\n  gx: $00e9cfcde39d0b4a$export$881ce897a4237459,\n  gy: $00e9cfcde39d0b4a$export$5056eb87f1daa9b4,\n  g2x: $00e9cfcde39d0b4a$export$2cdfd364bfc1179f,\n  g2y: $00e9cfcde39d0b4a$export$85e678c171039b5a,\n  n: $00e9cfcde39d0b4a$export$7ccc53e8f1e7dfc5,\n  h: $00e9cfcde39d0b4a$export$41b7b4fef7f76fa9,\n  x: $00e9cfcde39d0b4a$export$d141bba7fdc215a3,\n  k: $00e9cfcde39d0b4a$export$342063e11d6c3cad,\n  sqrtN3: $00e9cfcde39d0b4a$export$985f9eea851ca5f9,\n  sqrtN3m1o2: $00e9cfcde39d0b4a$export$3d2b20680da13ad6\n};\nvar $3dc2627f1a74b978$exports = {};\n$parcel$export($3dc2627f1a74b978$exports, \"frobCoeffs\", () => $3dc2627f1a74b978$export$ef36a8205544c00e);\n$parcel$export($3dc2627f1a74b978$exports, \"getFrobCoeff\", () => $3dc2627f1a74b978$export$3fa013b223651431);\nconst $3dc2627f1a74b978$export$ef36a8205544c00e = {\n  \"2,1,1\": new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), -1n),\n  \"6,1,1\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn)),\n  \"6,1,2\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaadn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)),\n  \"6,2,1\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)),\n  \"6,2,2\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)),\n  \"6,3,1\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 1n)),\n  \"6,3,2\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaan), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)),\n  \"6,4,1\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)),\n  \"6,4,2\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)),\n  \"6,5,1\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen)),\n  \"6,5,2\": new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffffn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)),\n  \"12,1,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0xfc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,2,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffffn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,3,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,4,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,5,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,6,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaan), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,7,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0xfc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,8,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,9,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,10,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaadn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))),\n  \"12,11,1\": new (0, $f9eca204c73b879f$export$4b83d0846fa6fe37)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)))\n};\nfunction $3dc2627f1a74b978$export$3fa013b223651431(extension, i, index) {\n  return $3dc2627f1a74b978$export$ef36a8205544c00e[`${extension},${i},${index}`];\n}\nvar $1d6ac6ce37d39979$exports = {};\n$parcel$export($1d6ac6ce37d39979$exports, \"sha256\", () => $1d6ac6ce37d39979$export$bced8d2aada2d1c9);\n$parcel$export($1d6ac6ce37d39979$exports, \"sha512\", () => $1d6ac6ce37d39979$export$a888d2532e6dc7bb);\nconst $1d6ac6ce37d39979$export$bced8d2aada2d1c9 = {\n  byteSize: 32,\n  blockSize: 64,\n  convert: buffer => {\n    const hash = new (0, $parcel$interopDefault($fpZC2$jssha))(\"SHA-256\", \"UINT8ARRAY\");\n    hash.update(buffer);\n    return hash.getHash(\"UINT8ARRAY\");\n  }\n};\nconst $1d6ac6ce37d39979$export$a888d2532e6dc7bb = {\n  byteSize: 64,\n  blockSize: 128,\n  convert: buffer => {\n    const hash = new (0, $parcel$interopDefault($fpZC2$jssha))(\"SHA-512\", \"UINT8ARRAY\");\n    hash.update(buffer);\n    return hash.getHash(\"UINT8ARRAY\");\n  }\n};\nvar $8856e63c79a7a18e$exports = {};\n$parcel$export($8856e63c79a7a18e$exports, \"xnum\", () => $8856e63c79a7a18e$export$4c6c1dafe316d2c);\n$parcel$export($8856e63c79a7a18e$exports, \"xden\", () => $8856e63c79a7a18e$export$732ae2b2551ff413);\n$parcel$export($8856e63c79a7a18e$exports, \"ynum\", () => $8856e63c79a7a18e$export$ea2765eb3fc09cbc);\n$parcel$export($8856e63c79a7a18e$exports, \"yden\", () => $8856e63c79a7a18e$export$54826405639b5799);\nconst $8856e63c79a7a18e$export$4c6c1dafe316d2c = [new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71an)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71en), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38dn)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))];\nconst $8856e63c79a7a18e$export$732ae2b2551ff413 = [new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0xcn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9fn)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 1n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))];\nconst $8856e63c79a7a18e$export$ea2765eb3fc09cbc = [new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97ben)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71cn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38fn)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))];\nconst $8856e63c79a7a18e$export$54826405639b5799 = [new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fbn), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fbn)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x12n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 1n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n))];\nvar $7114a315a435248d$exports = {};\n$parcel$export($7114a315a435248d$exports, \"xi_2\", () => $7114a315a435248d$export$8d1968de8a0388cb);\n$parcel$export($7114a315a435248d$exports, \"Ell2p_a\", () => $7114a315a435248d$export$cb23cd3dd580e72c);\n$parcel$export($7114a315a435248d$exports, \"Ell2p_b\", () => $7114a315a435248d$export$a49b3bf2a8f9ece3);\n$parcel$export($7114a315a435248d$exports, \"ev1\", () => $7114a315a435248d$export$c278e5ed08c0671a);\n$parcel$export($7114a315a435248d$exports, \"ev2\", () => $7114a315a435248d$export$f37125f5b41ac41c);\n$parcel$export($7114a315a435248d$exports, \"ev3\", () => $7114a315a435248d$export$8d0285e71910f92b);\n$parcel$export($7114a315a435248d$exports, \"ev4\", () => $7114a315a435248d$export$7fe9a0c81d3716fa);\n$parcel$export($7114a315a435248d$exports, \"etas\", () => $7114a315a435248d$export$dfed87f2d11110f4);\nconst $7114a315a435248d$export$8d1968de8a0388cb = new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), -2n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), -1n));\nconst $7114a315a435248d$export$cb23cd3dd580e72c = new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 240n));\nconst $7114a315a435248d$export$a49b3bf2a8f9ece3 = new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 1012n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 1012n));\nconst $7114a315a435248d$export$c278e5ed08c0671a = 0x699be3b8c6870965e5bf892ad5d2cc7b0e85a117402dfd83b7f4a947e02d978498255a2aaec0ac627b5afbdf1bf1c90n;\nconst $7114a315a435248d$export$f37125f5b41ac41c = 0x8157cd83046453f5dd0972b6e3949e4288020b5b8a9cc99ca07e27089a2ce2436d965026adad3ef7baba37f2183e9b5n;\nconst $7114a315a435248d$export$8d0285e71910f92b = 0xab1c2ffdd6c253ca155231eb3e71ba044fd562f6f72bc5bad5ec46a0b7a3b0247cf08ce6c6317f40edbc653a72dee17n;\nconst $7114a315a435248d$export$7fe9a0c81d3716fa = 0xaa404866706722864480885d68ad0ccac1967c7544b447873cc37e0181271e006df72162a3d3e0287bf597fbf7f8fc1n;\nconst $7114a315a435248d$export$dfed87f2d11110f4 = [new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), $7114a315a435248d$export$c278e5ed08c0671a), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), $7114a315a435248d$export$f37125f5b41ac41c)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), (0, $00e9cfcde39d0b4a$export$9e5f44173e64f162) - $7114a315a435248d$export$f37125f5b41ac41c), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), $7114a315a435248d$export$c278e5ed08c0671a)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), $7114a315a435248d$export$8d0285e71910f92b), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), $7114a315a435248d$export$7fe9a0c81d3716fa)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), (0, $00e9cfcde39d0b4a$export$9e5f44173e64f162) - $7114a315a435248d$export$7fe9a0c81d3716fa), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), $7114a315a435248d$export$8d0285e71910f92b))];\nvar $45c5a0c79e0736cc$exports = {};\n$parcel$export($45c5a0c79e0736cc$exports, \"rv1\", () => $45c5a0c79e0736cc$export$cd08e5dbcdd326bb);\n$parcel$export($45c5a0c79e0736cc$exports, \"rootsOfUnity\", () => $45c5a0c79e0736cc$export$5e60bb11dae8e64b);\nconst $45c5a0c79e0736cc$export$cd08e5dbcdd326bb = 0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n;\nconst $45c5a0c79e0736cc$export$5e60bb11dae8e64b = [new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 1n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 0n), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 1n)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), $45c5a0c79e0736cc$export$cd08e5dbcdd326bb), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), $45c5a0c79e0736cc$export$cd08e5dbcdd326bb)), new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), $45c5a0c79e0736cc$export$cd08e5dbcdd326bb), new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), (0, $00e9cfcde39d0b4a$export$9e5f44173e64f162) - $45c5a0c79e0736cc$export$cd08e5dbcdd326bb))];\nvar $5f5e7634db6ec17d$exports = {};\n$parcel$export($5f5e7634db6ec17d$exports, \"basicSchemeDst\", () => $5f5e7634db6ec17d$export$c1bffad7aeda544b);\n$parcel$export($5f5e7634db6ec17d$exports, \"augSchemeDst\", () => $5f5e7634db6ec17d$export$5b346028b2eb430c);\n$parcel$export($5f5e7634db6ec17d$exports, \"popSchemeDst\", () => $5f5e7634db6ec17d$export$8d64a5ed43a5a57c);\n$parcel$export($5f5e7634db6ec17d$exports, \"popSchemePopDst\", () => $5f5e7634db6ec17d$export$b554d748bc2a5eef);\nconst $5f5e7634db6ec17d$export$c1bffad7aeda544b = new TextEncoder().encode(\"BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_\");\nconst $5f5e7634db6ec17d$export$5b346028b2eb430c = new TextEncoder().encode(\"BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_AUG_\");\nconst $5f5e7634db6ec17d$export$8d64a5ed43a5a57c = new TextEncoder().encode(\"BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP_\");\nconst $5f5e7634db6ec17d$export$b554d748bc2a5eef = new TextEncoder().encode(\"BLS_POP_BLS12381G2_XMD:SHA-256_SSWU_RO_POP_\");\nvar $4508fd1f2dfd87e3$exports = {};\n$parcel$export($4508fd1f2dfd87e3$exports, \"AffinePoint\", () => $4508fd1f2dfd87e3$export$567266b06c239d21);\nclass $4508fd1f2dfd87e3$export$567266b06c239d21 {\n  x;\n  y;\n  isInfinity;\n  ec;\n  constructor(x, y, isInfinity, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n    this.x = x;\n    this.y = y;\n    this.isInfinity = isInfinity;\n    this.ec = ec;\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(x instanceof y.constructor);\n  }\n  isOnCurve() {\n    return this.isInfinity || this.y.multiply(this.y).equals(this.x.multiply(this.x).multiply(this.x).add(this.ec.a.multiply(this.x)).add(this.ec.b));\n  }\n  toJacobian() {\n    return new (0, $f81fe8e548a259fc$export$54579cb87d860a47)(this.x, this.y, this.x.one(this.ec.q), this.isInfinity, this.ec);\n  }\n  twist() {\n    const f = (0, $e01fe8766586be5e$export$d12e5c25403eca16).nil.one(this.ec.q);\n    const wsq = new (0, $e01fe8766586be5e$export$d12e5c25403eca16)(this.ec.q, f.root, (0, $f9eca204c73b879f$export$4b83d0846fa6fe37).nil.zero(this.ec.q));\n    const wcu = new (0, $e01fe8766586be5e$export$d12e5c25403eca16)(this.ec.q, (0, $f9eca204c73b879f$export$4b83d0846fa6fe37).nil.zero(this.ec.q), f.root);\n    return new $4508fd1f2dfd87e3$export$567266b06c239d21(this.x.multiply(wsq), this.y.multiply(wcu), false, this.ec);\n  }\n  untwist() {\n    const f = (0, $e01fe8766586be5e$export$d12e5c25403eca16).nil.one(this.ec.q);\n    const wsq = new (0, $e01fe8766586be5e$export$d12e5c25403eca16)(this.ec.q, f.root, (0, $f9eca204c73b879f$export$4b83d0846fa6fe37).nil.zero(this.ec.q));\n    const wcu = new (0, $e01fe8766586be5e$export$d12e5c25403eca16)(this.ec.q, (0, $f9eca204c73b879f$export$4b83d0846fa6fe37).nil.zero(this.ec.q), f.root);\n    return new $4508fd1f2dfd87e3$export$567266b06c239d21(this.x.divide(wsq), this.y.divide(wcu), false, this.ec);\n  }\n  double() {\n    const left = this.x.multiply(this.x).multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.ec.q, 3n)).add(this.ec.a);\n    const s = left.divide(this.y.multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.ec.q, 2n)));\n    const newX = s.multiply(s).subtract(this.x).subtract(this.x);\n    const newY = s.multiply(this.x.subtract(newX)).subtract(this.y);\n    return new $4508fd1f2dfd87e3$export$567266b06c239d21(newX, newY, false, this.ec);\n  }\n  add(value) {\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(this.isOnCurve());\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(value.isOnCurve());\n    if (this.isInfinity) return value;else if (value.isInfinity) return this;else if (this.equals(value)) return this.double();\n    const s = value.y.subtract(this.y).divide(value.x.subtract(this.x));\n    const newX = s.multiply(s).subtract(this.x).subtract(value.x);\n    const newY = s.multiply(this.x.subtract(newX)).subtract(this.y);\n    return new $4508fd1f2dfd87e3$export$567266b06c239d21(newX, newY, false, this.ec);\n  }\n  subtract(value) {\n    return this.add(value.negate());\n  }\n  multiply(value) {\n    return (0, $27314bc03f74868b$export$6fc8005fc3e0ffe8)(value, this.toJacobian(), this.ec).toAffine();\n  }\n  negate() {\n    return new $4508fd1f2dfd87e3$export$567266b06c239d21(this.x, this.y.negate(), this.isInfinity, this.ec);\n  }\n  equals(value) {\n    return this.x.equals(value.x) && this.y.equals(value.y) && this.isInfinity === value.isInfinity;\n  }\n  clone() {\n    return new $4508fd1f2dfd87e3$export$567266b06c239d21(this.x.clone(), this.y.clone(), this.isInfinity, this.ec);\n  }\n  toString() {\n    return `AffinePoint(x=${this.x}, y=${this.y}, i=${this.isInfinity})`;\n  }\n}\nvar $6855b0e4fef0dbbe$exports = {};\nvar $f81fe8e548a259fc$exports = {};\n$parcel$export($f81fe8e548a259fc$exports, \"JacobianPoint\", () => $f81fe8e548a259fc$export$54579cb87d860a47);\nclass $f81fe8e548a259fc$export$54579cb87d860a47 {\n  x;\n  y;\n  z;\n  isInfinity;\n  ec;\n  static fromBytes(bytes, isExtension, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n    const provider = isExtension ? (0, $ee4c81c840b9d78d$export$3250f1bd1b840331) : (0, $61122e18a0bc5a58$export$312db8bf004879ae);\n    if (isExtension) {\n      if (bytes.length !== 96) throw new Error(\"Expected 96 bytes.\");\n    } else {\n      if (bytes.length !== 48) throw new Error(\"Expected 48 bytes.\");\n    }\n    const mByte = bytes[0] & 0xe0;\n    if ([0x20, 0x60, 0xe0].includes(mByte)) throw new Error(\"Invalid first three bits.\");\n    const compressed = (mByte & 0x80) !== 0;\n    const infinity = (mByte & 0x40) !== 0;\n    const signed = (mByte & 0x20) !== 0;\n    if (!compressed) throw new Error(\"Compression bit must be 1.\");\n    bytes[0] &= 0x1f;\n    if (infinity) {\n      for (const byte of bytes) {\n        if (byte !== 0) throw new Error(\"Point at infinity, but found non-zero byte.\");\n      }\n      return new (0, $4508fd1f2dfd87e3$export$567266b06c239d21)(provider.nil.zero(ec.q), provider.nil.zero(ec.q), true, ec).toJacobian();\n    }\n    const x = (isExtension ? (0, $ee4c81c840b9d78d$export$3250f1bd1b840331) : (0, $61122e18a0bc5a58$export$312db8bf004879ae)).nil.fromBytes(ec.q, bytes);\n    const yValue = (0, $27314bc03f74868b$export$c28dd39fe7cf1942)(x, ec);\n    const sign = isExtension ? (0, $27314bc03f74868b$export$1f050984502bf9f6)(yValue, ec) : (0, $27314bc03f74868b$export$42e585c8f08aa7c5)(yValue, ec);\n    const y = sign === signed ? yValue : yValue.negate();\n    return new (0, $4508fd1f2dfd87e3$export$567266b06c239d21)(x, y, false, ec).toJacobian();\n  }\n  static fromHex(hex, isExtension, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n    return $f81fe8e548a259fc$export$54579cb87d860a47.fromBytes((0, $11b8831ba7e63616$export$1a8ceedbd5845648)(hex), isExtension, ec);\n  }\n  static generateG1() {\n    return new (0, $4508fd1f2dfd87e3$export$567266b06c239d21)((0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).gx, (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).gy, false, (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)).toJacobian();\n  }\n  static generateG2() {\n    return new (0, $4508fd1f2dfd87e3$export$567266b06c239d21)((0, $00e9cfcde39d0b4a$export$89bff894721071da).g2x, (0, $00e9cfcde39d0b4a$export$89bff894721071da).g2y, false, (0, $00e9cfcde39d0b4a$export$89bff894721071da)).toJacobian();\n  }\n  static infinityG1(isExtension = false) {\n    const provider = isExtension ? (0, $ee4c81c840b9d78d$export$3250f1bd1b840331) : (0, $61122e18a0bc5a58$export$312db8bf004879ae);\n    return new $f81fe8e548a259fc$export$54579cb87d860a47(provider.nil.zero((0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).q), provider.nil.zero((0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).q), provider.nil.zero((0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).q), true, (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402));\n  }\n  static infinityG2(isExtension = true) {\n    const provider = isExtension ? (0, $ee4c81c840b9d78d$export$3250f1bd1b840331) : (0, $61122e18a0bc5a58$export$312db8bf004879ae);\n    return new $f81fe8e548a259fc$export$54579cb87d860a47(provider.nil.zero((0, $00e9cfcde39d0b4a$export$89bff894721071da).q), provider.nil.zero((0, $00e9cfcde39d0b4a$export$89bff894721071da).q), provider.nil.zero((0, $00e9cfcde39d0b4a$export$89bff894721071da).q), true, (0, $00e9cfcde39d0b4a$export$89bff894721071da));\n  }\n  static fromBytesG1(bytes, isExtension = false) {\n    return $f81fe8e548a259fc$export$54579cb87d860a47.fromBytes(bytes, isExtension, (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402));\n  }\n  static fromBytesG2(bytes, isExtension = true) {\n    return $f81fe8e548a259fc$export$54579cb87d860a47.fromBytes(bytes, isExtension, (0, $00e9cfcde39d0b4a$export$89bff894721071da));\n  }\n  static fromHexG1(hex, isExtension = false) {\n    return $f81fe8e548a259fc$export$54579cb87d860a47.fromBytesG1((0, $11b8831ba7e63616$export$1a8ceedbd5845648)(hex), isExtension);\n  }\n  static fromHexG2(hex, isExtension = true) {\n    return $f81fe8e548a259fc$export$54579cb87d860a47.fromBytesG2((0, $11b8831ba7e63616$export$1a8ceedbd5845648)(hex), isExtension);\n  }\n  constructor(x, y, z, isInfinity, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isInfinity = isInfinity;\n    this.ec = ec;\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(x instanceof y.constructor);\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(y instanceof z.constructor);\n  }\n  isOnCurve() {\n    return this.isInfinity || this.toAffine().isOnCurve();\n  }\n  isValid() {\n    return this.isOnCurve() && this.multiply(this.ec.n).equals(this.x instanceof (0, $61122e18a0bc5a58$export$312db8bf004879ae) ? $f81fe8e548a259fc$export$54579cb87d860a47.infinityG1() : $f81fe8e548a259fc$export$54579cb87d860a47.infinityG2());\n  }\n  getFingerprint() {\n    const bytes = this.toBytes();\n    return (0, $11b8831ba7e63616$export$b25202b2d7056da9)((0, $20b42468fafd22ce$export$699b481075cb9e0d)(bytes).slice(0, 4), \"big\");\n  }\n  toAffine() {\n    return this.isInfinity ? new (0, $4508fd1f2dfd87e3$export$567266b06c239d21)(this.x.zero(this.ec.q), this.y.zero(this.ec.q), true, this.ec) : new (0, $4508fd1f2dfd87e3$export$567266b06c239d21)(this.x.divide(this.z.pow(2n)), this.y.divide(this.z.pow(3n)), false, this.ec);\n  }\n  toBytes() {\n    const point = this.toAffine();\n    const output = point.x.toBytes();\n    if (point.isInfinity) {\n      const bytes = [0xc0];\n      for (let i = 0; i < output.length - 1; i++) bytes.push(0);\n      return Uint8Array.from(bytes);\n    }\n    const sign = point.y instanceof (0, $ee4c81c840b9d78d$export$3250f1bd1b840331) ? (0, $27314bc03f74868b$export$1f050984502bf9f6)(point.y, this.ec) : (0, $27314bc03f74868b$export$42e585c8f08aa7c5)(point.y, this.ec);\n    output[0] |= sign ? 0xa0 : 0x80;\n    return output;\n  }\n  toHex() {\n    return (0, $11b8831ba7e63616$export$7ea66e3774a60b67)(this.toBytes());\n  }\n  toString() {\n    return `JacobianPoint(x=${this.x}, y=${this.y}, z=${this.z}, i=${this.isInfinity})`;\n  }\n  double() {\n    if (this.isInfinity || this.y.equals(this.x.zero(this.ec.q))) return new $f81fe8e548a259fc$export$54579cb87d860a47(this.x.one(this.ec.q), this.x.one(this.ec.q), this.x.zero(this.ec.q), true, this.ec);\n    const S = this.x.multiply(this.y).multiply(this.y).multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.ec.q, 4n));\n    const Z_sq = this.z.multiply(this.z);\n    const Z_4th = Z_sq.multiply(Z_sq);\n    const Y_sq = this.y.multiply(this.y);\n    const Y_4th = Y_sq.multiply(Y_sq);\n    const M = this.x.multiply(this.x).multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.ec.q, 3n)).add(this.ec.a.multiply(Z_4th));\n    const X_p = M.multiply(M).subtract(S.multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.ec.q, 2n)));\n    const Y_p = M.multiply(S.subtract(X_p)).subtract(Y_4th.multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.ec.q, 8n)));\n    const Z_p = this.y.multiply(this.z).multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.ec.q, 2n));\n    return new $f81fe8e548a259fc$export$54579cb87d860a47(X_p, Y_p, Z_p, false, this.ec);\n  }\n  negate() {\n    return this.toAffine().negate().toJacobian();\n  }\n  add(value) {\n    if (this.isInfinity) return value;else if (value.isInfinity) return this;\n    const U1 = this.x.multiply(value.z.pow(2n));\n    const U2 = value.x.multiply(this.z.pow(2n));\n    const S1 = this.y.multiply(value.z.pow(3n));\n    const S2 = value.y.multiply(this.z.pow(3n));\n    if (U1.equals(U2)) {\n      if (!S1.equals(S2)) return new $f81fe8e548a259fc$export$54579cb87d860a47(this.x.one(this.ec.q), this.x.one(this.ec.q), this.x.zero(this.ec.q), true, this.ec);else return this.double();\n    }\n    const H = U2.subtract(U1);\n    const R = S2.subtract(S1);\n    const H_sq = H.multiply(H);\n    const H_cu = H.multiply(H_sq);\n    const X3 = R.multiply(R).subtract(H_cu).subtract(U1.multiply(H_sq).multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(this.ec.q, 2n)));\n    const Y3 = R.multiply(U1.multiply(H_sq).subtract(X3)).subtract(S1.multiply(H_cu));\n    const Z3 = H.multiply(this.z).multiply(value.z);\n    return new $f81fe8e548a259fc$export$54579cb87d860a47(X3, Y3, Z3, false, this.ec);\n  }\n  multiply(value) {\n    return (0, $27314bc03f74868b$export$6fc8005fc3e0ffe8)(value, this, this.ec);\n  }\n  equals(value) {\n    return this.toAffine().equals(value.toAffine());\n  }\n  clone() {\n    return new $f81fe8e548a259fc$export$54579cb87d860a47(this.x.clone(), this.y.clone(), this.z.clone(), this.isInfinity, this.ec);\n  }\n}\nvar $652b9d23a743e8c2$exports = {};\n$parcel$export($652b9d23a743e8c2$exports, \"OperatorError\", () => $652b9d23a743e8c2$export$b279dc3e096c808b);\nclass $652b9d23a743e8c2$export$b279dc3e096c808b extends Error {\n  constructor(message) {\n    super(message);\n    Object.setPrototypeOf(this, $652b9d23a743e8c2$export$b279dc3e096c808b.prototype);\n  }\n}\nvar $8d5e30fd5fa02b49$exports = {};\n$parcel$export($8d5e30fd5fa02b49$exports, \"AssertionError\", () => $8d5e30fd5fa02b49$export$7750cdfb4db2c3d);\n$parcel$export($8d5e30fd5fa02b49$exports, \"assert\", () => $8d5e30fd5fa02b49$export$a7a9523472993e97);\nclass $8d5e30fd5fa02b49$export$7750cdfb4db2c3d extends Error {\n  constructor(message) {\n    super(message);\n    Object.setPrototypeOf(this, $8d5e30fd5fa02b49$export$7750cdfb4db2c3d.prototype);\n  }\n}\nfunction $8d5e30fd5fa02b49$export$a7a9523472993e97(test, message = \"Assertion failed.\") {\n  if (!test) throw new $8d5e30fd5fa02b49$export$7750cdfb4db2c3d(message);\n}\nvar $d8b9abe285040e16$exports = {};\nvar $b7fd6731762bdca0$exports = {};\n$parcel$export($b7fd6731762bdca0$exports, \"PrivateKey\", () => $b7fd6731762bdca0$export$8f54525b330fd87b);\nclass $b7fd6731762bdca0$export$8f54525b330fd87b {\n  value;\n  static size = 32;\n  static fromBytes(bytes) {\n    return new $b7fd6731762bdca0$export$8f54525b330fd87b((0, $013cd1e91a5ae572$export$842a2cf37af977e1)((0, $11b8831ba7e63616$export$2a52511e4f35930a)(bytes, \"big\"), (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).n));\n  }\n  static fromHex(hex) {\n    return $b7fd6731762bdca0$export$8f54525b330fd87b.fromBytes((0, $11b8831ba7e63616$export$1a8ceedbd5845648)(hex));\n  }\n  static fromSeed(seed) {\n    const length = 48;\n    const okm = (0, $5758ad345f58e7ac$export$c0375ac2990d2f65)(length, Uint8Array.from([...seed, 0]), new TextEncoder().encode(\"BLS-SIG-KEYGEN-SALT-\"), Uint8Array.from([0, length]));\n    return new $b7fd6731762bdca0$export$8f54525b330fd87b((0, $013cd1e91a5ae572$export$842a2cf37af977e1)((0, $11b8831ba7e63616$export$2a52511e4f35930a)(okm, \"big\"), (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).n));\n  }\n  static fromBigInt(value) {\n    return new $b7fd6731762bdca0$export$8f54525b330fd87b((0, $013cd1e91a5ae572$export$842a2cf37af977e1)(value, (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).n));\n  }\n  static aggregate(privateKeys) {\n    return new $b7fd6731762bdca0$export$8f54525b330fd87b((0, $013cd1e91a5ae572$export$842a2cf37af977e1)(privateKeys.reduce((aggregate, privateKey) => aggregate + privateKey.value, 0n), (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).n));\n  }\n  constructor(value) {\n    this.value = value;\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(value < (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).n);\n  }\n  getG1() {\n    return (0, $f81fe8e548a259fc$export$54579cb87d860a47).generateG1().multiply(this.value);\n  }\n  toBytes() {\n    return (0, $11b8831ba7e63616$export$c0f6630717bc20c7)(this.value, $b7fd6731762bdca0$export$8f54525b330fd87b.size, \"big\");\n  }\n  toHex() {\n    return (0, $11b8831ba7e63616$export$7ea66e3774a60b67)(this.toBytes());\n  }\n  toString() {\n    return `PrivateKey(0x${this.toHex()})`;\n  }\n  equals(value) {\n    return this.value === value.value;\n  }\n}\nvar $46e980308398850e$exports = {};\n$parcel$export($46e980308398850e$exports, \"AugSchemeMPL\", () => $46e980308398850e$export$11fa5fadc101995e);\nclass $46e980308398850e$export$11fa5fadc101995e {\n  static keyGen(seed) {\n    return (0, $6263a241ee4922bd$export$6b169d3865731b08)(seed);\n  }\n  static sign(privateKey, message) {\n    const publicKey = privateKey.getG1();\n    return (0, $e66c6c730aa32243$export$d36c55300691c9bd)(privateKey, Uint8Array.from([...publicKey.toBytes(), ...message]), (0, $5f5e7634db6ec17d$export$5b346028b2eb430c));\n  }\n  static sign_prepend(privateKey, message, prependPublicKey) {\n    return (0, $e66c6c730aa32243$export$d36c55300691c9bd)(privateKey, Uint8Array.from([...prependPublicKey.toBytes(), ...message]), (0, $5f5e7634db6ec17d$export$5b346028b2eb430c));\n  }\n  static verify(publicKey, message, signature) {\n    return (0, $e66c6c730aa32243$export$fa86e59803ac4685)(publicKey, Uint8Array.from([...publicKey.toBytes(), ...message]), signature, (0, $5f5e7634db6ec17d$export$5b346028b2eb430c));\n  }\n  static aggregate(signatures) {\n    return (0, $e66c6c730aa32243$export$58639efa77ac2d9c)(signatures);\n  }\n  static aggregateVerify(publicKeys, messages, signature) {\n    if (publicKeys.length !== messages.length || !publicKeys.length) return false;\n    const mPrimes = [];\n    for (let i = 0; i < publicKeys.length; i++) mPrimes.push(Uint8Array.from([...publicKeys[i].toBytes(), ...messages[i]]));\n    return (0, $e66c6c730aa32243$export$6d85de9d133db9bf)(publicKeys, mPrimes, signature, (0, $5f5e7634db6ec17d$export$5b346028b2eb430c));\n  }\n  static deriveChildSk(privateKey, index) {\n    return (0, $6263a241ee4922bd$export$5db2ff97ac93f09f)(privateKey, index);\n  }\n  static deriveChildSkUnhardened(privateKey, index) {\n    return (0, $6263a241ee4922bd$export$3d98d96efbfaa93e)(privateKey, index);\n  }\n  static deriveChildPkUnhardened(publicKey, index) {\n    return (0, $6263a241ee4922bd$export$5c5df4dc4bd00c4c)(publicKey, index);\n  }\n}\nvar $cbd8901008cf0b7e$exports = {};\n$parcel$export($cbd8901008cf0b7e$exports, \"BasicSchemeMPL\", () => $cbd8901008cf0b7e$export$4eba737f59c212f9);\nclass $cbd8901008cf0b7e$export$4eba737f59c212f9 {\n  static keyGen(seed) {\n    return (0, $6263a241ee4922bd$export$6b169d3865731b08)(seed);\n  }\n  static sign(privateKey, message) {\n    return (0, $e66c6c730aa32243$export$d36c55300691c9bd)(privateKey, message, (0, $5f5e7634db6ec17d$export$c1bffad7aeda544b));\n  }\n  static verify(publicKey, message, signature) {\n    return (0, $e66c6c730aa32243$export$fa86e59803ac4685)(publicKey, message, signature, (0, $5f5e7634db6ec17d$export$c1bffad7aeda544b));\n  }\n  static aggregate(signatures) {\n    return (0, $e66c6c730aa32243$export$58639efa77ac2d9c)(signatures);\n  }\n  static aggregateVerify(publicKeys, messages, signature) {\n    if (publicKeys.length !== messages.length || !publicKeys.length) return false;\n    for (const message of messages) for (const match of messages) {\n      if (message !== match && (0, $11b8831ba7e63616$export$c663ab80cce302c5)(message, match)) return false;\n    }\n    return (0, $e66c6c730aa32243$export$6d85de9d133db9bf)(publicKeys, messages, signature, (0, $5f5e7634db6ec17d$export$c1bffad7aeda544b));\n  }\n  static deriveChildSk(privateKey, index) {\n    return (0, $6263a241ee4922bd$export$5db2ff97ac93f09f)(privateKey, index);\n  }\n  static deriveChildSkUnhardened(privateKey, index) {\n    return (0, $6263a241ee4922bd$export$3d98d96efbfaa93e)(privateKey, index);\n  }\n  static deriveChildPkUnhardened(publicKey, index) {\n    return (0, $6263a241ee4922bd$export$5c5df4dc4bd00c4c)(publicKey, index);\n  }\n}\nvar $c20e836927ce4374$exports = {};\n$parcel$export($c20e836927ce4374$exports, \"PopSchemeMPL\", () => $c20e836927ce4374$export$b768295c529d6107);\nclass $c20e836927ce4374$export$b768295c529d6107 {\n  static keyGen(seed) {\n    return (0, $6263a241ee4922bd$export$6b169d3865731b08)(seed);\n  }\n  static sign(privateKey, message) {\n    return (0, $e66c6c730aa32243$export$d36c55300691c9bd)(privateKey, message, (0, $5f5e7634db6ec17d$export$8d64a5ed43a5a57c));\n  }\n  static verify(publicKey, message, signature) {\n    return (0, $e66c6c730aa32243$export$fa86e59803ac4685)(publicKey, message, signature, (0, $5f5e7634db6ec17d$export$8d64a5ed43a5a57c));\n  }\n  static aggregate(signatures) {\n    return (0, $e66c6c730aa32243$export$58639efa77ac2d9c)(signatures);\n  }\n  static aggregateVerify(publicKeys, messages, signature) {\n    if (publicKeys.length !== messages.length || !publicKeys.length) return false;\n    for (const message of messages) for (const match of messages) {\n      if (message !== match && (0, $11b8831ba7e63616$export$c663ab80cce302c5)(message, match)) return false;\n    }\n    return (0, $e66c6c730aa32243$export$6d85de9d133db9bf)(publicKeys, messages, signature, (0, $5f5e7634db6ec17d$export$8d64a5ed43a5a57c));\n  }\n  static popProve(privateKey) {\n    const publicKey = privateKey.getG1();\n    return (0, $8c194b1bdb7378af$export$74473883de6345ad)(publicKey.toBytes(), (0, $5f5e7634db6ec17d$export$b554d748bc2a5eef)).multiply(privateKey.value);\n  }\n  static popVerify(publicKey, proof) {\n    try {\n      (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(proof.isValid());\n      (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(publicKey.isValid());\n      const q = (0, $8c194b1bdb7378af$export$74473883de6345ad)(publicKey.toBytes(), (0, $5f5e7634db6ec17d$export$b554d748bc2a5eef));\n      const one = (0, $e01fe8766586be5e$export$d12e5c25403eca16).nil.one((0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).q);\n      const pairingResult = (0, $18de921ac0e3bf52$export$18b00e9902a9edab)([publicKey, (0, $f81fe8e548a259fc$export$54579cb87d860a47).generateG1().negate()], [q, proof]);\n      return pairingResult.equals(one);\n    } catch (e) {\n      if (e instanceof (0, $8d5e30fd5fa02b49$export$7750cdfb4db2c3d)) return false;\n      throw e;\n    }\n  }\n  static fastAggregateVerify(publicKeys, message, signature) {\n    if (!publicKeys.length) return false;\n    let aggregate = publicKeys[0];\n    for (const publicKey of publicKeys.slice(1)) aggregate = aggregate.add(publicKey);\n    return (0, $e66c6c730aa32243$export$fa86e59803ac4685)(aggregate, message, signature, (0, $5f5e7634db6ec17d$export$8d64a5ed43a5a57c));\n  }\n  static deriveChildSk(privateKey, index) {\n    return (0, $6263a241ee4922bd$export$5db2ff97ac93f09f)(privateKey, index);\n  }\n  static deriveChildSkUnhardened(privateKey, index) {\n    return (0, $6263a241ee4922bd$export$3d98d96efbfaa93e)(privateKey, index);\n  }\n  static deriveChildPkUnhardened(publicKey, index) {\n    return (0, $6263a241ee4922bd$export$5c5df4dc4bd00c4c)(publicKey, index);\n  }\n}\nvar $11b8831ba7e63616$exports = {};\n$parcel$export($11b8831ba7e63616$exports, \"flip\", () => $11b8831ba7e63616$export$8a83211c878a3f1f);\n$parcel$export($11b8831ba7e63616$exports, \"intBitLength\", () => $11b8831ba7e63616$export$750ad761648c1996);\n$parcel$export($11b8831ba7e63616$exports, \"bigIntBitLength\", () => $11b8831ba7e63616$export$311832b55488d870);\n$parcel$export($11b8831ba7e63616$exports, \"bigIntToBits\", () => $11b8831ba7e63616$export$59537329b9c511e9);\n$parcel$export($11b8831ba7e63616$exports, \"intToBits\", () => $11b8831ba7e63616$export$98328bcdfd55e72d);\n$parcel$export($11b8831ba7e63616$exports, \"intToBytes\", () => $11b8831ba7e63616$export$7f883c9b3dcb5103);\n$parcel$export($11b8831ba7e63616$exports, \"bytesToInt\", () => $11b8831ba7e63616$export$b25202b2d7056da9);\n$parcel$export($11b8831ba7e63616$exports, \"encodeInt\", () => $11b8831ba7e63616$export$28bc1625998ce845);\n$parcel$export($11b8831ba7e63616$exports, \"decodeInt\", () => $11b8831ba7e63616$export$2046d9d5fd83c6e2);\n$parcel$export($11b8831ba7e63616$exports, \"bigIntToBytes\", () => $11b8831ba7e63616$export$c0f6630717bc20c7);\n$parcel$export($11b8831ba7e63616$exports, \"bytesToBigInt\", () => $11b8831ba7e63616$export$2a52511e4f35930a);\n$parcel$export($11b8831ba7e63616$exports, \"encodeBigInt\", () => $11b8831ba7e63616$export$2797dcbce5606dae);\n$parcel$export($11b8831ba7e63616$exports, \"decodeBigInt\", () => $11b8831ba7e63616$export$630067042493230b);\n$parcel$export($11b8831ba7e63616$exports, \"concatBytes\", () => $11b8831ba7e63616$export$287dd7971339c972);\n$parcel$export($11b8831ba7e63616$exports, \"bytesEqual\", () => $11b8831ba7e63616$export$c663ab80cce302c5);\n$parcel$export($11b8831ba7e63616$exports, \"toHex\", () => $11b8831ba7e63616$export$7ea66e3774a60b67);\n$parcel$export($11b8831ba7e63616$exports, \"fromHex\", () => $11b8831ba7e63616$export$1a8ceedbd5845648);\nfunction $11b8831ba7e63616$export$8a83211c878a3f1f(binary) {\n  return binary.replace(/[01]/g, match => match === \"0\" ? \"1\" : \"0\");\n}\nfunction $11b8831ba7e63616$export$750ad761648c1996(value) {\n  return Math.abs(value).toString(2).length;\n}\nfunction $11b8831ba7e63616$export$311832b55488d870(value) {\n  return (value < 0n ? -value : value).toString(2).length;\n}\nfunction $11b8831ba7e63616$export$59537329b9c511e9(i) {\n  if (i < 1n) return [0];\n  const bits = [];\n  while (i !== 0n) {\n    bits.push(Number((0, $013cd1e91a5ae572$export$842a2cf37af977e1)(i, 2n)));\n    i /= 2n;\n  }\n  return bits.reverse();\n}\nfunction $11b8831ba7e63616$export$98328bcdfd55e72d(i) {\n  if (i < 1) return [0];\n  const bits = [];\n  while (i !== 0) {\n    bits.push(Number((0, $013cd1e91a5ae572$export$64b58c5b0372ae95)(i, 2)));\n    i /= 2;\n  }\n  return bits.reverse();\n}\nfunction $11b8831ba7e63616$export$7f883c9b3dcb5103(value, size, endian, signed = false) {\n  if (value < 0 && !signed) throw new Error(\"Cannot convert negative number to unsigned.\");\n  if (Math.floor(value) !== value) throw new Error(\"Cannot convert floating point number.\");\n  let binary = Math.abs(value).toString(2).padStart(size * 8, \"0\");\n  if (value < 0) binary = (parseInt($11b8831ba7e63616$export$8a83211c878a3f1f(binary), 2) + 1).toString(2).padStart(size * 8, \"0\");\n  var bytes = binary.match(/[01]{8}/g).map(match => parseInt(match, 2));\n  if (endian === \"little\") bytes.reverse();\n  return Uint8Array.from(bytes);\n}\nfunction $11b8831ba7e63616$export$b25202b2d7056da9(bytes, endian, signed = false) {\n  if (bytes.length === 0) return 0;\n  const sign = bytes[endian === \"little\" ? bytes.length - 1 : 0].toString(2).padStart(8, \"0\")[0];\n  const byteList = endian === \"little\" ? bytes.reverse() : bytes;\n  let binary = \"\";\n  for (const byte of byteList) binary += byte.toString(2).padStart(8, \"0\");\n  if (sign === \"1\" && signed) binary = (parseInt($11b8831ba7e63616$export$8a83211c878a3f1f(binary), 2) + 1).toString(2).padStart(bytes.length * 8, \"0\");\n  const result = parseInt(binary, 2);\n  return sign === \"1\" && signed ? -result : result;\n}\nfunction $11b8831ba7e63616$export$28bc1625998ce845(value) {\n  if (value === 0) return Uint8Array.from([]);\n  const length = $11b8831ba7e63616$export$750ad761648c1996(value) + 8 >> 3;\n  let bytes = $11b8831ba7e63616$export$7f883c9b3dcb5103(value, length, \"big\", true);\n  while (bytes.length > 1 && bytes[0] === ((bytes[1] & 0x80) !== 0 ? 0xff : 0)) bytes = bytes.slice(1);\n  return bytes;\n}\nfunction $11b8831ba7e63616$export$2046d9d5fd83c6e2(bytes) {\n  return $11b8831ba7e63616$export$b25202b2d7056da9(bytes, \"big\", true);\n}\nfunction $11b8831ba7e63616$export$c0f6630717bc20c7(value, size, endian, signed = false) {\n  if (value < 0n && !signed) throw new Error(\"Cannot convert negative number to unsigned.\");\n  let binary = (value < 0n ? -value : value).toString(2).padStart(size * 8, \"0\");\n  if (value < 0) binary = (BigInt(\"0b\" + $11b8831ba7e63616$export$8a83211c878a3f1f(binary)) + 1n).toString(2).padStart(size * 8, \"0\");\n  var bytes = binary.match(/[01]{8}/g).map(match => parseInt(match, 2));\n  if (endian === \"little\") bytes.reverse();\n  return Uint8Array.from(bytes);\n}\nfunction $11b8831ba7e63616$export$2a52511e4f35930a(bytes, endian, signed = false) {\n  if (bytes.length === 0) return 0n;\n  const sign = bytes[endian === \"little\" ? bytes.length - 1 : 0].toString(2).padStart(8, \"0\")[0];\n  const byteList = endian === \"little\" ? bytes.reverse() : bytes;\n  let binary = \"\";\n  for (const byte of byteList) binary += byte.toString(2).padStart(8, \"0\");\n  if (sign === \"1\" && signed) binary = (BigInt(\"0b\" + $11b8831ba7e63616$export$8a83211c878a3f1f(binary)) + 1n).toString(2).padStart(bytes.length * 8, \"0\");\n  const result = BigInt(\"0b\" + binary);\n  return sign === \"1\" && signed ? -result : result;\n}\nfunction $11b8831ba7e63616$export$2797dcbce5606dae(value) {\n  if (value === 0n) return Uint8Array.from([]);\n  const length = $11b8831ba7e63616$export$311832b55488d870(value) + 8 >> 3;\n  let bytes = $11b8831ba7e63616$export$c0f6630717bc20c7(value, length, \"big\", true);\n  while (bytes.length > 1 && bytes[0] === ((bytes[1] & 0x80) !== 0 ? 0xff : 0)) bytes = bytes.slice(1);\n  return bytes;\n}\nfunction $11b8831ba7e63616$export$630067042493230b(bytes) {\n  return $11b8831ba7e63616$export$2a52511e4f35930a(bytes, \"big\", true);\n}\nfunction $11b8831ba7e63616$export$287dd7971339c972(...lists) {\n  const bytes = [];\n  for (const list of lists) for (const byte of list) bytes.push(byte);\n  return Uint8Array.from(bytes);\n}\nfunction $11b8831ba7e63616$export$c663ab80cce302c5(a, b) {\n  return a.length === b.length && a.findIndex((byte, i) => b[i] !== byte) === -1;\n}\nconst $11b8831ba7e63616$var$HEX_STRINGS = \"0123456789abcdef\";\nconst $11b8831ba7e63616$var$MAP_HEX = {\n  \"0\": 0,\n  \"1\": 1,\n  \"2\": 2,\n  \"3\": 3,\n  \"4\": 4,\n  \"5\": 5,\n  \"6\": 6,\n  \"7\": 7,\n  \"8\": 8,\n  \"9\": 9,\n  a: 10,\n  b: 11,\n  c: 12,\n  d: 13,\n  e: 14,\n  f: 15,\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15\n};\nfunction $11b8831ba7e63616$export$7ea66e3774a60b67(bytes) {\n  return Array.from(bytes).map(b => $11b8831ba7e63616$var$HEX_STRINGS[b >> 4] + $11b8831ba7e63616$var$HEX_STRINGS[b & 15]).join(\"\");\n}\nfunction $11b8831ba7e63616$export$1a8ceedbd5845648(hex) {\n  const bytes = new Uint8Array(Math.floor(hex.length / 2));\n  let i;\n  for (i = 0; i < bytes.length; i++) {\n    const a = $11b8831ba7e63616$var$MAP_HEX[hex[i * 2]];\n    const b = $11b8831ba7e63616$var$MAP_HEX[hex[i * 2 + 1]];\n    if (a === undefined || b === undefined) break;\n    bytes[i] = a << 4 | b;\n  }\n  return i === bytes.length ? bytes : bytes.slice(0, i);\n}\nvar $27314bc03f74868b$exports = {};\n$parcel$export($27314bc03f74868b$exports, \"yForX\", () => $27314bc03f74868b$export$c28dd39fe7cf1942);\n$parcel$export($27314bc03f74868b$exports, \"scalarMultJacobian\", () => $27314bc03f74868b$export$6fc8005fc3e0ffe8);\n$parcel$export($27314bc03f74868b$exports, \"evalIso\", () => $27314bc03f74868b$export$27808dd10edd4c0f);\n$parcel$export($27314bc03f74868b$exports, \"signFq\", () => $27314bc03f74868b$export$42e585c8f08aa7c5);\n$parcel$export($27314bc03f74868b$exports, \"signFq2\", () => $27314bc03f74868b$export$1f050984502bf9f6);\nfunction $27314bc03f74868b$export$c28dd39fe7cf1942(x, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n  const u = x.multiply(x).multiply(x).add(ec.a.multiply(x)).add(ec.b);\n  const y = u.modSqrt();\n  if (y.equals(0n) || !new (0, $4508fd1f2dfd87e3$export$567266b06c239d21)(x, y, false, ec).isOnCurve()) throw new Error(\"No y for point x.\");\n  return y;\n}\nfunction $27314bc03f74868b$export$6fc8005fc3e0ffe8(value, point, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n  if (value instanceof (0, $61122e18a0bc5a58$export$312db8bf004879ae)) value = value.value;\n  let result = new (0, $f81fe8e548a259fc$export$54579cb87d860a47)(point.x.one(ec.q), point.x.one(ec.q), point.x.zero(ec.q), true, ec);\n  if (point.isInfinity || (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(value, ec.q) === 0n) return result;\n  let addend = point;\n  while (value > 0n) {\n    if (value & 1n) result = result.add(addend);\n    addend = addend.add(addend);\n    value >>= 1n;\n  }\n  return result;\n}\nfunction $27314bc03f74868b$export$27808dd10edd4c0f(P, mapCoeffs, ec) {\n  const {\n    x: x,\n    y: y,\n    z: z\n  } = P;\n  const mapValues = [null, null, null, null];\n  let maxOrd = mapCoeffs[0].length;\n  for (const coeffs of mapCoeffs.slice(1)) maxOrd = Math.max(maxOrd, coeffs.length);\n  const zPows = [];\n  for (let i = 0; i < maxOrd; i++) zPows.push(null);\n  zPows[0] = z.pow(0n);\n  zPows[1] = z.pow(2n);\n  for (let i = 2; i < zPows.length; i++) {\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(zPows[i - 1] !== null);\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(zPows[1] !== null);\n    zPows[i] = zPows[i - 1]?.multiply(zPows[1]);\n  }\n  for (const [i, item] of mapCoeffs.entries()) {\n    const coeffsZ = item.slice().reverse().map((item, i) => item.multiply(zPows[i]));\n    let temp = coeffsZ[0];\n    for (const coeff of coeffsZ.slice(1)) {\n      temp = temp.multiply(x);\n      temp = temp.add(coeff);\n    }\n    mapValues[i] = temp;\n  }\n  (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(mapCoeffs[1].length + 1 === mapCoeffs[0].length);\n  (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(zPows[1] !== null);\n  (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(mapValues[1] !== null);\n  mapValues[1] = mapValues[1]?.multiply(zPows[1]);\n  (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(mapValues[2] !== null);\n  (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(mapValues[3] !== null);\n  mapValues[2] = mapValues[2].multiply(y);\n  mapValues[3] = mapValues[3].multiply(z.pow(3n));\n  const Z = mapValues[1].multiply(mapValues[3]);\n  const X = mapValues[0].multiply(mapValues[3]).multiply(Z);\n  const Y = mapValues[2].multiply(mapValues[1]).multiply(Z).multiply(Z);\n  return new (0, $f81fe8e548a259fc$export$54579cb87d860a47)(X, Y, Z, P.isInfinity, ec);\n}\nfunction $27314bc03f74868b$export$42e585c8f08aa7c5(element, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n  return element.gt(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(ec.q, (ec.q - 1n) / 2n));\n}\nfunction $27314bc03f74868b$export$1f050984502bf9f6(element, ec = (0, $00e9cfcde39d0b4a$export$89bff894721071da)) {\n  if (element.elements[1].equals(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(ec.q, 0n))) return $27314bc03f74868b$export$42e585c8f08aa7c5(element.elements[0]);\n  return element.elements[1].gt(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(ec.q, (ec.q - 1n) / 2n));\n}\nvar $ee571e8a973337ec$exports = {};\n$parcel$export($ee571e8a973337ec$exports, \"I2OSP\", () => $ee571e8a973337ec$export$d52448d6be44c59a);\n$parcel$export($ee571e8a973337ec$exports, \"OS2IP\", () => $ee571e8a973337ec$export$c0271fff4884589f);\n$parcel$export($ee571e8a973337ec$exports, \"bytesXor\", () => $ee571e8a973337ec$export$af8f3b1836f17aeb);\n$parcel$export($ee571e8a973337ec$exports, \"expandMessageXmd\", () => $ee571e8a973337ec$export$ca94752eccc89d42);\n$parcel$export($ee571e8a973337ec$exports, \"expandMessageXof\", () => $ee571e8a973337ec$export$153ad90a5a904109);\n$parcel$export($ee571e8a973337ec$exports, \"hashToField\", () => $ee571e8a973337ec$export$a95bd8ce7381acba);\n$parcel$export($ee571e8a973337ec$exports, \"Hp\", () => $ee571e8a973337ec$export$d6b81f59cdb268dc);\n$parcel$export($ee571e8a973337ec$exports, \"Hp2\", () => $ee571e8a973337ec$export$55a2cd7ad104d927);\nfunction $ee571e8a973337ec$export$d52448d6be44c59a(value, length) {\n  if (value < 0n || value >= 1n << 8n * BigInt(length)) throw new Error(`Bad I2OSP call: value=${value}, length=${length}.`);\n  const bytes = [];\n  for (let i = 0; i < length; i++) bytes.push(0);\n  let tempValue = value;\n  for (let i = length - 1; i >= 0; i--) {\n    bytes[i] = Number(tempValue & 0xffn);\n    tempValue >>= 8n;\n  }\n  const result = Uint8Array.from(bytes);\n  const toBytesValue = (0, $11b8831ba7e63616$export$c0f6630717bc20c7)(value, length, \"big\");\n  (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)((0, $11b8831ba7e63616$export$c663ab80cce302c5)(result, toBytesValue));\n  return result;\n}\nfunction $ee571e8a973337ec$export$c0271fff4884589f(octets) {\n  let result = 0n;\n  for (const octet of octets) {\n    result <<= 8n;\n    result += BigInt(octet);\n  }\n  (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(result === (0, $11b8831ba7e63616$export$2a52511e4f35930a)(octets, \"big\"));\n  return result;\n}\nfunction $ee571e8a973337ec$export$af8f3b1836f17aeb(a, b) {\n  return Uint8Array.from(a.map((element, i) => element ^ b[i]));\n}\nfunction $ee571e8a973337ec$export$ca94752eccc89d42(message, dst, length, hash) {\n  const ell = Math.trunc((length + hash.byteSize - 1) / hash.byteSize);\n  if (ell > 255) throw new Error(`Bad expandMessageXmd call: ell=${ell} out of range.`);\n  const dst_prime = [...dst, ...$ee571e8a973337ec$export$d52448d6be44c59a(BigInt(dst.length), 1)];\n  const Z_pad = $ee571e8a973337ec$export$d52448d6be44c59a(0n, hash.blockSize);\n  const lib_str = $ee571e8a973337ec$export$d52448d6be44c59a(BigInt(length), 2);\n  const b_0 = hash.convert(Uint8Array.from([...Z_pad, ...message, ...lib_str, ...$ee571e8a973337ec$export$d52448d6be44c59a(0n, 1), ...dst_prime]));\n  const bValues = [];\n  bValues.push(hash.convert(Uint8Array.from([...b_0, ...$ee571e8a973337ec$export$d52448d6be44c59a(1n, 1), ...dst_prime])));\n  for (let i = 1; i <= ell; i++) bValues.push(hash.convert(Uint8Array.from([...$ee571e8a973337ec$export$af8f3b1836f17aeb(b_0, bValues[i - 1]), ...$ee571e8a973337ec$export$d52448d6be44c59a(BigInt(i + 1), 1), ...dst_prime])));\n  const pseudoRandomBytes = [];\n  for (const item of bValues) pseudoRandomBytes.push(...item);\n  return Uint8Array.from(pseudoRandomBytes.slice(0, length));\n}\nfunction $ee571e8a973337ec$export$153ad90a5a904109(message, dst, length, hash) {\n  const dst_prime = [...dst, ...$ee571e8a973337ec$export$d52448d6be44c59a(BigInt(dst.length), 1)];\n  const message_prime = [...message, ...$ee571e8a973337ec$export$d52448d6be44c59a(BigInt(length), 2), ...dst_prime];\n  return hash.convert(Uint8Array.from(message_prime)).slice(0, length);\n}\nfunction $ee571e8a973337ec$export$a95bd8ce7381acba(message, count, dst, modulus, degree, byteLength, expand, hash) {\n  const lengthInBytes = count * degree * byteLength;\n  const pseudoRandomBytes = expand(message, dst, lengthInBytes, hash);\n  const uValues = [];\n  for (let i = 0; i < count; i++) {\n    const eValues = [];\n    for (let j = 0; j < degree; j++) {\n      const elmOffset = byteLength * (j + i * degree);\n      const tv = pseudoRandomBytes.slice(elmOffset, elmOffset + byteLength);\n      eValues.push((0, $013cd1e91a5ae572$export$842a2cf37af977e1)($ee571e8a973337ec$export$c0271fff4884589f(tv), modulus));\n    }\n    uValues.push(eValues);\n  }\n  return uValues;\n}\nfunction $ee571e8a973337ec$export$d6b81f59cdb268dc(message, count, dst) {\n  return $ee571e8a973337ec$export$a95bd8ce7381acba(message, count, dst, (0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 1, 64, $ee571e8a973337ec$export$ca94752eccc89d42, (0, $1d6ac6ce37d39979$export$bced8d2aada2d1c9));\n}\nfunction $ee571e8a973337ec$export$55a2cd7ad104d927(message, count, dst) {\n  return $ee571e8a973337ec$export$a95bd8ce7381acba(message, count, dst, (0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 2, 64, $ee571e8a973337ec$export$ca94752eccc89d42, (0, $1d6ac6ce37d39979$export$bced8d2aada2d1c9));\n}\nvar $6263a241ee4922bd$exports = {};\n$parcel$export($6263a241ee4922bd$exports, \"keyGen\", () => $6263a241ee4922bd$export$6b169d3865731b08);\n$parcel$export($6263a241ee4922bd$exports, \"ikmToLamportSk\", () => $6263a241ee4922bd$export$9b45cf77d8dc3a4c);\n$parcel$export($6263a241ee4922bd$exports, \"parentSkToLamportPk\", () => $6263a241ee4922bd$export$fd05bc46191446d1);\n$parcel$export($6263a241ee4922bd$exports, \"deriveChildSk\", () => $6263a241ee4922bd$export$5db2ff97ac93f09f);\n$parcel$export($6263a241ee4922bd$exports, \"deriveChildSkUnhardened\", () => $6263a241ee4922bd$export$3d98d96efbfaa93e);\n$parcel$export($6263a241ee4922bd$exports, \"deriveChildG1Unhardened\", () => $6263a241ee4922bd$export$5c5df4dc4bd00c4c);\n$parcel$export($6263a241ee4922bd$exports, \"deriveChildG2Unhardened\", () => $6263a241ee4922bd$export$5bdc4123f9cc0693);\nfunction $6263a241ee4922bd$export$6b169d3865731b08(seed) {\n  const length = 48;\n  const okm = (0, $5758ad345f58e7ac$export$c0375ac2990d2f65)(length, Uint8Array.from([...seed, 0]), new TextEncoder().encode(\"BLS-SIG-KEYGEN-SALT-\"), Uint8Array.from([0, length]));\n  return new (0, $b7fd6731762bdca0$export$8f54525b330fd87b)((0, $013cd1e91a5ae572$export$842a2cf37af977e1)((0, $11b8831ba7e63616$export$2a52511e4f35930a)(okm, \"big\"), (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).n));\n}\nfunction $6263a241ee4922bd$export$9b45cf77d8dc3a4c(ikm, salt) {\n  return (0, $5758ad345f58e7ac$export$c0375ac2990d2f65)(8160, ikm, salt, Uint8Array.from([]));\n}\nfunction $6263a241ee4922bd$export$fd05bc46191446d1(parentSk, index) {\n  const salt = (0, $11b8831ba7e63616$export$7f883c9b3dcb5103)(index, 4, \"big\");\n  const ikm = parentSk.toBytes();\n  const notIkm = Uint8Array.from(ikm.map(e => e ^ 0xff));\n  const lamport0 = $6263a241ee4922bd$export$9b45cf77d8dc3a4c(ikm, salt);\n  const lamport1 = $6263a241ee4922bd$export$9b45cf77d8dc3a4c(notIkm, salt);\n  const lamportPk = [];\n  for (let i = 0; i < 255; i++) lamportPk.push(...(0, $20b42468fafd22ce$export$699b481075cb9e0d)(lamport0.slice(i * 32, (i + 1) * 32)));\n  for (let i = 0; i < 255; i++) lamportPk.push(...(0, $20b42468fafd22ce$export$699b481075cb9e0d)(lamport1.slice(i * 32, (i + 1) * 32)));\n  return (0, $20b42468fafd22ce$export$699b481075cb9e0d)(Uint8Array.from(lamportPk));\n}\nfunction $6263a241ee4922bd$export$5db2ff97ac93f09f(parentSk, index) {\n  return $6263a241ee4922bd$export$6b169d3865731b08($6263a241ee4922bd$export$fd05bc46191446d1(parentSk, index));\n}\nfunction $6263a241ee4922bd$export$3d98d96efbfaa93e(parentSk, index) {\n  const hash = (0, $20b42468fafd22ce$export$699b481075cb9e0d)(Uint8Array.from([...parentSk.getG1().toBytes(), ...(0, $11b8831ba7e63616$export$7f883c9b3dcb5103)(index, 4, \"big\")]));\n  return (0, $b7fd6731762bdca0$export$8f54525b330fd87b).aggregate([(0, $b7fd6731762bdca0$export$8f54525b330fd87b).fromBytes(hash), parentSk]);\n}\nfunction $6263a241ee4922bd$export$5c5df4dc4bd00c4c(parentPk, index) {\n  const hash = (0, $20b42468fafd22ce$export$699b481075cb9e0d)(Uint8Array.from([...parentPk.toBytes(), ...(0, $11b8831ba7e63616$export$7f883c9b3dcb5103)(index, 4, \"big\")]));\n  return parentPk.add((0, $f81fe8e548a259fc$export$54579cb87d860a47).generateG1().multiply((0, $b7fd6731762bdca0$export$8f54525b330fd87b).fromBytes(hash).value));\n}\nfunction $6263a241ee4922bd$export$5bdc4123f9cc0693(parentPk, index) {\n  const hash = (0, $20b42468fafd22ce$export$699b481075cb9e0d)(Uint8Array.from([...parentPk.toBytes(), ...(0, $11b8831ba7e63616$export$7f883c9b3dcb5103)(index, 4, \"big\")]));\n  return parentPk.add((0, $f81fe8e548a259fc$export$54579cb87d860a47).generateG2().multiply((0, $b7fd6731762bdca0$export$8f54525b330fd87b).fromBytes(hash).value));\n}\nvar $5758ad345f58e7ac$exports = {};\n$parcel$export($5758ad345f58e7ac$exports, \"blockSize\", () => $5758ad345f58e7ac$export$446963a0ea44fb9d);\n$parcel$export($5758ad345f58e7ac$exports, \"extract\", () => $5758ad345f58e7ac$export$f9380c9a627682d3);\n$parcel$export($5758ad345f58e7ac$exports, \"expand\", () => $5758ad345f58e7ac$export$9f77e0932fb78f72);\n$parcel$export($5758ad345f58e7ac$exports, \"extractExpand\", () => $5758ad345f58e7ac$export$c0375ac2990d2f65);\nconst $5758ad345f58e7ac$export$446963a0ea44fb9d = 32;\nfunction $5758ad345f58e7ac$export$f9380c9a627682d3(salt, ikm) {\n  const hash = new (0, $parcel$interopDefault($fpZC2$jssha))(\"SHA-256\", \"UINT8ARRAY\", {\n    hmacKey: {\n      format: \"UINT8ARRAY\",\n      value: salt\n    }\n  });\n  hash.update(ikm);\n  return hash.getHash(\"UINT8ARRAY\");\n}\nfunction $5758ad345f58e7ac$export$9f77e0932fb78f72(length, prk, info) {\n  const blocks = Math.ceil(length / $5758ad345f58e7ac$export$446963a0ea44fb9d);\n  let bytesWritten = 0;\n  const okm = [];\n  let temp = Uint8Array.from([]);\n  for (let i = 1; i <= blocks; i++) {\n    temp = $5758ad345f58e7ac$export$f9380c9a627682d3(prk, Uint8Array.from(i === 1 ? [...info, 1] : [...temp, ...info, i]));\n    let toWrite = length - bytesWritten;\n    if (toWrite > $5758ad345f58e7ac$export$446963a0ea44fb9d) toWrite = $5758ad345f58e7ac$export$446963a0ea44fb9d;\n    okm.push(...temp.slice(0, toWrite));\n    bytesWritten += toWrite;\n  }\n  (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(bytesWritten === length);\n  return Uint8Array.from(okm);\n}\nfunction $5758ad345f58e7ac$export$c0375ac2990d2f65(length, key, salt, info) {\n  return $5758ad345f58e7ac$export$9f77e0932fb78f72(length, $5758ad345f58e7ac$export$f9380c9a627682d3(salt, key), info);\n}\nvar $20b42468fafd22ce$exports = {};\n$parcel$export($20b42468fafd22ce$exports, \"hmacBlockSize\", () => $20b42468fafd22ce$export$94a325ed6d836b5e);\n$parcel$export($20b42468fafd22ce$exports, \"hash256\", () => $20b42468fafd22ce$export$699b481075cb9e0d);\n$parcel$export($20b42468fafd22ce$exports, \"hash512\", () => $20b42468fafd22ce$export$cc147b8bd27974ac);\n$parcel$export($20b42468fafd22ce$exports, \"hmac256\", () => $20b42468fafd22ce$export$e10eb67e19628714);\nconst $20b42468fafd22ce$export$94a325ed6d836b5e = 64;\nfunction $20b42468fafd22ce$export$699b481075cb9e0d(message) {\n  const hash = new (0, $parcel$interopDefault($fpZC2$jssha))(\"SHA-256\", \"UINT8ARRAY\");\n  hash.update(message);\n  return hash.getHash(\"UINT8ARRAY\");\n}\nfunction $20b42468fafd22ce$export$cc147b8bd27974ac(message) {\n  return Uint8Array.from([...$20b42468fafd22ce$export$699b481075cb9e0d(Uint8Array.from([...message, 0])), ...$20b42468fafd22ce$export$699b481075cb9e0d(Uint8Array.from([...message, 1]))]);\n}\nfunction $20b42468fafd22ce$export$e10eb67e19628714(message, k) {\n  if (k.length > $20b42468fafd22ce$export$94a325ed6d836b5e) k = $20b42468fafd22ce$export$699b481075cb9e0d(k);\n  while (k.length < $20b42468fafd22ce$export$94a325ed6d836b5e) k = Uint8Array.from([...k, 0]);\n  const kopad = [];\n  for (let i = 0; i < $20b42468fafd22ce$export$94a325ed6d836b5e; i++) kopad.push(k[i] ^ 0x5c);\n  const kipad = [];\n  for (let i = 0; i < $20b42468fafd22ce$export$94a325ed6d836b5e; i++) kipad.push(k[i] ^ 0x36);\n  return $20b42468fafd22ce$export$699b481075cb9e0d(Uint8Array.from([...kopad, ...$20b42468fafd22ce$export$699b481075cb9e0d(Uint8Array.from([...kipad, ...message]))]));\n}\nvar $013cd1e91a5ae572$exports = {};\n$parcel$export($013cd1e91a5ae572$exports, \"modPow\", () => $013cd1e91a5ae572$export$9747a4fa913461f);\n$parcel$export($013cd1e91a5ae572$exports, \"mod\", () => $013cd1e91a5ae572$export$842a2cf37af977e1);\n$parcel$export($013cd1e91a5ae572$exports, \"modNumber\", () => $013cd1e91a5ae572$export$64b58c5b0372ae95);\nfunction $013cd1e91a5ae572$export$9747a4fa913461f(base, exponent, modulo) {\n  if (exponent < 1n) return 1n;else if (base < 0n || base > modulo) base = $013cd1e91a5ae572$export$842a2cf37af977e1(base, modulo);\n  let result = 1n;\n  while (exponent > 0n) {\n    if ((exponent & 1n) > 0n) result = $013cd1e91a5ae572$export$842a2cf37af977e1(result * base, modulo);\n    exponent >>= 1n;\n    base = $013cd1e91a5ae572$export$842a2cf37af977e1(base * base, modulo);\n  }\n  return result;\n}\nfunction $013cd1e91a5ae572$export$842a2cf37af977e1(value, modulus) {\n  return (value % modulus + modulus) % modulus;\n}\nfunction $013cd1e91a5ae572$export$64b58c5b0372ae95(value, modulus) {\n  return (value % modulus + modulus) % modulus;\n}\nvar $8c194b1bdb7378af$exports = {};\n$parcel$export($8c194b1bdb7378af$exports, \"sgn0\", () => $8c194b1bdb7378af$export$457bc114f3b6be45);\n$parcel$export($8c194b1bdb7378af$exports, \"osswu2Help\", () => $8c194b1bdb7378af$export$dfee9190546f1d4a);\n$parcel$export($8c194b1bdb7378af$exports, \"iso3\", () => $8c194b1bdb7378af$export$e784642ec1e5cf56);\n$parcel$export($8c194b1bdb7378af$exports, \"optSwu2Map\", () => $8c194b1bdb7378af$export$ee5c28ad16e024d8);\n$parcel$export($8c194b1bdb7378af$exports, \"g2Map\", () => $8c194b1bdb7378af$export$74473883de6345ad);\nfunction $8c194b1bdb7378af$export$457bc114f3b6be45(x) {\n  const sign0 = (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(x.elements[0].value, 2n) === 1n;\n  const zero0 = x.elements[0].value === 0n;\n  const sign1 = (0, $013cd1e91a5ae572$export$842a2cf37af977e1)(x.elements[1].value, 2n) === 1n;\n  return sign0 || zero0 && sign1 ? 1n : 0n;\n}\nfunction $8c194b1bdb7378af$export$dfee9190546f1d4a(t) {\n  const numDenCommon = (0, $7114a315a435248d$export$8d1968de8a0388cb).pow(2n).multiply(t.pow(4n)).add((0, $7114a315a435248d$export$8d1968de8a0388cb).multiply(t.pow(2n)));\n  const x0_num = (0, $7114a315a435248d$export$a49b3bf2a8f9ece3).multiply(numDenCommon.add(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), 1n)));\n  let x0_den = (0, $7114a315a435248d$export$cb23cd3dd580e72c).negate().multiply(numDenCommon);\n  x0_den = x0_den.equals(0n) ? (0, $7114a315a435248d$export$cb23cd3dd580e72c).multiply((0, $7114a315a435248d$export$8d1968de8a0388cb)) : x0_den;\n  const gx0_den = x0_den.pow(3n);\n  const gx0_num = (0, $7114a315a435248d$export$a49b3bf2a8f9ece3).multiply(gx0_den).add((0, $7114a315a435248d$export$cb23cd3dd580e72c).multiply(x0_num).multiply(x0_den.pow(2n))).add(x0_num.pow(3n));\n  let temp1 = gx0_den.pow(7n);\n  const temp2 = gx0_num.multiply(temp1);\n  temp1 = temp1.multiply(temp2).multiply(gx0_den);\n  let sqrtCandidate = temp2.multiply(temp1.pow(((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162) ** 2n - 9n) / 16n));\n  for (const root of (0, $45c5a0c79e0736cc$export$5e60bb11dae8e64b)) {\n    let y0 = sqrtCandidate.multiply(root);\n    if (y0.pow(2n).multiply(gx0_den).equals(gx0_num)) {\n      if ($8c194b1bdb7378af$export$457bc114f3b6be45(y0) !== $8c194b1bdb7378af$export$457bc114f3b6be45(t)) y0 = y0.negate();\n      (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)($8c194b1bdb7378af$export$457bc114f3b6be45(y0) === $8c194b1bdb7378af$export$457bc114f3b6be45(t));\n      return new (0, $f81fe8e548a259fc$export$54579cb87d860a47)(x0_num.multiply(x0_den), y0.multiply(x0_den.pow(3n)), x0_den, false, (0, $00e9cfcde39d0b4a$export$89bff894721071da));\n    }\n  }\n  const x1_num = (0, $7114a315a435248d$export$8d1968de8a0388cb).multiply(t.pow(2n)).multiply(x0_num);\n  const x1_den = x0_den;\n  const gx1_num = (0, $7114a315a435248d$export$8d1968de8a0388cb).pow(3n).multiply(t.pow(6n)).multiply(gx0_num);\n  const gx1_den = gx0_den;\n  sqrtCandidate = sqrtCandidate.multiply(t.pow(3n));\n  for (const eta of (0, $7114a315a435248d$export$dfed87f2d11110f4)) {\n    let y1 = eta.multiply(sqrtCandidate);\n    if (y1.pow(2n).multiply(gx1_den).equals(gx1_num)) {\n      if ($8c194b1bdb7378af$export$457bc114f3b6be45(y1) !== $8c194b1bdb7378af$export$457bc114f3b6be45(t)) y1 = y1.negate();\n      (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)($8c194b1bdb7378af$export$457bc114f3b6be45(y1) === $8c194b1bdb7378af$export$457bc114f3b6be45(t));\n      return new (0, $f81fe8e548a259fc$export$54579cb87d860a47)(x1_num.multiply(x1_den), y1.multiply(x1_den.pow(3n)), x1_den, false, (0, $00e9cfcde39d0b4a$export$89bff894721071da));\n    }\n  }\n  throw new Error(\"Bad osswu2Help.\");\n}\nfunction $8c194b1bdb7378af$export$e784642ec1e5cf56(P) {\n  return (0, $27314bc03f74868b$export$27808dd10edd4c0f)(P, [(0, $8856e63c79a7a18e$export$4c6c1dafe316d2c), (0, $8856e63c79a7a18e$export$732ae2b2551ff413), (0, $8856e63c79a7a18e$export$ea2765eb3fc09cbc), (0, $8856e63c79a7a18e$export$54826405639b5799)], (0, $00e9cfcde39d0b4a$export$89bff894721071da));\n}\nfunction $8c194b1bdb7378af$export$ee5c28ad16e024d8(t, t2) {\n  let Pp = $8c194b1bdb7378af$export$e784642ec1e5cf56($8c194b1bdb7378af$export$dfee9190546f1d4a(t));\n  if (t2) {\n    const Pp2 = $8c194b1bdb7378af$export$e784642ec1e5cf56($8c194b1bdb7378af$export$dfee9190546f1d4a(t2));\n    Pp = Pp.add(Pp2);\n  }\n  return Pp.multiply((0, $00e9cfcde39d0b4a$export$41b7b4fef7f76fa9));\n}\nfunction $8c194b1bdb7378af$export$74473883de6345ad(alpha, dst) {\n  const elements = (0, $ee571e8a973337ec$export$55a2cd7ad104d927)(alpha, 2, dst).map(hh => {\n    const items = hh.map(value => new (0, $61122e18a0bc5a58$export$312db8bf004879ae)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), value));\n    return new (0, $ee4c81c840b9d78d$export$3250f1bd1b840331)((0, $00e9cfcde39d0b4a$export$9e5f44173e64f162), items[0], items[1]);\n  });\n  return $8c194b1bdb7378af$export$ee5c28ad16e024d8(elements[0], elements[1]);\n}\nvar $18de921ac0e3bf52$exports = {};\n$parcel$export($18de921ac0e3bf52$exports, \"doubleLineEval\", () => $18de921ac0e3bf52$export$c11f3970c3ad259);\n$parcel$export($18de921ac0e3bf52$exports, \"addLineEval\", () => $18de921ac0e3bf52$export$bd894c1853ea7ce9);\n$parcel$export($18de921ac0e3bf52$exports, \"millerLoop\", () => $18de921ac0e3bf52$export$d2495f48e21d1b97);\n$parcel$export($18de921ac0e3bf52$exports, \"finalExponentiation\", () => $18de921ac0e3bf52$export$d2180c627b521e81);\n$parcel$export($18de921ac0e3bf52$exports, \"atePairing\", () => $18de921ac0e3bf52$export$740729f8e739fd84);\n$parcel$export($18de921ac0e3bf52$exports, \"atePairingMulti\", () => $18de921ac0e3bf52$export$18b00e9902a9edab);\nfunction $18de921ac0e3bf52$export$c11f3970c3ad259(R, P, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n  const R12 = R.untwist();\n  const slope = new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(ec.q, 3n).multiply(R12.x.pow(2n).add(ec.a)).divide(R12.y.multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(ec.q, 2n)));\n  const v = R12.y.subtract(R12.x.multiply(slope));\n  return P.y.subtract(P.x.multiply(slope)).subtract(v);\n}\nfunction $18de921ac0e3bf52$export$bd894c1853ea7ce9(R, Q, P) {\n  const R12 = R.untwist();\n  const Q12 = Q.untwist();\n  if (R12.equals(Q12.negate())) return P.x.subtract(R12.x);\n  const slope = Q12.y.subtract(R12.y).divide(Q12.x.subtract(R12.x));\n  const v = Q12.y.multiply(R12.x).subtract(R12.y.multiply(Q12.x)).divide(R12.x.subtract(Q12.x));\n  return P.y.subtract(P.x.multiply(slope)).subtract(v);\n}\nfunction $18de921ac0e3bf52$export$d2495f48e21d1b97(T, P, Q, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n  const T_bits = (0, $11b8831ba7e63616$export$59537329b9c511e9)(T);\n  let R = Q;\n  let f = (0, $e01fe8766586be5e$export$d12e5c25403eca16).nil.one(ec.q);\n  for (let i = 1; i < T_bits.length; i++) {\n    const lrr = $18de921ac0e3bf52$export$c11f3970c3ad259(R, P, ec);\n    f = f.multiply(f).multiply(lrr);\n    R = R.multiply(new (0, $61122e18a0bc5a58$export$312db8bf004879ae)(ec.q, 2n));\n    if (T_bits[i] === 1) {\n      const lrq = $18de921ac0e3bf52$export$bd894c1853ea7ce9(R, Q, P);\n      f = f.multiply(lrq);\n      R = R.add(Q);\n    }\n  }\n  return f;\n}\nfunction $18de921ac0e3bf52$export$d2180c627b521e81(element, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n  if (ec.k === 12n) {\n    let ans = element.pow((ec.q ** 4n - ec.q ** 2n + 1n) / ec.n);\n    ans = ans.qiPower(2).multiply(ans);\n    ans = ans.qiPower(6).divide(ans);\n    return ans;\n  } else return element.pow((ec.q ** ec.k - 1n) / ec.n);\n}\nfunction $18de921ac0e3bf52$export$740729f8e739fd84(P, Q, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n  const t = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).x + 1n;\n  let T = t - 1n;\n  T = T < 0n ? -T : T;\n  return $18de921ac0e3bf52$export$d2180c627b521e81($18de921ac0e3bf52$export$d2495f48e21d1b97(T, P.toAffine(), Q.toAffine()), ec);\n}\nfunction $18de921ac0e3bf52$export$18b00e9902a9edab(Ps, Qs, ec = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402)) {\n  const t = (0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).x + 1n;\n  let T = t - 1n;\n  T = T < 0n ? -T : T;\n  let prod = (0, $e01fe8766586be5e$export$d12e5c25403eca16).nil.one(ec.q);\n  for (let i = 0; i < Qs.length; i++) prod = prod.multiply($18de921ac0e3bf52$export$d2495f48e21d1b97(T, Ps[i].toAffine(), Qs[i].toAffine(), ec));\n  return $18de921ac0e3bf52$export$d2180c627b521e81(prod, ec);\n}\nvar $e66c6c730aa32243$exports = {};\n$parcel$export($e66c6c730aa32243$exports, \"coreSignMpl\", () => $e66c6c730aa32243$export$d36c55300691c9bd);\n$parcel$export($e66c6c730aa32243$exports, \"coreVerifyMpl\", () => $e66c6c730aa32243$export$fa86e59803ac4685);\n$parcel$export($e66c6c730aa32243$exports, \"coreAggregateMpl\", () => $e66c6c730aa32243$export$58639efa77ac2d9c);\n$parcel$export($e66c6c730aa32243$exports, \"coreAggregateVerify\", () => $e66c6c730aa32243$export$6d85de9d133db9bf);\nfunction $e66c6c730aa32243$export$d36c55300691c9bd(sk, message, dst) {\n  return (0, $8c194b1bdb7378af$export$74473883de6345ad)(message, dst).multiply(sk.value);\n}\nfunction $e66c6c730aa32243$export$fa86e59803ac4685(pk, message, signature, dst) {\n  if (!signature.isValid() || !pk.isValid()) return false;\n  const q = (0, $8c194b1bdb7378af$export$74473883de6345ad)(message, dst);\n  const one = (0, $e01fe8766586be5e$export$d12e5c25403eca16).nil.one((0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).q);\n  const pairingResult = (0, $18de921ac0e3bf52$export$18b00e9902a9edab)([pk, (0, $f81fe8e548a259fc$export$54579cb87d860a47).generateG1().negate()], [q, signature]);\n  return pairingResult.equals(one);\n}\nfunction $e66c6c730aa32243$export$58639efa77ac2d9c(signatures) {\n  if (!signatures.length) throw new Error(\"Must aggregate at least 1 signature.\");\n  let aggregate = signatures[0];\n  (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(aggregate.isValid());\n  for (const signature of signatures.slice(1)) {\n    (0, $8d5e30fd5fa02b49$export$a7a9523472993e97)(signature.isValid());\n    aggregate = aggregate.add(signature);\n  }\n  return aggregate;\n}\nfunction $e66c6c730aa32243$export$6d85de9d133db9bf(pks, ms, signature, dst) {\n  if (pks.length !== ms.length || !pks.length) return false;\n  if (!signature.isValid()) return false;\n  const qs = [signature];\n  const ps = [(0, $f81fe8e548a259fc$export$54579cb87d860a47).generateG1().negate()];\n  for (let i = 0; i < pks.length; i++) {\n    if (!pks[i].isValid()) return false;\n    qs.push((0, $8c194b1bdb7378af$export$74473883de6345ad)(ms[i], dst));\n    ps.push(pks[i]);\n  }\n  return (0, $e01fe8766586be5e$export$d12e5c25403eca16).nil.one((0, $00e9cfcde39d0b4a$export$df72980aaa0ca402).q).equals((0, $18de921ac0e3bf52$export$18b00e9902a9edab)(ps, qs));\n}\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $6c617017d170275f$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $dde8a229c2cb8a5c$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $61122e18a0bc5a58$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $ee4c81c840b9d78d$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $f9eca204c73b879f$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $e01fe8766586be5e$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $00e9cfcde39d0b4a$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $3dc2627f1a74b978$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $1d6ac6ce37d39979$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $8856e63c79a7a18e$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $7114a315a435248d$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $45c5a0c79e0736cc$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $5f5e7634db6ec17d$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $4508fd1f2dfd87e3$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $6855b0e4fef0dbbe$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $f81fe8e548a259fc$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $652b9d23a743e8c2$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $8d5e30fd5fa02b49$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $d8b9abe285040e16$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $b7fd6731762bdca0$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $46e980308398850e$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $cbd8901008cf0b7e$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $c20e836927ce4374$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $11b8831ba7e63616$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $27314bc03f74868b$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $ee571e8a973337ec$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $6263a241ee4922bd$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $5758ad345f58e7ac$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $20b42468fafd22ce$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $013cd1e91a5ae572$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $8c194b1bdb7378af$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $18de921ac0e3bf52$exports);\n$parcel$exportWildcard($dedcfd393dea00ca$exports, $e66c6c730aa32243$exports);\n$parcel$exportWildcard(module.exports, $dedcfd393dea00ca$exports);","map":{"version":3,"names":["$6c617017d170275f$export$a455218a85c89869","$dde8a229c2cb8a5c$export$d11d456c2f7a68f6","elements","basefield","constructor","Q","constructWithRoot","construct","withRoot","root","fromBytes","bytes","length","extension","RangeError","embeddedSize","i","push","slice","reverse","map","fromHex","hex","$11b8831ba7e63616$export$1a8ceedbd5845648","fromFq","fq","y","z","zero","result","$ee4c81c840b9d78d$export$3250f1bd1b840331","$61122e18a0bc5a58$export$312db8bf004879ae","$f9eca204c73b879f$export$4b83d0846fa6fe37","nil","one","$e01fe8766586be5e$export$d12e5c25403eca16","clone","element","toBytes","Uint8Array","from","toBool","findIndex","toHex","$11b8831ba7e63616$export$7ea66e3774a60b67","toString","join","negate","qiPower","$00e9cfcde39d0b4a$export$9e5f44173e64f162","$652b9d23a743e8c2$export$b279dc3e096c808b","$013cd1e91a5ae572$export$64b58c5b0372ae95","index","multiply","$3dc2627f1a74b978$export$3fa013b223651431","pow","exponent","$8d5e30fd5fa02b49$export$a7a9523472993e97","base","addTo","value","add","multiplyWith","x","entries","j","subtract","divide","inverse","equalTo","equals","lt","a","b","gt","lteq","gteq","error","$013cd1e91a5ae572$export$842a2cf37af977e1","$11b8831ba7e63616$export$2a52511e4f35930a","_Q","$11b8831ba7e63616$export$c0f6630717bc20c7","x0","x1","y0","y1","q","tempB","temp_x0","temp_y0","_i","modSqrt","$013cd1e91a5ae572$export$9747a4fa913461f","Error","S","euler","M","c","t","R","f","factor","mulByNonResidue","a0","a1","alpha","gamma","delta","g0","g1","g2","$00e9cfcde39d0b4a$export$d141bba7fdc215a3","$00e9cfcde39d0b4a$export$407448d2b89b1813","$00e9cfcde39d0b4a$export$8b22cf2602fb60ce","$00e9cfcde39d0b4a$export$371e57e0e902051d","$00e9cfcde39d0b4a$export$a1902a2bd2e92b96","$00e9cfcde39d0b4a$export$881ce897a4237459","$00e9cfcde39d0b4a$export$5056eb87f1daa9b4","$00e9cfcde39d0b4a$export$2cdfd364bfc1179f","$00e9cfcde39d0b4a$export$85e678c171039b5a","$00e9cfcde39d0b4a$export$7ccc53e8f1e7dfc5","$00e9cfcde39d0b4a$export$dda1d9f60106f0e9","$00e9cfcde39d0b4a$export$41b7b4fef7f76fa9","$00e9cfcde39d0b4a$export$342063e11d6c3cad","$00e9cfcde39d0b4a$export$985f9eea851ca5f9","$00e9cfcde39d0b4a$export$3d2b20680da13ad6","$00e9cfcde39d0b4a$export$df72980aaa0ca402","$00e9cfcde39d0b4a$export$89bff894721071da","h","$3dc2627f1a74b978$export$ef36a8205544c00e","$1d6ac6ce37d39979$export$bced8d2aada2d1c9","byteSize","blockSize","convert","buffer","hash","$parcel$interopDefault","$fpZC2$jssha","update","getHash","$1d6ac6ce37d39979$export$a888d2532e6dc7bb","$8856e63c79a7a18e$export$4c6c1dafe316d2c","$8856e63c79a7a18e$export$732ae2b2551ff413","$8856e63c79a7a18e$export$ea2765eb3fc09cbc","$8856e63c79a7a18e$export$54826405639b5799","$7114a315a435248d$export$8d1968de8a0388cb","$7114a315a435248d$export$cb23cd3dd580e72c","$7114a315a435248d$export$a49b3bf2a8f9ece3","$7114a315a435248d$export$c278e5ed08c0671a","$7114a315a435248d$export$f37125f5b41ac41c","$7114a315a435248d$export$8d0285e71910f92b","$7114a315a435248d$export$7fe9a0c81d3716fa","$7114a315a435248d$export$dfed87f2d11110f4","$45c5a0c79e0736cc$export$cd08e5dbcdd326bb","$45c5a0c79e0736cc$export$5e60bb11dae8e64b","$5f5e7634db6ec17d$export$c1bffad7aeda544b","TextEncoder","encode","$5f5e7634db6ec17d$export$5b346028b2eb430c","$5f5e7634db6ec17d$export$8d64a5ed43a5a57c","$5f5e7634db6ec17d$export$b554d748bc2a5eef","$4508fd1f2dfd87e3$export$567266b06c239d21","isInfinity","ec","isOnCurve","toJacobian","$f81fe8e548a259fc$export$54579cb87d860a47","twist","wsq","wcu","untwist","double","left","s","newX","newY","$27314bc03f74868b$export$6fc8005fc3e0ffe8","toAffine","isExtension","provider","mByte","includes","compressed","infinity","signed","byte","yValue","$27314bc03f74868b$export$c28dd39fe7cf1942","sign","$27314bc03f74868b$export$1f050984502bf9f6","$27314bc03f74868b$export$42e585c8f08aa7c5","generateG1","gx","gy","generateG2","g2x","g2y","infinityG1","infinityG2","fromBytesG1","fromBytesG2","fromHexG1","fromHexG2","isValid","n","getFingerprint","$11b8831ba7e63616$export$b25202b2d7056da9","$20b42468fafd22ce$export$699b481075cb9e0d","point","output","Z_sq","Z_4th","Y_sq","Y_4th","X_p","Y_p","Z_p","U1","U2","S1","S2","H","H_sq","H_cu","X3","Y3","Z3","message","Object","setPrototypeOf","prototype","$8d5e30fd5fa02b49$export$7750cdfb4db2c3d","test","$b7fd6731762bdca0$export$8f54525b330fd87b","size","fromSeed","seed","okm","$5758ad345f58e7ac$export$c0375ac2990d2f65","fromBigInt","aggregate","privateKeys","reduce","privateKey","getG1","$46e980308398850e$export$11fa5fadc101995e","keyGen","$6263a241ee4922bd$export$6b169d3865731b08","publicKey","$e66c6c730aa32243$export$d36c55300691c9bd","sign_prepend","prependPublicKey","verify","signature","$e66c6c730aa32243$export$fa86e59803ac4685","signatures","$e66c6c730aa32243$export$58639efa77ac2d9c","aggregateVerify","publicKeys","messages","mPrimes","$e66c6c730aa32243$export$6d85de9d133db9bf","deriveChildSk","$6263a241ee4922bd$export$5db2ff97ac93f09f","deriveChildSkUnhardened","$6263a241ee4922bd$export$3d98d96efbfaa93e","deriveChildPkUnhardened","$6263a241ee4922bd$export$5c5df4dc4bd00c4c","$cbd8901008cf0b7e$export$4eba737f59c212f9","match","$11b8831ba7e63616$export$c663ab80cce302c5","$c20e836927ce4374$export$b768295c529d6107","popProve","$8c194b1bdb7378af$export$74473883de6345ad","popVerify","proof","pairingResult","$18de921ac0e3bf52$export$18b00e9902a9edab","e","fastAggregateVerify","$11b8831ba7e63616$export$8a83211c878a3f1f","binary","replace","$11b8831ba7e63616$export$750ad761648c1996","Math","abs","$11b8831ba7e63616$export$311832b55488d870","$11b8831ba7e63616$export$59537329b9c511e9","bits","Number","$11b8831ba7e63616$export$98328bcdfd55e72d","$11b8831ba7e63616$export$7f883c9b3dcb5103","endian","floor","padStart","parseInt","byteList","$11b8831ba7e63616$export$28bc1625998ce845","$11b8831ba7e63616$export$2046d9d5fd83c6e2","BigInt","$11b8831ba7e63616$export$2797dcbce5606dae","$11b8831ba7e63616$export$630067042493230b","$11b8831ba7e63616$export$287dd7971339c972","lists","list","$11b8831ba7e63616$var$HEX_STRINGS","$11b8831ba7e63616$var$MAP_HEX","d","A","B","C","D","E","F","Array","undefined","u","addend","$27314bc03f74868b$export$27808dd10edd4c0f","P","mapCoeffs","mapValues","maxOrd","coeffs","max","zPows","item","coeffsZ","temp","coeff","Z","X","Y","$ee571e8a973337ec$export$d52448d6be44c59a","tempValue","toBytesValue","$ee571e8a973337ec$export$c0271fff4884589f","octets","octet","$ee571e8a973337ec$export$af8f3b1836f17aeb","$ee571e8a973337ec$export$ca94752eccc89d42","dst","ell","trunc","dst_prime","Z_pad","lib_str","b_0","bValues","pseudoRandomBytes","$ee571e8a973337ec$export$153ad90a5a904109","message_prime","$ee571e8a973337ec$export$a95bd8ce7381acba","count","modulus","degree","byteLength","expand","lengthInBytes","uValues","eValues","elmOffset","tv","$ee571e8a973337ec$export$d6b81f59cdb268dc","$ee571e8a973337ec$export$55a2cd7ad104d927","$6263a241ee4922bd$export$9b45cf77d8dc3a4c","ikm","salt","$6263a241ee4922bd$export$fd05bc46191446d1","parentSk","notIkm","lamport0","lamport1","lamportPk","parentPk","$6263a241ee4922bd$export$5bdc4123f9cc0693","$5758ad345f58e7ac$export$446963a0ea44fb9d","$5758ad345f58e7ac$export$f9380c9a627682d3","hmacKey","format","$5758ad345f58e7ac$export$9f77e0932fb78f72","prk","info","blocks","ceil","bytesWritten","toWrite","key","$20b42468fafd22ce$export$94a325ed6d836b5e","$20b42468fafd22ce$export$cc147b8bd27974ac","$20b42468fafd22ce$export$e10eb67e19628714","k","kopad","kipad","modulo","$8c194b1bdb7378af$export$457bc114f3b6be45","sign0","zero0","sign1","$8c194b1bdb7378af$export$dfee9190546f1d4a","numDenCommon","x0_num","x0_den","gx0_den","gx0_num","temp1","temp2","sqrtCandidate","x1_num","x1_den","gx1_num","gx1_den","eta","$8c194b1bdb7378af$export$e784642ec1e5cf56","$8c194b1bdb7378af$export$ee5c28ad16e024d8","t2","Pp","Pp2","hh","items","$18de921ac0e3bf52$export$c11f3970c3ad259","R12","slope","v","$18de921ac0e3bf52$export$bd894c1853ea7ce9","Q12","$18de921ac0e3bf52$export$d2495f48e21d1b97","T","T_bits","lrr","lrq","$18de921ac0e3bf52$export$d2180c627b521e81","ans","$18de921ac0e3bf52$export$740729f8e739fd84","Ps","Qs","prod","sk","pk","pks","ms","qs","ps"],"sources":["/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/index.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/internal.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/field/Field.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/field/FieldExt.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/field/Fq.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/field/Fq2.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/field/Fq6.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/field/Fq12.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/constants/ec.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/constants/frob_coeffs.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/constants/hash_info.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/constants/iso.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/constants/op_swu_g2.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/constants/roots_of_unity.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/constants/schemes.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/ec/AffinePoint.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/ec/EC.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/ec/JacobianPoint.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/errors/OperatorError.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/errors/AssertionError.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/HashInfo.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/PrivateKey.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/schemes/AugSchemeMPL.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/schemes/BasicSchemeMPL.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/types/schemes/PopSchemeMPL.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/bytes.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/crypto/ec.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/crypto/hash_to_field.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/crypto/hd_keys.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/crypto/hkdf.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/crypto/hmac.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/math.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/crypto/op_swu_g2.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/crypto/pairing.ts","/Users/kev/repos/chialisp-starter-pack/helper/node_modules/chia-bls/src/utils/crypto/signing.ts"],"sourcesContent":["export * from './internal';\n","/**\n * Do not reorder the exports in this file.\n * It is ordered this way to prevent circular dependencies.\n * If modified, save without organizing imports to prevent breaking the order.\n */\n\nexport * from './types/field/Field';\nexport * from './types/field/FieldExt';\nexport * from './types/field/Fq';\nexport * from './types/field/Fq2';\nexport * from './types/field/Fq6';\nexport * from './types/field/Fq12';\nexport * from './constants/ec';\nexport * from './constants/frob_coeffs';\nexport * from './constants/hash_info';\nexport * from './constants/iso';\nexport * from './constants/op_swu_g2';\nexport * from './constants/roots_of_unity';\nexport * from './constants/schemes';\nexport * from './types/ec/AffinePoint';\nexport * from './types/ec/EC';\nexport * from './types/ec/JacobianPoint';\nexport * from './types/errors/OperatorError';\nexport * from './types/errors/AssertionError';\nexport * from './types/HashInfo';\nexport * from './types/PrivateKey';\nexport * from './types/schemes/AugSchemeMPL';\nexport * from './types/schemes/BasicSchemeMPL';\nexport * from './types/schemes/PopSchemeMPL';\nexport * from './utils/bytes';\nexport * from './utils/crypto/ec';\nexport * from './utils/crypto/hash_to_field';\nexport * from './utils/crypto/hd_keys';\nexport * from './utils/crypto/hkdf';\nexport * from './utils/crypto/hmac';\nexport * from './utils/math';\nexport * from './utils/crypto/op_swu_g2';\nexport * from './utils/crypto/pairing';\nexport * from './utils/crypto/signing';\n","import { Fq } from '../../internal';\n\nexport type AnyField = Field<AnyField>;\n\nexport abstract class Field<T extends Field<T>> {\n    public abstract Q: bigint;\n    public abstract extension: number;\n\n    public abstract zero(Q: bigint): this;\n    public abstract one(Q: bigint): this;\n    public abstract fromBytes(Q: bigint, bytes: Uint8Array): this;\n    public abstract fromHex(Q: bigint, hex: string): this;\n    public abstract fromFq(Q: bigint, fq: Fq): this;\n\n    public abstract clone(): this;\n    public abstract toBytes(): Uint8Array;\n    public abstract toBool(): boolean;\n    public abstract toHex(): string;\n    public abstract toString(): string;\n\n    public abstract negate(): this;\n    public abstract inverse(): this;\n    public abstract qiPower(i: number): this;\n    public abstract pow(exponent: bigint): this;\n\n    public abstract addTo(value: AnyField | bigint): this;\n    public abstract multiplyWith(value: AnyField | bigint): this;\n\n    public abstract add(value: AnyField | bigint): AnyField;\n    public abstract subtract(value: AnyField | bigint): AnyField;\n    public abstract multiply(value: AnyField | bigint): AnyField;\n    public abstract divide(value: AnyField | bigint): AnyField;\n\n    public abstract equalTo(value: AnyField | bigint): boolean;\n    public abstract equals(value: AnyField | bigint): boolean;\n    public abstract lt(value: this): boolean;\n    public abstract gt(value: this): boolean;\n    public abstract lteq(value: this): boolean;\n    public abstract gteq(value: this): boolean;\n}\n","import {\n    AnyField,\n    assert,\n    Field,\n    Fq,\n    Fq12,\n    Fq2,\n    Fq6,\n    fromHex,\n    getFrobCoeff,\n    modNumber,\n    OperatorError,\n    q,\n    toHex,\n} from '../../internal';\n\nexport abstract class FieldExt<T extends Field<T>> extends Field<FieldExt<T>> {\n    public abstract root: T;\n\n    public elements: T[];\n    public basefield: T;\n\n    constructor(public Q: bigint, elements: T[]) {\n        super();\n        this.elements = elements;\n        this.basefield = elements[0];\n    }\n\n    public abstract construct(Q: bigint, elements: T[]): this;\n\n    public constructWithRoot(Q: bigint, elements: T[]): this {\n        return this.construct(Q, elements).withRoot(this.root);\n    }\n\n    public withRoot(root: T): this {\n        this.root = root;\n        return this;\n    }\n\n    public fromBytes(Q: bigint, bytes: Uint8Array): this {\n        const length = this.extension * 48;\n        if (bytes.length !== length) {\n            throw new RangeError(`Expected ${length} bytes.`);\n        }\n        const embeddedSize = 48 * (this.extension / this.elements.length);\n        const elements: Array<Uint8Array> = [];\n        for (let i = 0; i < this.elements.length; i++) {\n            elements.push(\n                bytes.slice(i * embeddedSize, (i + 1) * embeddedSize)\n            );\n        }\n        return new (this.constructor as any)(\n            Q,\n            ...elements\n                .reverse()\n                .map((bytes) => this.basefield.fromBytes(Q, bytes))\n        );\n    }\n\n    public fromHex(Q: bigint, hex: string): this {\n        return this.fromBytes(Q, fromHex(hex));\n    }\n\n    public fromFq(Q: bigint, fq: Fq): this {\n        const y = this.basefield.fromFq(Q, fq);\n        const z = this.basefield.zero(Q);\n        const elements: Array<T> = [];\n        for (let i = 0; i < this.elements.length; i++)\n            elements.push(i === 0 ? y : z);\n        const result = this.construct(Q, elements);\n        if (this instanceof Fq2) result.root = new Fq(Q, -1n) as any;\n        else if (this instanceof Fq6)\n            result.root = new Fq2(Q, Fq.nil.one(Q), Fq.nil.one(Q)) as any;\n        else if (this instanceof Fq12)\n            result.root = new Fq6(\n                Q,\n                Fq2.nil.zero(Q),\n                Fq2.nil.one(Q),\n                Fq2.nil.zero(Q)\n            ) as any;\n        return result;\n    }\n\n    public zero(Q: bigint): this {\n        return this.fromFq(Q, new Fq(Q, 0n));\n    }\n\n    public one(Q: bigint): this {\n        return this.fromFq(Q, new Fq(Q, 1n));\n    }\n\n    public clone(): this {\n        return this.constructWithRoot(\n            this.Q,\n            this.elements.map((element) => element.clone())\n        );\n    }\n\n    public toBytes(): Uint8Array {\n        const bytes: Array<number> = [];\n        for (let i = this.elements.length - 1; i >= 0; i--) {\n            bytes.push(...this.elements[i].toBytes());\n        }\n        return Uint8Array.from(bytes);\n    }\n\n    public toBool(): boolean {\n        return this.elements.findIndex((element) => !element.toBool()) === -1;\n    }\n\n    public toHex(): string {\n        return toHex(this.toBytes());\n    }\n\n    public toString(): string {\n        return `Fq${this.extension}(${this.elements.join(', ')})`;\n    }\n\n    public negate(): this {\n        return this.constructWithRoot(\n            this.Q,\n            this.elements.map((element) => element.negate())\n        );\n    }\n\n    public qiPower(i: number): this {\n        if (this.Q != q) throw new OperatorError('Invalid Q in qiPower.');\n        i = modNumber(i, this.extension);\n        if (i === 0) return this;\n        return this.constructWithRoot(\n            this.Q,\n            this.elements.map((element, index) =>\n                index === 0\n                    ? element.qiPower(i)\n                    : element\n                          .qiPower(i)\n                          .multiply(getFrobCoeff(this.extension, i, index)!)\n            ) as T[]\n        );\n    }\n\n    public pow(exponent: bigint): this {\n        assert(exponent >= 0n);\n        let result = this.one(this.Q).withRoot(this.root);\n        let base: FieldExt<T> = this;\n        while (exponent != 0n) {\n            if (exponent & 1n) result = result.multiply(base) as this;\n            base = base.multiply(base) as this;\n            exponent >>= 1n;\n        }\n        return result;\n    }\n\n    public addTo(value: AnyField | bigint): this {\n        let elements: AnyField[];\n        if (value instanceof FieldExt && value instanceof this.constructor) {\n            elements = value.elements;\n        } else {\n            if (typeof value !== 'bigint' && value.extension > this.extension)\n                throw new OperatorError(\n                    'Operand must be higher than extension.'\n                );\n            elements = this.elements.map(() => this.basefield.zero(this.Q));\n            elements[0] = elements[0].add(value);\n        }\n        return this.constructWithRoot(\n            this.Q,\n            this.elements.map((element, i) => element.add(elements[i])) as T[]\n        );\n    }\n\n    public multiplyWith(value: AnyField | bigint): this {\n        if (typeof value === 'bigint') {\n            return this.constructWithRoot(\n                this.Q,\n                this.elements.map((element) => element.multiply(value)) as T[]\n            );\n        } else if (this.extension < value.extension)\n            throw new OperatorError('Extension must be lower than operand.');\n        const elements = this.elements.map(() => this.basefield.zero(this.Q));\n        for (const [i, x] of this.elements.entries()) {\n            if (\n                value instanceof FieldExt &&\n                value.extension === this.extension\n            ) {\n                for (const [j, y] of value.elements.entries()) {\n                    if (x.toBool() && y.toBool()) {\n                        const index = modNumber(i + j, this.elements.length);\n                        if (i + j >= this.elements.length) {\n                            elements[index] = elements[index].add(\n                                x.multiply(y).multiply(this.root)\n                            ) as T;\n                        } else {\n                            elements[index] = elements[index].add(\n                                x.multiply(y)\n                            ) as T;\n                        }\n                    }\n                }\n            } else if (x.toBool()) elements[i] = x.multiply(value) as T;\n        }\n        return this.constructWithRoot(this.Q, elements);\n    }\n\n    public subtract(value: AnyField | bigint): FieldExt<AnyField> {\n        return this.add(typeof value === 'bigint' ? -value : value.negate());\n    }\n\n    public divide(value: AnyField | bigint): FieldExt<AnyField> {\n        return this.multiply(\n            typeof value === 'bigint' ? ~value : value.inverse()\n        );\n    }\n\n    public equalTo(value: AnyField | bigint): boolean {\n        if (!(value instanceof FieldExt && value instanceof this.constructor)) {\n            if (\n                typeof value === 'bigint' ||\n                (value instanceof FieldExt && this.extension > value.extension)\n            ) {\n                for (let i = 1; i < this.elements.length; i++) {\n                    if (!this.elements[i].equals(this.root.zero(this.Q)))\n                        return false;\n                }\n                return this.elements[0].equals(value);\n            }\n            throw new OperatorError('Invalid operand.');\n        } else\n            return (\n                this.elements.findIndex(\n                    (element, i) => !element.equals(value.elements[i])\n                ) === -1 && this.Q === value.Q\n            );\n    }\n\n    public lt(value: this): boolean {\n        for (let i = this.elements.length - 1; i >= 0; i--) {\n            const a = this.elements[i];\n            const b = value.elements[i];\n            if (a.lt(b)) return true;\n            else if (a.gt(b)) return false;\n        }\n        return false;\n    }\n\n    public gt(value: this): boolean {\n        for (let i = this.elements.length - 1; i >= 0; i--) {\n            const a = this.elements[i];\n            const b = value.elements[i];\n            if (a.gt(b)) return true;\n            else if (a.lt(b)) return false;\n        }\n        return false;\n    }\n\n    public lteq(value: this): boolean {\n        return this.lt(value) || this.equals(value);\n    }\n\n    public gteq(value: this): boolean {\n        return this.gt(value) || this.equals(value);\n    }\n\n    public add(value: AnyField | bigint): FieldExt<AnyField> {\n        try {\n            return this.addTo(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError) || typeof value === 'bigint')\n                throw error;\n            return value.addTo(this) as FieldExt<AnyField>;\n        }\n    }\n\n    public multiply(value: AnyField | bigint): FieldExt<AnyField> {\n        try {\n            return this.multiplyWith(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError) || typeof value === 'bigint')\n                throw error;\n            return value.multiplyWith(this) as FieldExt<AnyField>;\n        }\n    }\n\n    public equals(value: AnyField | bigint): boolean {\n        try {\n            return this.equalTo(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError)) throw error;\n            return typeof value === 'bigint' ? false : value.equalTo(this);\n        }\n    }\n}\n","import {\n    AnyField,\n    bigIntToBytes,\n    bytesToBigInt,\n    Field,\n    fromHex,\n    mod,\n    modPow,\n    OperatorError,\n    toHex,\n} from '../../internal';\n\nexport class Fq extends Field<Fq> {\n    public static nil = new Fq(1n, 0n);\n\n    public extension = 1;\n    public value: bigint;\n\n    constructor(public Q: bigint, value: bigint) {\n        super();\n        this.value = mod(value, Q);\n    }\n\n    public fromBytes(Q: bigint, bytes: Uint8Array): this {\n        if (bytes.length !== 48) throw new RangeError('Expected 48 bytes.');\n        return new Fq(Q, bytesToBigInt(bytes, 'big')) as this;\n    }\n\n    public fromHex(Q: bigint, hex: string): this {\n        return Fq.nil.fromBytes(Q, fromHex(hex)) as this;\n    }\n\n    public fromFq(_Q: bigint, fq: this): this {\n        return fq;\n    }\n\n    public zero(Q: bigint): this {\n        return new Fq(Q, 0n) as this;\n    }\n\n    public one(Q: bigint): this {\n        return new Fq(Q, 1n) as this;\n    }\n\n    public clone(): this {\n        return new Fq(this.Q, this.value) as this;\n    }\n\n    public toBytes(): Uint8Array {\n        return bigIntToBytes(this.value, 48, 'big');\n    }\n\n    public toBool(): boolean {\n        return true;\n    }\n\n    public toHex(): string {\n        return toHex(this.toBytes());\n    }\n\n    public toString(): string {\n        const hex = this.value.toString(16);\n        return `Fq(0x${\n            hex.length > 10\n                ? `${hex.slice(0, 5)}..${hex.slice(hex.length - 5)}`\n                : hex\n        })`;\n    }\n\n    public negate(): this {\n        return new Fq(this.Q, -this.value) as this;\n    }\n\n    public inverse(): this {\n        let x0 = 1n,\n            x1 = 0n,\n            y0 = 0n,\n            y1 = 1n;\n        let a = this.Q;\n        let b = this.value;\n        while (a != 0n) {\n            const q = b / a;\n            const tempB = b;\n            b = a;\n            a = mod(tempB, a);\n            const temp_x0 = x0;\n            x0 = x1;\n            x1 = temp_x0 - q * x1;\n            const temp_y0 = y0;\n            y0 = y1;\n            y1 = temp_y0 - q * y1;\n        }\n        return new Fq(this.Q, x0) as this;\n    }\n\n    public qiPower(_i: number): this {\n        return this;\n    }\n\n    public pow(exponent: bigint): this {\n        return (\n            exponent === 0n\n                ? new Fq(this.Q, 1n)\n                : exponent === 1n\n                ? new Fq(this.Q, this.value)\n                : mod(exponent, 2n) === 0n\n                ? new Fq(this.Q, this.value * this.value).pow(exponent / 2n)\n                : new Fq(this.Q, this.value * this.value)\n                      .pow(exponent / 2n)\n                      .multiply(this)\n        ) as this;\n    }\n\n    public addTo(value: AnyField | bigint): this {\n        if (typeof value === 'bigint')\n            return new Fq(this.Q, this.value + value) as this;\n        else if (value instanceof Fq)\n            return new Fq(this.Q, this.value + value.value) as this;\n        else throw new OperatorError('Can only add with Fq or bigint values.');\n    }\n\n    public multiplyWith(value: AnyField | bigint): this {\n        if (typeof value === 'bigint')\n            return new Fq(this.Q, this.value * value) as this;\n        else if (value instanceof Fq)\n            return new Fq(this.Q, this.value * value.value) as this;\n        else\n            throw new OperatorError(\n                'Can only multiply with Fq or bigint values.'\n            );\n    }\n\n    public subtract(value: AnyField | bigint): this {\n        return this.add(\n            typeof value === 'bigint' ? -value : value.negate()\n        ) as this;\n    }\n\n    public divide(value: AnyField | bigint): this {\n        return this.multiply(\n            (typeof value === 'bigint'\n                ? new Fq(this.Q, value)\n                : value\n            ).inverse()\n        ) as this;\n    }\n\n    public equalTo(value: AnyField | bigint): boolean {\n        return (\n            value instanceof Fq &&\n            this.value === value.value &&\n            this.Q === value.Q\n        );\n    }\n\n    public lt(value: Fq): boolean {\n        return this.value < value.value;\n    }\n\n    public gt(value: Fq): boolean {\n        return this.value > value.value;\n    }\n\n    public lteq(value: Fq): boolean {\n        return this.lt(value) || this.equals(value);\n    }\n\n    public gteq(value: Fq): boolean {\n        return this.gt(value) || this.equals(value);\n    }\n\n    public modSqrt(): Fq {\n        if (this.value === 0n) {\n            return new Fq(this.Q, 0n);\n        } else if (modPow(this.value, (this.Q - 1n) / 2n, this.Q) != 1n) {\n            throw new Error('No sqrt exists.');\n        } else if (mod(this.Q, 4n) === 3n) {\n            return new Fq(\n                this.Q,\n                modPow(this.value, (this.Q + 1n) / 4n, this.Q)\n            );\n        } else if (mod(this.Q, 8n) === 5n) {\n            return new Fq(\n                this.Q,\n                modPow(this.value, (this.Q + 3n) / 8n, this.Q)\n            );\n        }\n        let S = 0n;\n        let q = this.Q - 1n;\n        while (mod(q, 2n) === 0n) {\n            q /= 2n;\n            S++;\n        }\n        let z = 0n;\n        for (let i = 0n; i < this.Q; i += 1n) {\n            const euler = modPow(i, (this.Q - 1n) / 2n, this.Q);\n            if (euler === mod(-1n, this.Q)) {\n                z = i;\n                break;\n            }\n        }\n        let M = S;\n        let c = modPow(z, q, this.Q);\n        let t = modPow(this.value, q, this.Q);\n        let R = modPow(this.value, (q + 1n) / 2n, this.Q);\n        while (true) {\n            if (t === 0n) return new Fq(this.Q, 0n);\n            else if (t === 1n) return new Fq(this.Q, R);\n            let i = 0n;\n            let f = t;\n            while (f != 1n) {\n                f = mod(f ** 2n, this.Q);\n                i++;\n            }\n            const b = modPow(c, modPow(2n, M - i - 1n, this.Q), this.Q);\n            M = i;\n            c = mod(b ** 2n, this.Q);\n            t = mod(t * c, this.Q);\n            R = mod(R * b, this.Q);\n        }\n    }\n\n    public add(value: AnyField | bigint): AnyField {\n        try {\n            return this.addTo(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError) || typeof value === 'bigint')\n                throw error;\n            return value.addTo(this);\n        }\n    }\n\n    public multiply(value: AnyField | bigint): AnyField {\n        try {\n            return this.multiplyWith(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError) || typeof value === 'bigint')\n                throw error;\n            return value.multiplyWith(this);\n        }\n    }\n\n    public equals(value: AnyField | bigint): boolean {\n        try {\n            return this.equalTo(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError)) throw error;\n            return typeof value === 'bigint' ? false : value.equalTo(this);\n        }\n    }\n}\n","import { FieldExt, Fq } from '../../internal';\n\nexport class Fq2 extends FieldExt<Fq> {\n    public static nil = new Fq2(1n, Fq.nil, Fq.nil);\n\n    public extension = 2;\n    public root: Fq;\n\n    constructor(Q: bigint, x: Fq, y: Fq) {\n        super(Q, [x, y]);\n        this.root = new Fq(Q, -1n);\n    }\n\n    public construct(Q: bigint, elements: Fq[]): this {\n        return new Fq2(Q, elements[0], elements[1]) as this;\n    }\n\n    public inverse(): this {\n        const [a, b] = this.elements;\n        const factor = a.multiply(a).add(b.multiply(b)).inverse();\n        return new Fq2(\n            this.Q,\n            a.multiply(factor) as Fq,\n            b.negate().multiply(factor) as Fq\n        ) as this;\n    }\n\n    public mulByNonResidue(): this {\n        const [a, b] = this.elements;\n        return new Fq2(this.Q, a.subtract(b) as Fq, a.add(b) as Fq) as this;\n    }\n\n    public modSqrt(): this {\n        const [a0, a1] = this.elements;\n        if (a1.equals(this.basefield.one(this.Q)))\n            return this.fromFq(this.Q, a0.modSqrt());\n        let alpha = a0.pow(2n).add(a1.pow(2n)) as Fq;\n        let gamma = alpha.pow((this.Q - 1n) / 2n);\n        if (new Fq(this.Q, -1n).equals(gamma))\n            throw new Error('No sqrt exists.');\n        alpha = alpha.modSqrt();\n        let delta = a0.add(alpha).multiply(new Fq(this.Q, 2n).inverse()) as Fq;\n        gamma = delta.pow((this.Q - 1n) / 2n) as Fq;\n        if (gamma.equals(new Fq(this.Q, -1n)))\n            delta = a0\n                .subtract(alpha)\n                .multiply(new Fq(this.Q, 2n).inverse()) as Fq;\n        const x0 = delta.modSqrt();\n        const x1 = a1.multiply(new Fq(this.Q, 2n).multiply(x0).inverse()) as Fq;\n        return new Fq2(this.Q, x0, x1) as this;\n    }\n}\n","import { FieldExt, Fq, Fq2 } from '../../internal';\n\nexport class Fq6 extends FieldExt<Fq2> {\n    public static nil = new Fq6(1n, Fq2.nil, Fq2.nil, Fq2.nil);\n\n    public extension = 6;\n    public root: Fq2;\n\n    constructor(Q: bigint, x: Fq2, y: Fq2, z: Fq2) {\n        super(Q, [x, y, z]);\n        this.root = new Fq2(Q, Fq.nil.one(Q), Fq.nil.one(Q));\n    }\n\n    public construct(Q: bigint, elements: Fq2[]): this {\n        return new Fq6(Q, elements[0], elements[1], elements[2]) as this;\n    }\n\n    public inverse(): this {\n        const [a, b, c] = this.elements;\n        const g0 = a.multiply(a).subtract(b.multiply(c.mulByNonResidue()));\n        const g1 = (c.multiply(c) as Fq2)\n            .mulByNonResidue()\n            .subtract(a.multiply(b));\n        const g2 = b.multiply(b).subtract(a.multiply(c));\n        const factor = g0\n            .multiply(a)\n            .add((g1.multiply(c).add(g2.multiply(b)) as Fq2).mulByNonResidue())\n            .inverse();\n        return new Fq6(\n            this.Q,\n            g0.multiply(factor) as Fq2,\n            g1.multiply(factor) as Fq2,\n            g2.multiply(factor) as Fq2\n        ) as this;\n    }\n\n    public mulByNonResidue(): this {\n        const [a, b, c] = this.elements;\n        return new Fq6(this.Q, c.multiply(this.root) as Fq2, a, b) as this;\n    }\n}\n","import { FieldExt, Fq2, Fq6 } from '../../internal';\n\nexport class Fq12 extends FieldExt<Fq6> {\n    public static nil = new Fq12(1n, Fq6.nil, Fq6.nil);\n\n    public extension = 12;\n    public root: Fq6;\n\n    constructor(Q: bigint, x: Fq6, y: Fq6) {\n        super(Q, [x, y]);\n        this.root = new Fq6(\n            Q,\n            Fq2.nil.zero(Q),\n            Fq2.nil.one(Q),\n            Fq2.nil.zero(Q)\n        );\n    }\n\n    public construct(Q: bigint, elements: Fq6[]): this {\n        return new Fq12(Q, elements[0], elements[1]) as this;\n    }\n\n    public inverse(): this {\n        const [a, b] = this.elements;\n        const factor = a\n            .multiply(a)\n            .subtract((b.multiply(b) as Fq6).mulByNonResidue())\n            .inverse();\n        return new Fq12(\n            this.Q,\n            a.multiply(factor) as Fq6,\n            b.negate().multiply(factor) as Fq6\n        ) as this;\n    }\n}\n","import { EC, Fq, Fq2 } from '../internal';\n\nexport const x = -0xd201000000010000n;\nexport const q =\n    0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\nexport const a = new Fq(q, 0n);\nexport const b = new Fq(q, 4n);\nexport const aTwist = new Fq2(q, new Fq(q, 0n), new Fq(q, 0n));\nexport const bTwist = new Fq2(q, new Fq(q, 4n), new Fq(q, 4n));\n\nexport const gx = new Fq(\n    q,\n    0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bbn\n);\n\nexport const gy = new Fq(\n    q,\n    0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1n\n);\n\nexport const g2x = new Fq2(\n    q,\n    new Fq(\n        q,\n        352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n\n    ),\n    new Fq(\n        q,\n        3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758n\n    )\n);\n\nexport const g2y = new Fq2(\n    q,\n    new Fq(\n        q,\n        1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905n\n    ),\n    new Fq(\n        q,\n        927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582n\n    )\n);\n\nexport const n =\n    0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001n;\nexport const h = 0x396c8c005555e1568c00aaab0000aaabn;\nexport const hEff =\n    0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551n;\nexport const k = 12n;\nexport const sqrtN3 =\n    1586958781458431025242759403266842894121773480562120986020912974854563298150952611241517463240701n;\nexport const sqrtN3m1o2 =\n    793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n;\n\nexport const defaultEc: EC = {\n    q,\n    a,\n    b,\n    gx,\n    gy,\n    g2x,\n    g2y,\n    n,\n    h,\n    x,\n    k,\n    sqrtN3,\n    sqrtN3m1o2,\n};\n\nexport const defaultEcTwist: EC = {\n    q,\n    a: aTwist,\n    b: bTwist,\n    gx,\n    gy,\n    g2x,\n    g2y,\n    n,\n    h: hEff,\n    x,\n    k,\n    sqrtN3,\n    sqrtN3m1o2,\n};\n","import { AnyField, Fq, Fq2, Fq6, q } from '../internal';\n\nexport const frobCoeffs: Record<`${number},${number},${number}`, AnyField> = {\n    '2,1,1': new Fq(q, -1n),\n    '6,1,1': new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn\n        )\n    ),\n    '6,1,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaadn\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,2,1': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,2,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,3,1': new Fq2(q, new Fq(q, 0n), new Fq(q, 1n)),\n    '6,3,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaan\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,4,1': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,4,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,5,1': new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen\n        )\n    ),\n    '6,5,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffffn\n        ),\n        new Fq(q, 0n)\n    ),\n    '12,1,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8n\n            ),\n            new Fq(\n                q,\n                0xfc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,2,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffffn\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,3,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2n\n            ),\n            new Fq(\n                q,\n                0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,4,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,5,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995n\n            ),\n            new Fq(\n                q,\n                0x5b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,6,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaan\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,7,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0xfc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3n\n            ),\n            new Fq(\n                q,\n                0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,8,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,9,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n\n            ),\n            new Fq(\n                q,\n                0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,10,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaadn\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,11,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x5b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116n\n            ),\n            new Fq(\n                q,\n                0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n};\n\nexport function getFrobCoeff(\n    extension: number,\n    i: number,\n    index: number\n): AnyField | undefined {\n    return frobCoeffs[`${extension},${i},${index}`];\n}\n","import SHA from 'jssha';\nimport { HashInfo } from '../internal';\n\nexport const sha256: HashInfo = {\n    byteSize: 32,\n    blockSize: 64,\n    convert: (buffer) => {\n        const hash = new SHA('SHA-256', 'UINT8ARRAY');\n        hash.update(buffer);\n        return hash.getHash('UINT8ARRAY');\n    },\n};\n\nexport const sha512: HashInfo = {\n    byteSize: 64,\n    blockSize: 128,\n    convert: (buffer) => {\n        const hash = new SHA('SHA-512', 'UINT8ARRAY');\n        hash.update(buffer);\n        return hash.getHash('UINT8ARRAY');\n    },\n};\n","import { Fq, Fq2, q } from '../internal';\n\nexport const xnum = [\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6n\n        ),\n        new Fq(\n            q,\n            0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6n\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71an\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71en\n        ),\n        new Fq(\n            q,\n            0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38dn\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1n\n        ),\n        new Fq(q, 0n)\n    ),\n];\n\nexport const xden = [\n    new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63n\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0xcn),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9fn\n        )\n    ),\n    new Fq2(q, new Fq(q, 1n), new Fq(q, 0n)),\n];\n\nexport const ynum = [\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706n\n        ),\n        new Fq(\n            q,\n            0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706n\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97ben\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71cn\n        ),\n        new Fq(\n            q,\n            0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38fn\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10n\n        ),\n        new Fq(q, 0n)\n    ),\n];\n\nexport const yden = [\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fbn\n        ),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fbn\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3n\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0x12n),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99n\n        )\n    ),\n    new Fq2(q, new Fq(q, 1n), new Fq(q, 0n)),\n];\n","import { Fq, Fq2, q } from '../internal';\n\nexport const xi_2 = new Fq2(q, new Fq(q, -2n), new Fq(q, -1n));\nexport const Ell2p_a = new Fq2(q, new Fq(q, 0n), new Fq(q, 240n));\nexport const Ell2p_b = new Fq2(q, new Fq(q, 1012n), new Fq(q, 1012n));\nexport const ev1 =\n    0x699be3b8c6870965e5bf892ad5d2cc7b0e85a117402dfd83b7f4a947e02d978498255a2aaec0ac627b5afbdf1bf1c90n;\nexport const ev2 =\n    0x8157cd83046453f5dd0972b6e3949e4288020b5b8a9cc99ca07e27089a2ce2436d965026adad3ef7baba37f2183e9b5n;\nexport const ev3 =\n    0xab1c2ffdd6c253ca155231eb3e71ba044fd562f6f72bc5bad5ec46a0b7a3b0247cf08ce6c6317f40edbc653a72dee17n;\nexport const ev4 =\n    0xaa404866706722864480885d68ad0ccac1967c7544b447873cc37e0181271e006df72162a3d3e0287bf597fbf7f8fc1n;\nexport const etas = [\n    new Fq2(q, new Fq(q, ev1), new Fq(q, ev2)),\n    new Fq2(q, new Fq(q, q - ev2), new Fq(q, ev1)),\n    new Fq2(q, new Fq(q, ev3), new Fq(q, ev4)),\n    new Fq2(q, new Fq(q, q - ev4), new Fq(q, ev3)),\n];\n","import { Fq, Fq2, q } from '../internal';\n\nexport const rv1 =\n    0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n;\n\nexport const rootsOfUnity = [\n    new Fq2(q, new Fq(q, 1n), new Fq(q, 0n)),\n    new Fq2(q, new Fq(q, 0n), new Fq(q, 1n)),\n    new Fq2(q, new Fq(q, rv1), new Fq(q, rv1)),\n    new Fq2(q, new Fq(q, rv1), new Fq(q, q - rv1)),\n];\n","export const basicSchemeDst = new TextEncoder().encode(\n    'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_'\n);\nexport const augSchemeDst = new TextEncoder().encode(\n    'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_AUG_'\n);\nexport const popSchemeDst = new TextEncoder().encode(\n    'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP_'\n);\nexport const popSchemePopDst = new TextEncoder().encode(\n    'BLS_POP_BLS12381G2_XMD:SHA-256_SSWU_RO_POP_'\n);\n","import {\n    assert,\n    defaultEc,\n    EC,\n    Fq,\n    Fq12,\n    Fq2,\n    Fq6,\n    JacobianPoint,\n    scalarMultJacobian,\n} from '../../internal';\n\nexport class AffinePoint {\n    constructor(\n        public x: Fq | Fq2,\n        public y: Fq | Fq2,\n        public isInfinity: boolean,\n        public ec: EC = defaultEc\n    ) {\n        assert(x instanceof y.constructor);\n    }\n\n    public isOnCurve(): boolean {\n        return (\n            this.isInfinity ||\n            this.y\n                .multiply(this.y)\n                .equals(\n                    this.x\n                        .multiply(this.x)\n                        .multiply(this.x)\n                        .add(this.ec.a.multiply(this.x))\n                        .add(this.ec.b)\n                )\n        );\n    }\n\n    public toJacobian(): JacobianPoint {\n        return new JacobianPoint(\n            this.x,\n            this.y,\n            this.x.one(this.ec.q),\n            this.isInfinity,\n            this.ec\n        );\n    }\n\n    public twist(): AffinePoint {\n        const f = Fq12.nil.one(this.ec.q);\n        const wsq = new Fq12(this.ec.q, f.root, Fq6.nil.zero(this.ec.q));\n        const wcu = new Fq12(this.ec.q, Fq6.nil.zero(this.ec.q), f.root);\n        return new AffinePoint(\n            this.x.multiply(wsq) as Fq | Fq2,\n            this.y.multiply(wcu) as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public untwist(): AffinePoint {\n        const f = Fq12.nil.one(this.ec.q);\n        const wsq = new Fq12(this.ec.q, f.root, Fq6.nil.zero(this.ec.q));\n        const wcu = new Fq12(this.ec.q, Fq6.nil.zero(this.ec.q), f.root);\n        return new AffinePoint(\n            this.x.divide(wsq) as Fq | Fq2,\n            this.y.divide(wcu) as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public double(): AffinePoint {\n        const left = this.x\n            .multiply(this.x)\n            .multiply(new Fq(this.ec.q, 3n))\n            .add(this.ec.a);\n        const s = left.divide(this.y.multiply(new Fq(this.ec.q, 2n)));\n        const newX = s.multiply(s).subtract(this.x).subtract(this.x);\n        const newY = s.multiply(this.x.subtract(newX)).subtract(this.y);\n        return new AffinePoint(\n            newX as Fq | Fq2,\n            newY as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public add(value: AffinePoint): AffinePoint {\n        assert(this.isOnCurve());\n        assert(value.isOnCurve());\n        if (this.isInfinity) return value;\n        else if (value.isInfinity) return this;\n        else if (this.equals(value)) return this.double();\n        const s = value.y.subtract(this.y).divide(value.x.subtract(this.x));\n        const newX = s.multiply(s).subtract(this.x).subtract(value.x);\n        const newY = s.multiply(this.x.subtract(newX)).subtract(this.y);\n        return new AffinePoint(\n            newX as Fq | Fq2,\n            newY as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public subtract(value: AffinePoint): AffinePoint {\n        return this.add(value.negate());\n    }\n\n    public multiply(value: Fq | bigint): AffinePoint {\n        return scalarMultJacobian(value, this.toJacobian(), this.ec).toAffine();\n    }\n\n    public negate(): AffinePoint {\n        return new AffinePoint(\n            this.x,\n            this.y.negate(),\n            this.isInfinity,\n            this.ec\n        );\n    }\n\n    public equals(value: AffinePoint): boolean {\n        return (\n            this.x.equals(value.x) &&\n            this.y.equals(value.y) &&\n            this.isInfinity === value.isInfinity\n        );\n    }\n\n    public clone(): AffinePoint {\n        return new AffinePoint(\n            this.x.clone(),\n            this.y.clone(),\n            this.isInfinity,\n            this.ec\n        );\n    }\n\n    public toString(): string {\n        return `AffinePoint(x=${this.x}, y=${this.y}, i=${this.isInfinity})`;\n    }\n}\n","import { AnyField, Fq, Fq2 } from '../../internal';\n\nexport interface EC {\n    q: bigint;\n    a: AnyField;\n    b: AnyField;\n    gx: Fq;\n    gy: Fq;\n    g2x: Fq2;\n    g2y: Fq2;\n    n: bigint;\n    h: bigint;\n    x: bigint;\n    k: bigint;\n    sqrtN3: bigint;\n    sqrtN3m1o2: bigint;\n}\n","import {\n    AffinePoint,\n    assert,\n    bytesToInt,\n    defaultEc,\n    defaultEcTwist,\n    EC,\n    Fq,\n    Fq2,\n    fromHex,\n    hash256,\n    scalarMultJacobian,\n    signFq,\n    signFq2,\n    toHex,\n    yForX,\n} from '../../internal';\n\nexport class JacobianPoint {\n    public static fromBytes(\n        bytes: Uint8Array,\n        isExtension: boolean,\n        ec: EC = defaultEc\n    ): JacobianPoint {\n        const provider = isExtension ? Fq2 : Fq;\n        if (isExtension) {\n            if (bytes.length !== 96) throw new Error('Expected 96 bytes.');\n        } else {\n            if (bytes.length !== 48) throw new Error('Expected 48 bytes.');\n        }\n        const mByte = bytes[0] & 0xe0;\n        if ([0x20, 0x60, 0xe0].includes(mByte))\n            throw new Error('Invalid first three bits.');\n        const compressed = (mByte & 0x80) !== 0;\n        const infinity = (mByte & 0x40) !== 0;\n        const signed = (mByte & 0x20) !== 0;\n        if (!compressed) throw new Error('Compression bit must be 1.');\n        bytes[0] &= 0x1f;\n        if (infinity) {\n            for (const byte of bytes) {\n                if (byte !== 0)\n                    throw new Error(\n                        'Point at infinity, but found non-zero byte.'\n                    );\n            }\n            return new AffinePoint(\n                provider.nil.zero(ec.q),\n                provider.nil.zero(ec.q),\n                true,\n                ec\n            ).toJacobian();\n        }\n        const x = (isExtension ? Fq2 : Fq).nil.fromBytes(ec.q, bytes);\n        const yValue = yForX(x, ec);\n        const sign = isExtension\n            ? signFq2(yValue as Fq2, ec)\n            : signFq(yValue as Fq, ec);\n        const y = (sign === signed ? yValue : yValue.negate()) as Fq | Fq2;\n        return new AffinePoint(x, y, false, ec).toJacobian();\n    }\n\n    public static fromHex(\n        hex: string,\n        isExtension: boolean,\n        ec: EC = defaultEc\n    ): JacobianPoint {\n        return JacobianPoint.fromBytes(fromHex(hex), isExtension, ec);\n    }\n\n    public static generateG1(): JacobianPoint {\n        return new AffinePoint(\n            defaultEc.gx,\n            defaultEc.gy,\n            false,\n            defaultEc\n        ).toJacobian();\n    }\n\n    public static generateG2(): JacobianPoint {\n        return new AffinePoint(\n            defaultEcTwist.g2x,\n            defaultEcTwist.g2y,\n            false,\n            defaultEcTwist\n        ).toJacobian();\n    }\n\n    public static infinityG1(isExtension: boolean = false): JacobianPoint {\n        const provider = isExtension ? Fq2 : Fq;\n        return new JacobianPoint(\n            provider.nil.zero(defaultEc.q),\n            provider.nil.zero(defaultEc.q),\n            provider.nil.zero(defaultEc.q),\n            true,\n            defaultEc\n        );\n    }\n\n    public static infinityG2(isExtension: boolean = true): JacobianPoint {\n        const provider = isExtension ? Fq2 : Fq;\n        return new JacobianPoint(\n            provider.nil.zero(defaultEcTwist.q),\n            provider.nil.zero(defaultEcTwist.q),\n            provider.nil.zero(defaultEcTwist.q),\n            true,\n            defaultEcTwist\n        );\n    }\n\n    public static fromBytesG1(\n        bytes: Uint8Array,\n        isExtension: boolean = false\n    ): JacobianPoint {\n        return JacobianPoint.fromBytes(bytes, isExtension, defaultEc);\n    }\n\n    public static fromBytesG2(\n        bytes: Uint8Array,\n        isExtension: boolean = true\n    ): JacobianPoint {\n        return JacobianPoint.fromBytes(bytes, isExtension, defaultEcTwist);\n    }\n\n    public static fromHexG1(\n        hex: string,\n        isExtension: boolean = false\n    ): JacobianPoint {\n        return JacobianPoint.fromBytesG1(fromHex(hex), isExtension);\n    }\n\n    public static fromHexG2(\n        hex: string,\n        isExtension: boolean = true\n    ): JacobianPoint {\n        return JacobianPoint.fromBytesG2(fromHex(hex), isExtension);\n    }\n\n    constructor(\n        public x: Fq | Fq2,\n        public y: Fq | Fq2,\n        public z: Fq | Fq2,\n        public isInfinity: boolean,\n        public ec: EC = defaultEc\n    ) {\n        assert(x instanceof y.constructor);\n        assert(y instanceof z.constructor);\n    }\n\n    public isOnCurve(): boolean {\n        return this.isInfinity || this.toAffine().isOnCurve();\n    }\n\n    public isValid(): boolean {\n        return (\n            this.isOnCurve() &&\n            this.multiply(this.ec.n).equals(\n                this.x instanceof Fq\n                    ? JacobianPoint.infinityG1()\n                    : JacobianPoint.infinityG2()\n            )\n        );\n    }\n\n    public getFingerprint(): number {\n        const bytes = this.toBytes();\n        return bytesToInt(hash256(bytes).slice(0, 4), 'big');\n    }\n\n    public toAffine(): AffinePoint {\n        return this.isInfinity\n            ? new AffinePoint(\n                  this.x.zero(this.ec.q),\n                  this.y.zero(this.ec.q),\n                  true,\n                  this.ec\n              )\n            : new AffinePoint(\n                  this.x.divide(this.z.pow(2n)) as Fq | Fq2,\n                  this.y.divide(this.z.pow(3n)) as Fq | Fq2,\n                  false,\n                  this.ec\n              );\n    }\n\n    public toBytes(): Uint8Array {\n        const point = this.toAffine();\n        const output = point.x.toBytes();\n        if (point.isInfinity) {\n            const bytes = [0xc0];\n            for (let i = 0; i < output.length - 1; i++) bytes.push(0);\n            return Uint8Array.from(bytes);\n        }\n        const sign =\n            point.y instanceof Fq2\n                ? signFq2(point.y, this.ec)\n                : signFq(point.y, this.ec);\n        output[0] |= sign ? 0xa0 : 0x80;\n        return output;\n    }\n\n    public toHex(): string {\n        return toHex(this.toBytes());\n    }\n\n    public toString(): string {\n        return `JacobianPoint(x=${this.x}, y=${this.y}, z=${this.z}, i=${this.isInfinity})`;\n    }\n\n    public double(): JacobianPoint {\n        if (this.isInfinity || this.y.equals(this.x.zero(this.ec.q)))\n            return new JacobianPoint(\n                this.x.one(this.ec.q),\n                this.x.one(this.ec.q),\n                this.x.zero(this.ec.q),\n                true,\n                this.ec\n            );\n        const S = this.x\n            .multiply(this.y)\n            .multiply(this.y)\n            .multiply(new Fq(this.ec.q, 4n));\n        const Z_sq = this.z.multiply(this.z);\n        const Z_4th = Z_sq.multiply(Z_sq);\n        const Y_sq = this.y.multiply(this.y);\n        const Y_4th = Y_sq.multiply(Y_sq);\n        const M = this.x\n            .multiply(this.x)\n            .multiply(new Fq(this.ec.q, 3n))\n            .add(this.ec.a.multiply(Z_4th));\n        const X_p = M.multiply(M).subtract(S.multiply(new Fq(this.ec.q, 2n)));\n        const Y_p = M.multiply(S.subtract(X_p)).subtract(\n            Y_4th.multiply(new Fq(this.ec.q, 8n))\n        );\n        const Z_p = this.y.multiply(this.z).multiply(new Fq(this.ec.q, 2n));\n        return new JacobianPoint(\n            X_p as Fq | Fq2,\n            Y_p as Fq | Fq2,\n            Z_p as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public negate(): JacobianPoint {\n        return this.toAffine().negate().toJacobian();\n    }\n\n    public add(value: JacobianPoint): JacobianPoint {\n        if (this.isInfinity) return value;\n        else if (value.isInfinity) return this;\n        const U1 = this.x.multiply(value.z.pow(2n));\n        const U2 = value.x.multiply(this.z.pow(2n));\n        const S1 = this.y.multiply(value.z.pow(3n));\n        const S2 = value.y.multiply(this.z.pow(3n));\n        if (U1.equals(U2)) {\n            if (!S1.equals(S2)) {\n                return new JacobianPoint(\n                    this.x.one(this.ec.q),\n                    this.x.one(this.ec.q),\n                    this.x.zero(this.ec.q),\n                    true,\n                    this.ec\n                );\n            } else return this.double();\n        }\n        const H = U2.subtract(U1);\n        const R = S2.subtract(S1);\n        const H_sq = H.multiply(H);\n        const H_cu = H.multiply(H_sq);\n        const X3 = R.multiply(R)\n            .subtract(H_cu)\n            .subtract(U1.multiply(H_sq).multiply(new Fq(this.ec.q, 2n)));\n        const Y3 = R.multiply(U1.multiply(H_sq).subtract(X3)).subtract(\n            S1.multiply(H_cu)\n        );\n        const Z3 = H.multiply(this.z).multiply(value.z);\n        return new JacobianPoint(\n            X3 as Fq | Fq2,\n            Y3 as Fq | Fq2,\n            Z3 as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public multiply(value: Fq | bigint): JacobianPoint {\n        return scalarMultJacobian(value, this, this.ec);\n    }\n\n    public equals(value: JacobianPoint): boolean {\n        return this.toAffine().equals(value.toAffine());\n    }\n\n    public clone(): JacobianPoint {\n        return new JacobianPoint(\n            this.x.clone(),\n            this.y.clone(),\n            this.z.clone(),\n            this.isInfinity,\n            this.ec\n        );\n    }\n}\n","export class OperatorError extends Error {\n    constructor(message: string) {\n        super(message);\n        Object.setPrototypeOf(this, OperatorError.prototype);\n    }\n}\n","export class AssertionError extends Error {\n    constructor(message: string) {\n        super(message);\n        Object.setPrototypeOf(this, AssertionError.prototype);\n    }\n}\n\nexport function assert(\n    test: boolean,\n    message: string = 'Assertion failed.'\n): void {\n    if (!test) throw new AssertionError(message);\n}\n","export interface HashInfo {\n    convert: (bytes: Uint8Array) => Uint8Array;\n    byteSize: number;\n    blockSize: number;\n}\n","import {\n    assert,\n    bigIntToBytes,\n    bytesToBigInt,\n    defaultEc,\n    extractExpand,\n    fromHex,\n    JacobianPoint,\n    mod,\n    toHex,\n} from '../internal';\n\nexport class PrivateKey {\n    public static size = 32;\n\n    public static fromBytes(bytes: Uint8Array): PrivateKey {\n        return new PrivateKey(mod(bytesToBigInt(bytes, 'big'), defaultEc.n));\n    }\n\n    public static fromHex(hex: string): PrivateKey {\n        return PrivateKey.fromBytes(fromHex(hex));\n    }\n\n    public static fromSeed(seed: Uint8Array): PrivateKey {\n        const length = 48;\n        const okm = extractExpand(\n            length,\n            Uint8Array.from([...seed, 0]),\n            new TextEncoder().encode('BLS-SIG-KEYGEN-SALT-'),\n            Uint8Array.from([0, length])\n        );\n        return new PrivateKey(mod(bytesToBigInt(okm, 'big'), defaultEc.n));\n    }\n\n    public static fromBigInt(value: bigint): PrivateKey {\n        return new PrivateKey(mod(value, defaultEc.n));\n    }\n\n    public static aggregate(privateKeys: PrivateKey[]): PrivateKey {\n        return new PrivateKey(\n            mod(\n                privateKeys.reduce(\n                    (aggregate, privateKey) => aggregate + privateKey.value,\n                    0n\n                ),\n                defaultEc.n\n            )\n        );\n    }\n\n    constructor(public value: bigint) {\n        assert(value < defaultEc.n);\n    }\n\n    public getG1(): JacobianPoint {\n        return JacobianPoint.generateG1().multiply(this.value);\n    }\n\n    public toBytes(): Uint8Array {\n        return bigIntToBytes(this.value, PrivateKey.size, 'big');\n    }\n\n    public toHex(): string {\n        return toHex(this.toBytes());\n    }\n\n    public toString(): string {\n        return `PrivateKey(0x${this.toHex()})`;\n    }\n\n    public equals(value: PrivateKey): boolean {\n        return this.value === value.value;\n    }\n}\n","import {\n    augSchemeDst,\n    coreAggregateMpl,\n    coreAggregateVerify,\n    coreSignMpl,\n    coreVerifyMpl,\n    deriveChildG1Unhardened,\n    deriveChildSk,\n    deriveChildSkUnhardened,\n    JacobianPoint,\n    keyGen,\n    PrivateKey,\n} from '../../internal';\n\nexport class AugSchemeMPL {\n    public static keyGen(seed: Uint8Array): PrivateKey {\n        return keyGen(seed);\n    }\n\n    public static sign(\n        privateKey: PrivateKey,\n        message: Uint8Array\n    ): JacobianPoint {\n        const publicKey = privateKey.getG1();\n        return coreSignMpl(\n            privateKey,\n            Uint8Array.from([...publicKey.toBytes(), ...message]),\n            augSchemeDst\n        );\n    }\n\n    public static sign_prepend(\n        privateKey: PrivateKey,\n        message: Uint8Array,\n        prependPublicKey: JacobianPoint\n    ): JacobianPoint {\n        return coreSignMpl(\n            privateKey,\n            Uint8Array.from([...prependPublicKey.toBytes(), ...message]),\n            augSchemeDst\n        );\n    }\n\n    public static verify(\n        publicKey: JacobianPoint,\n        message: Uint8Array,\n        signature: JacobianPoint\n    ): boolean {\n        return coreVerifyMpl(\n            publicKey,\n            Uint8Array.from([...publicKey.toBytes(), ...message]),\n            signature,\n            augSchemeDst\n        );\n    }\n\n    public static aggregate(signatures: JacobianPoint[]): JacobianPoint {\n        return coreAggregateMpl(signatures);\n    }\n\n    public static aggregateVerify(\n        publicKeys: JacobianPoint[],\n        messages: Uint8Array[],\n        signature: JacobianPoint\n    ): boolean {\n        if (publicKeys.length !== messages.length || !publicKeys.length)\n            return false;\n        const mPrimes: Array<Uint8Array> = [];\n        for (let i = 0; i < publicKeys.length; i++)\n            mPrimes.push(\n                Uint8Array.from([...publicKeys[i].toBytes(), ...messages[i]])\n            );\n        return coreAggregateVerify(\n            publicKeys,\n            mPrimes,\n            signature,\n            augSchemeDst\n        );\n    }\n\n    public static deriveChildSk(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSk(privateKey, index);\n    }\n\n    public static deriveChildSkUnhardened(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSkUnhardened(privateKey, index);\n    }\n\n    public static deriveChildPkUnhardened(\n        publicKey: JacobianPoint,\n        index: number\n    ): JacobianPoint {\n        return deriveChildG1Unhardened(publicKey, index);\n    }\n}\n","import {\n    basicSchemeDst,\n    bytesEqual,\n    coreAggregateMpl,\n    coreAggregateVerify,\n    coreSignMpl,\n    coreVerifyMpl,\n    deriveChildG1Unhardened,\n    deriveChildSk,\n    deriveChildSkUnhardened,\n    JacobianPoint,\n    keyGen,\n    PrivateKey,\n} from '../../internal';\n\nexport class BasicSchemeMPL {\n    public static keyGen(seed: Uint8Array): PrivateKey {\n        return keyGen(seed);\n    }\n\n    public static sign(\n        privateKey: PrivateKey,\n        message: Uint8Array\n    ): JacobianPoint {\n        return coreSignMpl(privateKey, message, basicSchemeDst);\n    }\n\n    public static verify(\n        publicKey: JacobianPoint,\n        message: Uint8Array,\n        signature: JacobianPoint\n    ): boolean {\n        return coreVerifyMpl(publicKey, message, signature, basicSchemeDst);\n    }\n\n    public static aggregate(signatures: JacobianPoint[]): JacobianPoint {\n        return coreAggregateMpl(signatures);\n    }\n\n    public static aggregateVerify(\n        publicKeys: JacobianPoint[],\n        messages: Uint8Array[],\n        signature: JacobianPoint\n    ): boolean {\n        if (publicKeys.length !== messages.length || !publicKeys.length)\n            return false;\n        for (const message of messages) {\n            for (const match of messages) {\n                if (message !== match && bytesEqual(message, match))\n                    return false;\n            }\n        }\n        return coreAggregateVerify(\n            publicKeys,\n            messages,\n            signature,\n            basicSchemeDst\n        );\n    }\n\n    public static deriveChildSk(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSk(privateKey, index);\n    }\n\n    public static deriveChildSkUnhardened(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSkUnhardened(privateKey, index);\n    }\n\n    public static deriveChildPkUnhardened(\n        publicKey: JacobianPoint,\n        index: number\n    ): JacobianPoint {\n        return deriveChildG1Unhardened(publicKey, index);\n    }\n}\n","import {\n    assert,\n    AssertionError,\n    atePairingMulti,\n    bytesEqual,\n    coreAggregateMpl,\n    coreAggregateVerify,\n    coreSignMpl,\n    coreVerifyMpl,\n    defaultEc,\n    deriveChildG1Unhardened,\n    deriveChildSk,\n    deriveChildSkUnhardened,\n    Fq12,\n    g2Map,\n    JacobianPoint,\n    keyGen,\n    popSchemeDst,\n    popSchemePopDst,\n    PrivateKey,\n} from '../../internal';\n\nexport class PopSchemeMPL {\n    public static keyGen(seed: Uint8Array): PrivateKey {\n        return keyGen(seed);\n    }\n\n    public static sign(\n        privateKey: PrivateKey,\n        message: Uint8Array\n    ): JacobianPoint {\n        return coreSignMpl(privateKey, message, popSchemeDst);\n    }\n\n    public static verify(\n        publicKey: JacobianPoint,\n        message: Uint8Array,\n        signature: JacobianPoint\n    ): boolean {\n        return coreVerifyMpl(publicKey, message, signature, popSchemeDst);\n    }\n\n    public static aggregate(signatures: JacobianPoint[]): JacobianPoint {\n        return coreAggregateMpl(signatures);\n    }\n\n    public static aggregateVerify(\n        publicKeys: JacobianPoint[],\n        messages: Uint8Array[],\n        signature: JacobianPoint\n    ): boolean {\n        if (publicKeys.length !== messages.length || !publicKeys.length)\n            return false;\n        for (const message of messages) {\n            for (const match of messages) {\n                if (message !== match && bytesEqual(message, match))\n                    return false;\n            }\n        }\n        return coreAggregateVerify(\n            publicKeys,\n            messages,\n            signature,\n            popSchemeDst\n        );\n    }\n\n    public static popProve(privateKey: PrivateKey): JacobianPoint {\n        const publicKey = privateKey.getG1();\n        return g2Map(publicKey.toBytes(), popSchemePopDst).multiply(\n            privateKey.value\n        );\n    }\n\n    public static popVerify(\n        publicKey: JacobianPoint,\n        proof: JacobianPoint\n    ): boolean {\n        try {\n            assert(proof.isValid());\n            assert(publicKey.isValid());\n            const q = g2Map(publicKey.toBytes(), popSchemePopDst);\n            const one = Fq12.nil.one(defaultEc.q);\n            const pairingResult = atePairingMulti(\n                [publicKey, JacobianPoint.generateG1().negate()],\n                [q, proof]\n            );\n            return pairingResult.equals(one);\n        } catch (e) {\n            if (e instanceof AssertionError) return false;\n            throw e;\n        }\n    }\n\n    public static fastAggregateVerify(\n        publicKeys: JacobianPoint[],\n        message: Uint8Array,\n        signature: JacobianPoint\n    ): boolean {\n        if (!publicKeys.length) return false;\n        let aggregate = publicKeys[0];\n        for (const publicKey of publicKeys.slice(1))\n            aggregate = aggregate.add(publicKey);\n        return coreVerifyMpl(aggregate, message, signature, popSchemeDst);\n    }\n\n    public static deriveChildSk(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSk(privateKey, index);\n    }\n\n    public static deriveChildSkUnhardened(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSkUnhardened(privateKey, index);\n    }\n\n    public static deriveChildPkUnhardened(\n        publicKey: JacobianPoint,\n        index: number\n    ): JacobianPoint {\n        return deriveChildG1Unhardened(publicKey, index);\n    }\n}\n","import { mod, modNumber } from '../internal';\n\nexport type Endian = 'little' | 'big';\n\nexport function flip(binary: string): string {\n    return binary.replace(/[01]/g, (match) => (match === '0' ? '1' : '0'));\n}\n\nexport function intBitLength(value: number): number {\n    return Math.abs(value).toString(2).length;\n}\n\nexport function bigIntBitLength(value: bigint): number {\n    return (value < 0n ? -value : value).toString(2).length;\n}\n\nexport function bigIntToBits(i: bigint): number[] {\n    if (i < 1n) return [0];\n    const bits: Array<number> = [];\n    while (i !== 0n) {\n        bits.push(Number(mod(i, 2n)));\n        i /= 2n;\n    }\n    return bits.reverse();\n}\n\nexport function intToBits(i: number): number[] {\n    if (i < 1) return [0];\n    const bits: Array<number> = [];\n    while (i !== 0) {\n        bits.push(Number(modNumber(i, 2)));\n        i /= 2;\n    }\n    return bits.reverse();\n}\n\nexport function intToBytes(\n    value: number,\n    size: number,\n    endian: Endian,\n    signed: boolean = false\n): Uint8Array {\n    if (value < 0 && !signed)\n        throw new Error('Cannot convert negative number to unsigned.');\n    if (Math.floor(value) !== value)\n        throw new Error('Cannot convert floating point number.');\n    let binary = Math.abs(value)\n        .toString(2)\n        .padStart(size * 8, '0');\n    if (value < 0) {\n        binary = (parseInt(flip(binary), 2) + 1)\n            .toString(2)\n            .padStart(size * 8, '0');\n    }\n    var bytes = binary.match(/[01]{8}/g)!.map((match) => parseInt(match, 2));\n    if (endian === 'little') bytes.reverse();\n    return Uint8Array.from(bytes);\n}\n\nexport function bytesToInt(\n    bytes: Uint8Array,\n    endian: Endian,\n    signed: boolean = false\n): number {\n    if (bytes.length === 0) return 0;\n    const sign = bytes[endian === 'little' ? bytes.length - 1 : 0]\n        .toString(2)\n        .padStart(8, '0')[0];\n    const byteList = endian === 'little' ? bytes.reverse() : bytes;\n    let binary = '';\n    for (const byte of byteList) binary += byte.toString(2).padStart(8, '0');\n    if (sign === '1' && signed) {\n        binary = (parseInt(flip(binary), 2) + 1)\n            .toString(2)\n            .padStart(bytes.length * 8, '0');\n    }\n    const result = parseInt(binary, 2);\n    return sign === '1' && signed ? -result : result;\n}\n\nexport function encodeInt(value: number): Uint8Array {\n    if (value === 0) return Uint8Array.from([]);\n    const length = (intBitLength(value) + 8) >> 3;\n    let bytes = intToBytes(value, length, 'big', true);\n    while (\n        bytes.length > 1 &&\n        bytes[0] === ((bytes[1] & 0x80) !== 0 ? 0xff : 0)\n    )\n        bytes = bytes.slice(1);\n    return bytes;\n}\n\nexport function decodeInt(bytes: Uint8Array): number {\n    return bytesToInt(bytes, 'big', true);\n}\n\nexport function bigIntToBytes(\n    value: bigint,\n    size: number,\n    endian: Endian,\n    signed: boolean = false\n): Uint8Array {\n    if (value < 0n && !signed)\n        throw new Error('Cannot convert negative number to unsigned.');\n    let binary = (value < 0n ? -value : value)\n        .toString(2)\n        .padStart(size * 8, '0');\n    if (value < 0) {\n        binary = (BigInt('0b' + flip(binary)) + 1n)\n            .toString(2)\n            .padStart(size * 8, '0');\n    }\n    var bytes = binary.match(/[01]{8}/g)!.map((match) => parseInt(match, 2));\n    if (endian === 'little') bytes.reverse();\n    return Uint8Array.from(bytes);\n}\n\nexport function bytesToBigInt(\n    bytes: Uint8Array,\n    endian: Endian,\n    signed: boolean = false\n): bigint {\n    if (bytes.length === 0) return 0n;\n    const sign = bytes[endian === 'little' ? bytes.length - 1 : 0]\n        .toString(2)\n        .padStart(8, '0')[0];\n    const byteList = endian === 'little' ? bytes.reverse() : bytes;\n    let binary = '';\n    for (const byte of byteList) binary += byte.toString(2).padStart(8, '0');\n    if (sign === '1' && signed) {\n        binary = (BigInt('0b' + flip(binary)) + 1n)\n            .toString(2)\n            .padStart(bytes.length * 8, '0');\n    }\n    const result = BigInt('0b' + binary);\n    return sign === '1' && signed ? -result : result;\n}\n\nexport function encodeBigInt(value: bigint): Uint8Array {\n    if (value === 0n) return Uint8Array.from([]);\n    const length = (bigIntBitLength(value) + 8) >> 3;\n    let bytes = bigIntToBytes(value, length, 'big', true);\n    while (\n        bytes.length > 1 &&\n        bytes[0] === ((bytes[1] & 0x80) !== 0 ? 0xff : 0)\n    )\n        bytes = bytes.slice(1);\n    return bytes;\n}\n\nexport function decodeBigInt(bytes: Uint8Array): bigint {\n    return bytesToBigInt(bytes, 'big', true);\n}\n\nexport function concatBytes(...lists: Uint8Array[]): Uint8Array {\n    const bytes: Array<number> = [];\n    for (const list of lists) {\n        for (const byte of list) bytes.push(byte);\n    }\n    return Uint8Array.from(bytes);\n}\n\nexport function bytesEqual(a: Uint8Array, b: Uint8Array): boolean {\n    return (\n        a.length === b.length && a.findIndex((byte, i) => b[i] !== byte) === -1\n    );\n}\n\nconst HEX_STRINGS = '0123456789abcdef';\nconst MAP_HEX: Record<string, number> = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    a: 10,\n    b: 11,\n    c: 12,\n    d: 13,\n    e: 14,\n    f: 15,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n};\n\nexport function toHex(bytes: Uint8Array): string {\n    return Array.from(bytes)\n        .map((b) => HEX_STRINGS[b >> 4] + HEX_STRINGS[b & 15])\n        .join('');\n}\n\nexport function fromHex(hex: string): Uint8Array {\n    const bytes = new Uint8Array(Math.floor(hex.length / 2));\n    let i;\n    for (i = 0; i < bytes.length; i++) {\n        const a = MAP_HEX[hex[i * 2]];\n        const b = MAP_HEX[hex[i * 2 + 1]];\n        if (a === undefined || b === undefined) {\n            break;\n        }\n        bytes[i] = (a << 4) | b;\n    }\n    return i === bytes.length ? bytes : bytes.slice(0, i);\n}\n","import {\n    AffinePoint,\n    assert,\n    defaultEc,\n    defaultEcTwist,\n    EC,\n    Fq,\n    Fq2,\n    JacobianPoint,\n    mod,\n} from '../../internal';\n\nexport function yForX(x: Fq | Fq2, ec: EC = defaultEc): Fq | Fq2 {\n    const u = x.multiply(x).multiply(x).add(ec.a.multiply(x)).add(ec.b) as\n        | Fq\n        | Fq2;\n    const y = u.modSqrt();\n    if (y.equals(0n) || !new AffinePoint(x, y, false, ec).isOnCurve())\n        throw new Error('No y for point x.');\n    return y;\n}\n\nexport function scalarMultJacobian(\n    value: Fq | bigint,\n    point: JacobianPoint,\n    ec: EC = defaultEc\n): JacobianPoint {\n    if (value instanceof Fq) value = value.value;\n    let result = new JacobianPoint(\n        point.x.one(ec.q),\n        point.x.one(ec.q),\n        point.x.zero(ec.q),\n        true,\n        ec\n    );\n    if (point.isInfinity || mod(value, ec.q) === 0n) return result;\n    let addend = point;\n    while (value > 0n) {\n        if (value & 1n) result = result.add(addend);\n        addend = addend.add(addend);\n        value >>= 1n;\n    }\n    return result;\n}\n\nexport function evalIso(\n    P: JacobianPoint,\n    mapCoeffs: Fq2[][],\n    ec: EC\n): JacobianPoint {\n    const { x, y, z } = P;\n    const mapValues: Array<Fq2 | null> = [null, null, null, null];\n    let maxOrd = mapCoeffs[0].length;\n    for (const coeffs of mapCoeffs.slice(1))\n        maxOrd = Math.max(maxOrd, coeffs.length);\n    const zPows: Array<Fq2 | null> = [];\n    for (let i = 0; i < maxOrd; i++) zPows.push(null);\n    zPows[0] = z.pow(0n) as Fq2;\n    zPows[1] = z.pow(2n) as Fq2;\n    for (let i = 2; i < zPows.length; i++) {\n        assert(zPows[i - 1] !== null);\n        assert(zPows[1] !== null);\n        zPows[i] = zPows[i - 1]?.multiply(zPows[1]) as Fq2;\n    }\n    for (const [i, item] of mapCoeffs.entries()) {\n        const coeffsZ = item\n            .slice()\n            .reverse()\n            .map((item, i) => item.multiply(zPows[i]!));\n        let temp = coeffsZ[0];\n        for (const coeff of coeffsZ.slice(1)) {\n            temp = temp.multiply(x);\n            temp = temp.add(coeff);\n        }\n        mapValues[i] = temp as Fq2;\n    }\n    assert(mapCoeffs[1].length + 1 === mapCoeffs[0].length);\n    assert(zPows[1] !== null);\n    assert(mapValues[1] !== null);\n    mapValues[1] = mapValues[1]?.multiply(zPows[1]) as Fq2;\n    assert(mapValues[2] !== null);\n    assert(mapValues[3] !== null);\n    mapValues[2] = mapValues[2]!.multiply(y) as Fq2;\n    mapValues[3] = mapValues[3]!.multiply(z.pow(3n)) as Fq2;\n    const Z = mapValues[1].multiply(mapValues[3]);\n    const X = mapValues[0]!.multiply(mapValues[3]).multiply(Z);\n    const Y = mapValues[2].multiply(mapValues[1]).multiply(Z).multiply(Z);\n    return new JacobianPoint(\n        X as Fq | Fq2,\n        Y as Fq | Fq2,\n        Z as Fq | Fq2,\n        P.isInfinity,\n        ec\n    );\n}\n\nexport function signFq(element: Fq, ec: EC = defaultEc): boolean {\n    return element.gt(new Fq(ec.q, (ec.q - 1n) / 2n));\n}\n\nexport function signFq2(element: Fq2, ec: EC = defaultEcTwist): boolean {\n    if (element.elements[1].equals(new Fq(ec.q, 0n)))\n        return signFq(element.elements[0]);\n    return element.elements[1].gt(new Fq(ec.q, (ec.q - 1n) / 2n));\n}\n","import {\n    assert,\n    bigIntToBytes,\n    bytesEqual,\n    bytesToBigInt,\n    HashInfo,\n    mod,\n    q,\n    sha256,\n} from '../../internal';\n\nexport function I2OSP(value: bigint, length: number): Uint8Array {\n    if (value < 0n || value >= 1n << (8n * BigInt(length)))\n        throw new Error(`Bad I2OSP call: value=${value}, length=${length}.`);\n    const bytes: Array<number> = [];\n    for (let i = 0; i < length; i++) bytes.push(0);\n    let tempValue = value;\n    for (let i = length - 1; i >= 0; i--) {\n        bytes[i] = Number(tempValue & 0xffn);\n        tempValue >>= 8n;\n    }\n    const result = Uint8Array.from(bytes);\n    const toBytesValue = bigIntToBytes(value, length, 'big');\n    assert(bytesEqual(result, toBytesValue));\n    return result;\n}\n\nexport function OS2IP(octets: Uint8Array): bigint {\n    let result = 0n;\n    for (const octet of octets) {\n        result <<= 8n;\n        result += BigInt(octet);\n    }\n    assert(result === bytesToBigInt(octets, 'big'));\n    return result;\n}\n\nexport function bytesXor(a: Uint8Array, b: Uint8Array): Uint8Array {\n    return Uint8Array.from(a.map((element, i) => element ^ b[i]));\n}\n\nexport function expandMessageXmd(\n    message: Uint8Array,\n    dst: Uint8Array,\n    length: number,\n    hash: HashInfo\n): Uint8Array {\n    const ell = Math.trunc((length + hash.byteSize - 1) / hash.byteSize);\n    if (ell > 255)\n        throw new Error(`Bad expandMessageXmd call: ell=${ell} out of range.`);\n    const dst_prime = [...dst, ...I2OSP(BigInt(dst.length), 1)];\n    const Z_pad = I2OSP(0n, hash.blockSize);\n    const lib_str = I2OSP(BigInt(length), 2);\n    const b_0 = hash.convert(\n        Uint8Array.from([\n            ...Z_pad,\n            ...message,\n            ...lib_str,\n            ...I2OSP(0n, 1),\n            ...dst_prime,\n        ])\n    );\n    const bValues: Array<Uint8Array> = [];\n    bValues.push(\n        hash.convert(Uint8Array.from([...b_0, ...I2OSP(1n, 1), ...dst_prime]))\n    );\n    for (let i = 1; i <= ell; i++) {\n        bValues.push(\n            hash.convert(\n                Uint8Array.from([\n                    ...bytesXor(b_0, bValues[i - 1]),\n                    ...I2OSP(BigInt(i + 1), 1),\n                    ...dst_prime,\n                ])\n            )\n        );\n    }\n    const pseudoRandomBytes: Array<number> = [];\n    for (const item of bValues) pseudoRandomBytes.push(...item);\n    return Uint8Array.from(pseudoRandomBytes.slice(0, length));\n}\n\nexport function expandMessageXof(\n    message: Uint8Array,\n    dst: Uint8Array,\n    length: number,\n    hash: HashInfo\n): Uint8Array {\n    const dst_prime = [...dst, ...I2OSP(BigInt(dst.length), 1)];\n    const message_prime = [\n        ...message,\n        ...I2OSP(BigInt(length), 2),\n        ...dst_prime,\n    ];\n    return hash.convert(Uint8Array.from(message_prime)).slice(0, length);\n}\n\nexport function hashToField(\n    message: Uint8Array,\n    count: number,\n    dst: Uint8Array,\n    modulus: bigint,\n    degree: number,\n    byteLength: number,\n    expand: (\n        message: Uint8Array,\n        dst: Uint8Array,\n        length: number,\n        hash: HashInfo\n    ) => Uint8Array,\n    hash: HashInfo\n): bigint[][] {\n    const lengthInBytes = count * degree * byteLength;\n    const pseudoRandomBytes = expand(message, dst, lengthInBytes, hash);\n    const uValues: Array<Array<bigint>> = [];\n    for (let i = 0; i < count; i++) {\n        const eValues: Array<bigint> = [];\n        for (let j = 0; j < degree; j++) {\n            const elmOffset = byteLength * (j + i * degree);\n            const tv = pseudoRandomBytes.slice(\n                elmOffset,\n                elmOffset + byteLength\n            );\n            eValues.push(mod(OS2IP(tv), modulus));\n        }\n        uValues.push(eValues);\n    }\n    return uValues;\n}\n\nexport function Hp(\n    message: Uint8Array,\n    count: number,\n    dst: Uint8Array\n): bigint[][] {\n    return hashToField(message, count, dst, q, 1, 64, expandMessageXmd, sha256);\n}\n\nexport function Hp2(\n    message: Uint8Array,\n    count: number,\n    dst: Uint8Array\n): bigint[][] {\n    return hashToField(message, count, dst, q, 2, 64, expandMessageXmd, sha256);\n}\n","import {\n    bytesToBigInt,\n    defaultEc,\n    extractExpand,\n    hash256,\n    intToBytes,\n    JacobianPoint,\n    mod,\n    PrivateKey,\n} from '../../internal';\n\nexport function keyGen(seed: Uint8Array): PrivateKey {\n    const length = 48;\n    const okm = extractExpand(\n        length,\n        Uint8Array.from([...seed, 0]),\n        new TextEncoder().encode('BLS-SIG-KEYGEN-SALT-'),\n        Uint8Array.from([0, length])\n    );\n    return new PrivateKey(mod(bytesToBigInt(okm, 'big'), defaultEc.n));\n}\n\nexport function ikmToLamportSk(ikm: Uint8Array, salt: Uint8Array): Uint8Array {\n    return extractExpand(32 * 255, ikm, salt, Uint8Array.from([]));\n}\n\nexport function parentSkToLamportPk(\n    parentSk: PrivateKey,\n    index: number\n): Uint8Array {\n    const salt = intToBytes(index, 4, 'big');\n    const ikm = parentSk.toBytes();\n    const notIkm = Uint8Array.from(ikm.map((e) => e ^ 0xff));\n    const lamport0 = ikmToLamportSk(ikm, salt);\n    const lamport1 = ikmToLamportSk(notIkm, salt);\n    const lamportPk: Array<number> = [];\n    for (let i = 0; i < 255; i++)\n        lamportPk.push(...hash256(lamport0.slice(i * 32, (i + 1) * 32)));\n    for (let i = 0; i < 255; i++)\n        lamportPk.push(...hash256(lamport1.slice(i * 32, (i + 1) * 32)));\n    return hash256(Uint8Array.from(lamportPk));\n}\n\nexport function deriveChildSk(parentSk: PrivateKey, index: number): PrivateKey {\n    return keyGen(parentSkToLamportPk(parentSk, index));\n}\n\nexport function deriveChildSkUnhardened(\n    parentSk: PrivateKey,\n    index: number\n): PrivateKey {\n    const hash = hash256(\n        Uint8Array.from([\n            ...parentSk.getG1().toBytes(),\n            ...intToBytes(index, 4, 'big'),\n        ])\n    );\n    return PrivateKey.aggregate([PrivateKey.fromBytes(hash), parentSk]);\n}\n\nexport function deriveChildG1Unhardened(\n    parentPk: JacobianPoint,\n    index: number\n): JacobianPoint {\n    const hash = hash256(\n        Uint8Array.from([...parentPk.toBytes(), ...intToBytes(index, 4, 'big')])\n    );\n    return parentPk.add(\n        JacobianPoint.generateG1().multiply(PrivateKey.fromBytes(hash).value)\n    );\n}\n\nexport function deriveChildG2Unhardened(\n    parentPk: JacobianPoint,\n    index: number\n): JacobianPoint {\n    const hash = hash256(\n        Uint8Array.from([...parentPk.toBytes(), ...intToBytes(index, 4, 'big')])\n    );\n    return parentPk.add(\n        JacobianPoint.generateG2().multiply(PrivateKey.fromBytes(hash).value)\n    );\n}\n","import SHA from 'jssha';\nimport { assert } from '../../internal';\n\nexport const blockSize = 32;\n\nexport function extract(salt: Uint8Array, ikm: Uint8Array): Uint8Array {\n    const hash = new SHA('SHA-256', 'UINT8ARRAY', {\n        hmacKey: { format: 'UINT8ARRAY', value: salt },\n    });\n    hash.update(ikm);\n    return hash.getHash('UINT8ARRAY');\n}\n\nexport function expand(\n    length: number,\n    prk: Uint8Array,\n    info: Uint8Array\n): Uint8Array {\n    const blocks = Math.ceil(length / blockSize);\n    let bytesWritten = 0;\n    const okm: Array<number> = [];\n    let temp = Uint8Array.from([]);\n    for (let i = 1; i <= blocks; i++) {\n        temp = extract(\n            prk,\n            Uint8Array.from(i === 1 ? [...info, 1] : [...temp, ...info, i])\n        );\n        let toWrite = length - bytesWritten;\n        if (toWrite > blockSize) toWrite = blockSize;\n        okm.push(...temp.slice(0, toWrite));\n        bytesWritten += toWrite;\n    }\n    assert(bytesWritten === length);\n    return Uint8Array.from(okm);\n}\n\nexport function extractExpand(\n    length: number,\n    key: Uint8Array,\n    salt: Uint8Array,\n    info: Uint8Array\n): Uint8Array {\n    return expand(length, extract(salt, key), info);\n}\n","import SHA from 'jssha';\nexport const hmacBlockSize = 64;\n\nexport function hash256(message: Uint8Array): Uint8Array {\n    const hash = new SHA('SHA-256', 'UINT8ARRAY');\n    hash.update(message);\n    return hash.getHash('UINT8ARRAY');\n}\n\nexport function hash512(message: Uint8Array): Uint8Array {\n    return Uint8Array.from([\n        ...hash256(Uint8Array.from([...message, 0])),\n        ...hash256(Uint8Array.from([...message, 1])),\n    ]);\n}\n\nexport function hmac256(message: Uint8Array, k: Uint8Array): Uint8Array {\n    if (k.length > hmacBlockSize) k = hash256(k);\n    while (k.length < hmacBlockSize) k = Uint8Array.from([...k, 0]);\n    const kopad: Array<number> = [];\n    for (let i = 0; i < hmacBlockSize; i++) kopad.push(k[i] ^ 0x5c);\n    const kipad: Array<number> = [];\n    for (let i = 0; i < hmacBlockSize; i++) kipad.push(k[i] ^ 0x36);\n    return hash256(\n        Uint8Array.from([\n            ...kopad,\n            ...hash256(Uint8Array.from([...kipad, ...message])),\n        ])\n    );\n}\n","export function modPow(base: bigint, exponent: bigint, modulo: bigint): bigint {\n    if (exponent < 1n) return 1n;\n    else if (base < 0n || base > modulo) base = mod(base, modulo);\n    let result = 1n;\n    while (exponent > 0n) {\n        if ((exponent & 1n) > 0n) result = mod(result * base, modulo);\n        exponent >>= 1n;\n        base = mod(base * base, modulo);\n    }\n    return result;\n}\n\nexport function mod(value: bigint, modulus: bigint): bigint {\n    return ((value % modulus) + modulus) % modulus;\n}\n\nexport function modNumber(value: number, modulus: number): number {\n    return ((value % modulus) + modulus) % modulus;\n}\n","import {\n    assert,\n    defaultEcTwist,\n    Ell2p_a,\n    Ell2p_b,\n    etas,\n    evalIso,\n    Fq,\n    Fq2,\n    hEff,\n    Hp2,\n    JacobianPoint,\n    mod,\n    q,\n    rootsOfUnity,\n    xden,\n    xi_2,\n    xnum,\n    yden,\n    ynum,\n} from '../../internal';\n\nexport function sgn0(x: Fq2): bigint {\n    const sign0 = mod(x.elements[0].value, 2n) === 1n;\n    const zero0 = x.elements[0].value === 0n;\n    const sign1 = mod(x.elements[1].value, 2n) === 1n;\n    return sign0 || (zero0 && sign1) ? 1n : 0n;\n}\n\nexport function osswu2Help(t: Fq2): JacobianPoint {\n    const numDenCommon = xi_2\n        .pow(2n)\n        .multiply(t.pow(4n))\n        .add(xi_2.multiply(t.pow(2n)));\n    const x0_num = Ell2p_b.multiply(numDenCommon.add(new Fq(q, 1n)));\n    let x0_den = Ell2p_a.negate().multiply(numDenCommon);\n    x0_den = x0_den.equals(0n) ? Ell2p_a.multiply(xi_2) : x0_den;\n    const gx0_den = x0_den.pow(3n);\n    const gx0_num = Ell2p_b.multiply(gx0_den)\n        .add(Ell2p_a.multiply(x0_num).multiply(x0_den.pow(2n)))\n        .add(x0_num.pow(3n));\n    let temp1 = gx0_den.pow(7n);\n    const temp2 = gx0_num.multiply(temp1);\n    temp1 = temp1.multiply(temp2).multiply(gx0_den);\n    let sqrtCandidate = temp2.multiply(temp1.pow((q ** 2n - 9n) / 16n));\n    for (const root of rootsOfUnity) {\n        let y0 = sqrtCandidate.multiply(root) as Fq2;\n        if (y0.pow(2n).multiply(gx0_den).equals(gx0_num)) {\n            if (sgn0(y0) !== sgn0(t)) y0 = y0.negate();\n            assert(sgn0(y0) === sgn0(t));\n            return new JacobianPoint(\n                x0_num.multiply(x0_den) as Fq | Fq2,\n                y0.multiply(x0_den.pow(3n)) as Fq | Fq2,\n                x0_den as Fq | Fq2,\n                false,\n                defaultEcTwist\n            );\n        }\n    }\n    const x1_num = xi_2.multiply(t.pow(2n)).multiply(x0_num);\n    const x1_den = x0_den;\n    const gx1_num = xi_2.pow(3n).multiply(t.pow(6n)).multiply(gx0_num);\n    const gx1_den = gx0_den;\n    sqrtCandidate = sqrtCandidate.multiply(t.pow(3n));\n    for (const eta of etas) {\n        let y1 = eta.multiply(sqrtCandidate) as Fq2;\n        if (y1.pow(2n).multiply(gx1_den).equals(gx1_num)) {\n            if (sgn0(y1) !== sgn0(t)) y1 = y1.negate();\n            assert(sgn0(y1) === sgn0(t));\n            return new JacobianPoint(\n                x1_num.multiply(x1_den) as Fq | Fq2,\n                y1.multiply(x1_den.pow(3n)) as Fq | Fq2,\n                x1_den as Fq | Fq2,\n                false,\n                defaultEcTwist\n            );\n        }\n    }\n    throw new Error('Bad osswu2Help.');\n}\n\nexport function iso3(P: JacobianPoint): JacobianPoint {\n    return evalIso(P, [xnum, xden, ynum, yden], defaultEcTwist);\n}\n\nexport function optSwu2Map(t: Fq2, t2?: Fq2): JacobianPoint {\n    let Pp = iso3(osswu2Help(t));\n    if (t2) {\n        const Pp2 = iso3(osswu2Help(t2));\n        Pp = Pp.add(Pp2);\n    }\n    return Pp.multiply(hEff);\n}\n\nexport function g2Map(alpha: Uint8Array, dst: Uint8Array): JacobianPoint {\n    const elements = Hp2(alpha, 2, dst).map((hh) => {\n        const items = hh.map((value) => new Fq(q, value));\n        return new Fq2(q, items[0], items[1]);\n    });\n    return optSwu2Map(elements[0], elements[1]);\n}\n","import {\n    AffinePoint,\n    bigIntToBits,\n    defaultEc,\n    EC,\n    Fq,\n    Fq12,\n    Fq2,\n    JacobianPoint,\n} from '../../internal';\n\nexport function doubleLineEval(\n    R: AffinePoint,\n    P: AffinePoint,\n    ec: EC = defaultEc\n): Fq | Fq2 {\n    const R12 = R.untwist();\n    const slope = new Fq(ec.q, 3n)\n        .multiply(R12.x.pow(2n).add(ec.a))\n        .divide(R12.y.multiply(new Fq(ec.q, 2n)));\n    const v = R12.y.subtract(R12.x.multiply(slope));\n    return P.y.subtract(P.x.multiply(slope)).subtract(v) as Fq | Fq2;\n}\n\nexport function addLineEval(\n    R: AffinePoint,\n    Q: AffinePoint,\n    P: AffinePoint\n): Fq | Fq2 {\n    const R12 = R.untwist();\n    const Q12 = Q.untwist();\n    if (R12.equals(Q12.negate())) return P.x.subtract(R12.x) as Fq | Fq2;\n    const slope = Q12.y.subtract(R12.y).divide(Q12.x.subtract(R12.x));\n    const v = Q12.y\n        .multiply(R12.x)\n        .subtract(R12.y.multiply(Q12.x))\n        .divide(R12.x.subtract(Q12.x));\n    return P.y.subtract(P.x.multiply(slope)).subtract(v) as Fq | Fq2;\n}\n\nexport function millerLoop(\n    T: bigint,\n    P: AffinePoint,\n    Q: AffinePoint,\n    ec: EC = defaultEc\n): Fq12 {\n    const T_bits = bigIntToBits(T);\n    let R = Q;\n    let f = Fq12.nil.one(ec.q);\n    for (let i = 1; i < T_bits.length; i++) {\n        const lrr = doubleLineEval(R, P, ec);\n        f = f.multiply(f).multiply(lrr) as Fq12;\n        R = R.multiply(new Fq(ec.q, 2n));\n        if (T_bits[i] === 1) {\n            const lrq = addLineEval(R, Q, P);\n            f = f.multiply(lrq) as Fq12;\n            R = R.add(Q);\n        }\n    }\n    return f;\n}\n\nexport function finalExponentiation(element: Fq12, ec: EC = defaultEc): Fq12 {\n    if (ec.k === 12n) {\n        let ans = element.pow((ec.q ** 4n - ec.q ** 2n + 1n) / ec.n);\n        ans = ans.qiPower(2).multiply(ans) as Fq12;\n        ans = ans.qiPower(6).divide(ans) as Fq12;\n        return ans;\n    } else return element.pow((ec.q ** ec.k - 1n) / ec.n);\n}\n\nexport function atePairing(\n    P: JacobianPoint,\n    Q: JacobianPoint,\n    ec: EC = defaultEc\n): Fq12 {\n    const t = defaultEc.x + 1n;\n    let T = t - 1n;\n    T = T < 0n ? -T : T;\n    return finalExponentiation(millerLoop(T, P.toAffine(), Q.toAffine()), ec);\n}\n\nexport function atePairingMulti(\n    Ps: JacobianPoint[],\n    Qs: JacobianPoint[],\n    ec: EC = defaultEc\n): Fq12 {\n    const t = defaultEc.x + 1n;\n    let T = t - 1n;\n    T = T < 0n ? -T : T;\n    let prod = Fq12.nil.one(ec.q);\n    for (let i = 0; i < Qs.length; i++) {\n        prod = prod.multiply(\n            millerLoop(T, Ps[i].toAffine(), Qs[i].toAffine(), ec)\n        ) as Fq12;\n    }\n    return finalExponentiation(prod, ec);\n}\n","import {\n    assert,\n    atePairingMulti,\n    defaultEc,\n    Fq12,\n    g2Map,\n    JacobianPoint,\n    PrivateKey,\n} from '../../internal';\n\nexport function coreSignMpl(\n    sk: PrivateKey,\n    message: Uint8Array,\n    dst: Uint8Array\n): JacobianPoint {\n    return g2Map(message, dst).multiply(sk.value);\n}\n\nexport function coreVerifyMpl(\n    pk: JacobianPoint,\n    message: Uint8Array,\n    signature: JacobianPoint,\n    dst: Uint8Array\n): boolean {\n    if (!signature.isValid() || !pk.isValid()) return false;\n    const q = g2Map(message, dst);\n    const one = Fq12.nil.one(defaultEc.q);\n    const pairingResult = atePairingMulti(\n        [pk, JacobianPoint.generateG1().negate()],\n        [q, signature]\n    );\n    return pairingResult.equals(one);\n}\n\nexport function coreAggregateMpl(signatures: JacobianPoint[]): JacobianPoint {\n    if (!signatures.length)\n        throw new Error('Must aggregate at least 1 signature.');\n    let aggregate = signatures[0];\n    assert(aggregate.isValid());\n    for (const signature of signatures.slice(1)) {\n        assert(signature.isValid());\n        aggregate = aggregate.add(signature);\n    }\n    return aggregate;\n}\n\nexport function coreAggregateVerify(\n    pks: JacobianPoint[],\n    ms: Uint8Array[],\n    signature: JacobianPoint,\n    dst: Uint8Array\n): boolean {\n    if (pks.length !== ms.length || !pks.length) return false;\n    if (!signature.isValid()) return false;\n    const qs = [signature];\n    const ps = [JacobianPoint.generateG1().negate()];\n    for (let i = 0; i < pks.length; i++) {\n        if (!pks[i].isValid()) return false;\n        qs.push(g2Map(ms[i], dst));\n        ps.push(pks[i]);\n    }\n    return Fq12.nil.one(defaultEc.q).equals(atePairingMulti(ps, qs));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;ACIO,MAAeA,yCAAA;;;ACYf,MAAeC,yCAAA,UAAqC,GAAAD,yCAAI;;EAGpDE,QAAA;EACAC,SAAA;EAEPC,YAAYC,CAAgB,EAAEH,QAAa,EAAE;IACzC,KAAK;SADUG,CAAA,GAAAA,CAAA;IAEf,IAAI,CAACH,QAAQ,GAAGA,QAAA;IAChB,IAAI,CAACC,SAAS,GAAGD,QAAQ,CAAC,EAAE;EAChC;EAIOI,kBAAkBD,CAAS,EAAEH,QAAa,EAAQ;IACrD,OAAO,IAAI,CAACK,SAAS,CAACF,CAAA,EAAGH,QAAA,EAAUM,QAAQ,CAAC,IAAI,CAACC,IAAI;EACzD;EAEOD,SAASC,IAAO,EAAQ;IAC3B,IAAI,CAACA,IAAI,GAAGA,IAAA;IACZ,OAAO,IAAI;EACf;EAEOC,UAAUL,CAAS,EAAEM,KAAiB,EAAQ;IACjD,MAAMC,MAAA,GAAS,IAAI,CAACC,SAAS,GAAG;IAChC,IAAIF,KAAA,CAAMC,MAAM,KAAKA,MAAA,EACjB,MAAM,IAAIE,UAAA,CAAW,YAAYF,MAAA,SAAe;IAEpD,MAAMG,YAAA,GAAe,MAAM,IAAI,CAACF,SAAS,GAAG,IAAI,CAACX,QAAQ,CAACU,MAAM,CAAD;IAC/D,MAAMV,QAAA,GAA8B,EAAE;IACtC,KAAK,IAAIc,CAAA,GAAI,GAAGA,CAAA,GAAI,IAAI,CAACd,QAAQ,CAACU,MAAM,EAAEI,CAAA,IACtCd,QAAA,CAASe,IAAI,CACTN,KAAA,CAAMO,KAAK,CAACF,CAAA,GAAID,YAAA,EAAc,CAACC,CAAA,GAAI,KAAKD,YAAA;IAGhD,OAAO,IAAK,IAAI,CAACX,WAAW,CACxBC,CAAA,KACGH,QAAA,CACEiB,OAAO,GACPC,GAAG,CAAET,KAAA,IAAU,IAAI,CAACR,SAAS,CAACO,SAAS,CAACL,CAAA,EAAGM,KAAA;EAExD;EAEOU,QAAQhB,CAAS,EAAEiB,GAAW,EAAQ;IACzC,OAAO,IAAI,CAACZ,SAAS,CAACL,CAAA,EAAG,IAAAkB,yCAAM,EAAED,GAAA;EACrC;EAEOE,OAAOnB,CAAS,EAAEoB,EAAM,EAAQ;IACnC,MAAMC,CAAA,GAAI,IAAI,CAACvB,SAAS,CAACqB,MAAM,CAACnB,CAAA,EAAGoB,EAAA;IACnC,MAAME,CAAA,GAAI,IAAI,CAACxB,SAAS,CAACyB,IAAI,CAACvB,CAAA;IAC9B,MAAMH,QAAA,GAAqB,EAAE;IAC7B,KAAK,IAAIc,CAAA,GAAI,GAAGA,CAAA,GAAI,IAAI,CAACd,QAAQ,CAACU,MAAM,EAAEI,CAAA,IACtCd,QAAA,CAASe,IAAI,CAACD,CAAA,KAAM,IAAIU,CAAA,GAAIC,CAAA;IAChC,MAAME,MAAA,GAAS,IAAI,CAACtB,SAAS,CAACF,CAAA,EAAGH,QAAA;IACjC,IAAI,IAAI,aAAY,GAAA4B,yCAAE,GAAGD,MAAA,CAAOpB,IAAI,GAAG,KAAI,GAAAsB,yCAAC,EAAE1B,CAAA,EAAG,CAAC,EAAE,OAC/C,IAAI,IAAI,aAAY,GAAA2B,yCAAE,GACvBH,MAAA,CAAOpB,IAAI,GAAG,KAAI,GAAAqB,yCAAE,EAAEzB,CAAA,EAAG,IAAA0B,yCAAC,EAAEE,GAAG,CAACC,GAAG,CAAC7B,CAAA,GAAI,IAAA0B,yCAAC,EAAEE,GAAG,CAACC,GAAG,CAAC7B,CAAA,QAClD,IAAI,IAAI,aAAY,GAAA8B,yCAAG,GACxBN,MAAA,CAAOpB,IAAI,GAAG,KAAI,GAAAuB,yCAAE,EAChB3B,CAAA,EACA,IAAAyB,yCAAE,EAAEG,GAAG,CAACL,IAAI,CAACvB,CAAA,GACb,IAAAyB,yCAAE,EAAEG,GAAG,CAACC,GAAG,CAAC7B,CAAA,GACZ,IAAAyB,yCAAE,EAAEG,GAAG,CAACL,IAAI,CAACvB,CAAA;IAErB,OAAOwB,MAAA;EACX;EAEOD,KAAKvB,CAAS,EAAQ;IACzB,OAAO,IAAI,CAACmB,MAAM,CAACnB,CAAA,EAAG,KAAI,GAAA0B,yCAAC,EAAE1B,CAAA,EAAG,EAAE;EACtC;EAEO6B,IAAI7B,CAAS,EAAQ;IACxB,OAAO,IAAI,CAACmB,MAAM,CAACnB,CAAA,EAAG,KAAI,GAAA0B,yCAAC,EAAE1B,CAAA,EAAG,EAAE;EACtC;EAEO+B,MAAA,EAAc;IACjB,OAAO,IAAI,CAAC9B,iBAAiB,CACzB,IAAI,CAACD,CAAC,EACN,IAAI,CAACH,QAAQ,CAACkB,GAAG,CAAEiB,OAAA,IAAYA,OAAA,CAAQD,KAAK;EAEpD;EAEOE,QAAA,EAAsB;IACzB,MAAM3B,KAAA,GAAuB,EAAE;IAC/B,KAAK,IAAIK,CAAA,GAAI,IAAI,CAACd,QAAQ,CAACU,MAAM,GAAG,GAAGI,CAAA,IAAK,GAAGA,CAAA,IAC3CL,KAAA,CAAMM,IAAI,IAAI,IAAI,CAACf,QAAQ,CAACc,CAAA,CAAE,CAACsB,OAAO;IAE1C,OAAOC,UAAA,CAAWC,IAAI,CAAC7B,KAAA;EAC3B;EAEO8B,OAAA,EAAkB;IACrB,OAAO,IAAI,CAACvC,QAAQ,CAACwC,SAAS,CAAEL,OAAA,IAAY,CAACA,OAAA,CAAQI,MAAM,QAAQ;EACvE;EAEOE,MAAA,EAAgB;IACnB,OAAO,IAAAC,yCAAI,EAAE,IAAI,CAACN,OAAO;EAC7B;EAEOO,SAAA,EAAmB;IACtB,OAAO,KAAK,IAAI,CAAChC,SAAS,IAAI,IAAI,CAACX,QAAQ,CAAC4C,IAAI,CAAC,QAAQ;EAC7D;EAEOC,OAAA,EAAe;IAClB,OAAO,IAAI,CAACzC,iBAAiB,CACzB,IAAI,CAACD,CAAC,EACN,IAAI,CAACH,QAAQ,CAACkB,GAAG,CAAEiB,OAAA,IAAYA,OAAA,CAAQU,MAAM;EAErD;EAEOC,QAAQhC,CAAS,EAAQ;IAC5B,IAAI,IAAI,CAACX,CAAC,KAAI,GAAA4C,yCAAA,GAAG,MAAM,KAAI,GAAAC,yCAAY,EAAE;IACzClC,CAAA,GAAI,IAAAmC,yCAAQ,EAAEnC,CAAA,EAAG,IAAI,CAACH,SAAS;IAC/B,IAAIG,CAAA,KAAM,GAAG,OAAO,IAAI;IACxB,OAAO,IAAI,CAACV,iBAAiB,CACzB,IAAI,CAACD,CAAC,EACN,IAAI,CAACH,QAAQ,CAACkB,GAAG,CAAC,CAACiB,OAAA,EAASe,KAAA,KACxBA,KAAA,KAAU,IACJf,OAAA,CAAQW,OAAO,CAAChC,CAAA,IAChBqB,OAAA,CACKW,OAAO,CAAChC,CAAA,EACRqC,QAAQ,CAAC,IAAAC,yCAAW,EAAE,IAAI,CAACzC,SAAS,EAAEG,CAAA,EAAGoC,KAAA;EAGhE;EAEOG,IAAIC,QAAgB,EAAQ;IAC/B,IAAAC,yCAAK,EAAED,QAAA,IAAY,EAAE;IACrB,IAAI3B,MAAA,GAAS,IAAI,CAACK,GAAG,CAAC,IAAI,CAAC7B,CAAC,EAAEG,QAAQ,CAAC,IAAI,CAACC,IAAI;IAChD,IAAIiD,IAAA,GAAoB,IAAI;IAC5B,OAAOF,QAAA,IAAY,EAAE,EAAE;MACnB,IAAIA,QAAA,GAAW,EAAE,EAAE3B,MAAA,GAASA,MAAA,CAAOwB,QAAQ,CAACK,IAAA;MAC5CA,IAAA,GAAOA,IAAA,CAAKL,QAAQ,CAACK,IAAA;MACrBF,QAAA,KAAa,EAAE;IACnB;IACA,OAAO3B,MAAA;EACX;EAEO8B,MAAMC,KAAwB,EAAQ;IACzC,IAAI1D,QAAA;IACJ,IAAI0D,KAAA,YAAiB3D,yCAAA,IAAY2D,KAAA,YAAiB,IAAI,CAACxD,WAAW,EAC9DF,QAAA,GAAW0D,KAAA,CAAM1D,QAAQ,MACtB;MACH,IAAI,OAAO0D,KAAA,KAAU,YAAYA,KAAA,CAAM/C,SAAS,GAAG,IAAI,CAACA,SAAS,EAC7D,MAAM,KAAI,GAAAqC,yCAAY,EAClB;MAERhD,QAAA,GAAW,IAAI,CAACA,QAAQ,CAACkB,GAAG,CAAC,MAAM,IAAI,CAACjB,SAAS,CAACyB,IAAI,CAAC,IAAI,CAACvB,CAAC;MAC7DH,QAAQ,CAAC,EAAE,GAAGA,QAAQ,CAAC,EAAE,CAAC2D,GAAG,CAACD,KAAA;IAClC;IACA,OAAO,IAAI,CAACtD,iBAAiB,CACzB,IAAI,CAACD,CAAC,EACN,IAAI,CAACH,QAAQ,CAACkB,GAAG,CAAC,CAACiB,OAAA,EAASrB,CAAA,KAAMqB,OAAA,CAAQwB,GAAG,CAAC3D,QAAQ,CAACc,CAAA,CAAE;EAEjE;EAEO8C,aAAaF,KAAwB,EAAQ;IAChD,IAAI,OAAOA,KAAA,KAAU,UACjB,OAAO,IAAI,CAACtD,iBAAiB,CACzB,IAAI,CAACD,CAAC,EACN,IAAI,CAACH,QAAQ,CAACkB,GAAG,CAAEiB,OAAA,IAAYA,OAAA,CAAQgB,QAAQ,CAACO,KAAA,SAEjD,IAAI,IAAI,CAAC/C,SAAS,GAAG+C,KAAA,CAAM/C,SAAS,EACvC,MAAM,KAAI,GAAAqC,yCAAY,EAAE;IAC5B,MAAMhD,QAAA,GAAW,IAAI,CAACA,QAAQ,CAACkB,GAAG,CAAC,MAAM,IAAI,CAACjB,SAAS,CAACyB,IAAI,CAAC,IAAI,CAACvB,CAAC;IACnE,KAAK,MAAM,CAACW,CAAA,EAAG+C,CAAA,CAAE,IAAI,IAAI,CAAC7D,QAAQ,CAAC8D,OAAO,IAAI;MAC1C,IACIJ,KAAA,YAAiB3D,yCAAA,IACjB2D,KAAA,CAAM/C,SAAS,KAAK,IAAI,CAACA,SAAS,EACpC;QACE,KAAK,MAAM,CAACoD,CAAA,EAAGvC,CAAA,CAAE,IAAIkC,KAAA,CAAM1D,QAAQ,CAAC8D,OAAO,IACvC,IAAID,CAAA,CAAEtB,MAAM,MAAMf,CAAA,CAAEe,MAAM,IAAI;UAC1B,MAAMW,KAAA,GAAQ,IAAAD,yCAAQ,EAAEnC,CAAA,GAAIiD,CAAA,EAAG,IAAI,CAAC/D,QAAQ,CAACU,MAAM;UACnD,IAAII,CAAA,GAAIiD,CAAA,IAAK,IAAI,CAAC/D,QAAQ,CAACU,MAAM,EAC7BV,QAAQ,CAACkD,KAAA,CAAM,GAAGlD,QAAQ,CAACkD,KAAA,CAAM,CAACS,GAAG,CACjCE,CAAA,CAAEV,QAAQ,CAAC3B,CAAA,EAAG2B,QAAQ,CAAC,IAAI,CAAC5C,IAAI,QAGpCP,QAAQ,CAACkD,KAAA,CAAM,GAAGlD,QAAQ,CAACkD,KAAA,CAAM,CAACS,GAAG,CACjCE,CAAA,CAAEV,QAAQ,CAAC3B,CAAA;QAGvB;MAER,OAAO,IAAIqC,CAAA,CAAEtB,MAAM,IAAIvC,QAAQ,CAACc,CAAA,CAAE,GAAG+C,CAAA,CAAEV,QAAQ,CAACO,KAAA;IACpD;IACA,OAAO,IAAI,CAACtD,iBAAiB,CAAC,IAAI,CAACD,CAAC,EAAEH,QAAA;EAC1C;EAEOgE,SAASN,KAAwB,EAAsB;IAC1D,OAAO,IAAI,CAACC,GAAG,CAAC,OAAOD,KAAA,KAAU,WAAW,CAACA,KAAA,GAAQA,KAAA,CAAMb,MAAM;EACrE;EAEOoB,OAAOP,KAAwB,EAAsB;IACxD,OAAO,IAAI,CAACP,QAAQ,CAChB,OAAOO,KAAA,KAAU,WAAW,CAACA,KAAA,GAAQA,KAAA,CAAMQ,OAAO;EAE1D;EAEOC,QAAQT,KAAwB,EAAW;IAC9C,IAAI,EAAEA,KAAA,YAAiB3D,yCAAA,IAAY2D,KAAA,YAAiB,IAAI,CAACxD,WAAW,CAAD,EAAI;MACnE,IACI,OAAOwD,KAAA,KAAU,YAChBA,KAAA,YAAiB3D,yCAAA,IAAY,IAAI,CAACY,SAAS,GAAG+C,KAAA,CAAM/C,SAAS,EAChE;QACE,KAAK,IAAIG,CAAA,GAAI,GAAGA,CAAA,GAAI,IAAI,CAACd,QAAQ,CAACU,MAAM,EAAEI,CAAA,IAAK;UAC3C,IAAI,CAAC,IAAI,CAACd,QAAQ,CAACc,CAAA,CAAE,CAACsD,MAAM,CAAC,IAAI,CAAC7D,IAAI,CAACmB,IAAI,CAAC,IAAI,CAACvB,CAAC,IAC9C,OAAO;QACf;QACA,OAAO,IAAI,CAACH,QAAQ,CAAC,EAAE,CAACoE,MAAM,CAACV,KAAA;MACnC;MACA,MAAM,KAAI,GAAAV,yCAAY,EAAE;IAC5B,OACI,OACI,IAAI,CAAChD,QAAQ,CAACwC,SAAS,CACnB,CAACL,OAAA,EAASrB,CAAA,KAAM,CAACqB,OAAA,CAAQiC,MAAM,CAACV,KAAA,CAAM1D,QAAQ,CAACc,CAAA,CAAE,OAC/C,MAAM,IAAI,CAACX,CAAC,KAAKuD,KAAA,CAAMvD,CAAC;EAE1C;EAEOkE,GAAGX,KAAW,EAAW;IAC5B,KAAK,IAAI5C,CAAA,GAAI,IAAI,CAACd,QAAQ,CAACU,MAAM,GAAG,GAAGI,CAAA,IAAK,GAAGA,CAAA,IAAK;MAChD,MAAMwD,CAAA,GAAI,IAAI,CAACtE,QAAQ,CAACc,CAAA,CAAE;MAC1B,MAAMyD,CAAA,GAAIb,KAAA,CAAM1D,QAAQ,CAACc,CAAA,CAAE;MAC3B,IAAIwD,CAAA,CAAED,EAAE,CAACE,CAAA,GAAI,OAAO,UACf,IAAID,CAAA,CAAEE,EAAE,CAACD,CAAA,GAAI,OAAO;IAC7B;IACA,OAAO;EACX;EAEOC,GAAGd,KAAW,EAAW;IAC5B,KAAK,IAAI5C,CAAA,GAAI,IAAI,CAACd,QAAQ,CAACU,MAAM,GAAG,GAAGI,CAAA,IAAK,GAAGA,CAAA,IAAK;MAChD,MAAMwD,CAAA,GAAI,IAAI,CAACtE,QAAQ,CAACc,CAAA,CAAE;MAC1B,MAAMyD,CAAA,GAAIb,KAAA,CAAM1D,QAAQ,CAACc,CAAA,CAAE;MAC3B,IAAIwD,CAAA,CAAEE,EAAE,CAACD,CAAA,GAAI,OAAO,UACf,IAAID,CAAA,CAAED,EAAE,CAACE,CAAA,GAAI,OAAO;IAC7B;IACA,OAAO;EACX;EAEOE,KAAKf,KAAW,EAAW;IAC9B,OAAO,IAAI,CAACW,EAAE,CAACX,KAAA,KAAU,IAAI,CAACU,MAAM,CAACV,KAAA;EACzC;EAEOgB,KAAKhB,KAAW,EAAW;IAC9B,OAAO,IAAI,CAACc,EAAE,CAACd,KAAA,KAAU,IAAI,CAACU,MAAM,CAACV,KAAA;EACzC;EAEOC,IAAID,KAAwB,EAAsB;IACrD,IAAI;MACA,OAAO,IAAI,CAACD,KAAK,CAACC,KAAA;IACtB,EAAE,OAAOiB,KAAA,EAAO;MACZ,IAAI,EAAEA,KAAA,aAAiB,GAAA3B,yCAAY,MAAM,OAAOU,KAAA,KAAU,UACtD,MAAMiB,KAAA;MACV,OAAOjB,KAAA,CAAMD,KAAK,CAAC,IAAI;IAC3B;EACJ;EAEON,SAASO,KAAwB,EAAsB;IAC1D,IAAI;MACA,OAAO,IAAI,CAACE,YAAY,CAACF,KAAA;IAC7B,EAAE,OAAOiB,KAAA,EAAO;MACZ,IAAI,EAAEA,KAAA,aAAiB,GAAA3B,yCAAY,MAAM,OAAOU,KAAA,KAAU,UACtD,MAAMiB,KAAA;MACV,OAAOjB,KAAA,CAAME,YAAY,CAAC,IAAI;IAClC;EACJ;EAEOQ,OAAOV,KAAwB,EAAW;IAC7C,IAAI;MACA,OAAO,IAAI,CAACS,OAAO,CAACT,KAAA;IACxB,EAAE,OAAOiB,KAAA,EAAO;MACZ,IAAI,EAAEA,KAAA,aAAiB,GAAA3B,yCAAY,IAAI,MAAM2B,KAAA;MAC7C,OAAO,OAAOjB,KAAA,KAAU,WAAW,QAAQA,KAAA,CAAMS,OAAO,CAAC,IAAI;IACjE;EACJ;AACJ;;;ACvRO,MAAMtC,yCAAA,UAAW,GAAA/B,yCAAI;;EACxB,OAAciC,GAAA,GAAM,IAAIF,yCAAA,CAAG,EAAE,EAAE,EAAE;EAE1BlB,SAAA;EACA+C,KAAA;EAEPxD,YAAYC,CAAgB,EAAEuD,KAAa,EAAE;IACzC,KAAK;SADUvD,CAAA,GAAAA,CAAA;SAHZQ,SAAA,GAAY;IAKf,IAAI,CAAC+C,KAAK,GAAG,IAAAkB,yCAAE,EAAElB,KAAA,EAAOvD,CAAA;EAC5B;EAEOK,UAAUL,CAAS,EAAEM,KAAiB,EAAQ;IACjD,IAAIA,KAAA,CAAMC,MAAM,KAAK,IAAI,MAAM,IAAIE,UAAA,CAAW;IAC9C,OAAO,IAAIiB,yCAAA,CAAG1B,CAAA,EAAG,IAAA0E,yCAAY,EAAEpE,KAAA,EAAO;EAC1C;EAEOU,QAAQhB,CAAS,EAAEiB,GAAW,EAAQ;IACzC,OAAOS,yCAAA,CAAGE,GAAG,CAACvB,SAAS,CAACL,CAAA,EAAG,IAAAkB,yCAAM,EAAED,GAAA;EACvC;EAEOE,OAAOwD,EAAU,EAAEvD,EAAQ,EAAQ;IACtC,OAAOA,EAAA;EACX;EAEOG,KAAKvB,CAAS,EAAQ;IACzB,OAAO,IAAI0B,yCAAA,CAAG1B,CAAA,EAAG,EAAE;EACvB;EAEO6B,IAAI7B,CAAS,EAAQ;IACxB,OAAO,IAAI0B,yCAAA,CAAG1B,CAAA,EAAG,EAAE;EACvB;EAEO+B,MAAA,EAAc;IACjB,OAAO,IAAIL,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,IAAI,CAACuD,KAAK;EACpC;EAEOtB,QAAA,EAAsB;IACzB,OAAO,IAAA2C,yCAAY,EAAE,IAAI,CAACrB,KAAK,EAAE,IAAI;EACzC;EAEOnB,OAAA,EAAkB;IACrB,OAAO;EACX;EAEOE,MAAA,EAAgB;IACnB,OAAO,IAAAC,yCAAI,EAAE,IAAI,CAACN,OAAO;EAC7B;EAEOO,SAAA,EAAmB;IACtB,MAAMvB,GAAA,GAAM,IAAI,CAACsC,KAAK,CAACf,QAAQ,CAAC;IAChC,OAAO,QACHvB,GAAA,CAAIV,MAAM,GAAG,KACP,GAAGU,GAAA,CAAIJ,KAAK,CAAC,GAAG,OAAOI,GAAA,CAAIJ,KAAK,CAACI,GAAA,CAAIV,MAAM,GAAG,IAAI,GAClDU,GAAA,GACP;EACP;EAEOyB,OAAA,EAAe;IAClB,OAAO,IAAIhB,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,CAAC,IAAI,CAACuD,KAAK;EACrC;EAEOQ,QAAA,EAAgB;IACnB,IAAIc,EAAA,GAAK,EAAE;MACPC,EAAA,GAAK,EAAE;MACPC,EAAA,GAAK,EAAE;MACPC,EAAA,GAAK,EAAE;IACX,IAAIb,CAAA,GAAI,IAAI,CAACnE,CAAC;IACd,IAAIoE,CAAA,GAAI,IAAI,CAACb,KAAK;IAClB,OAAOY,CAAA,IAAK,EAAE,EAAE;MACZ,MAAMc,CAAA,GAAIb,CAAA,GAAID,CAAA;MACd,MAAMe,KAAA,GAAQd,CAAA;MACdA,CAAA,GAAID,CAAA;MACJA,CAAA,GAAI,IAAAM,yCAAE,EAAES,KAAA,EAAOf,CAAA;MACf,MAAMgB,OAAA,GAAUN,EAAA;MAChBA,EAAA,GAAKC,EAAA;MACLA,EAAA,GAAKK,OAAA,GAAUF,CAAA,GAAIH,EAAA;MACnB,MAAMM,OAAA,GAAUL,EAAA;MAChBA,EAAA,GAAKC,EAAA;MACLA,EAAA,GAAKI,OAAA,GAAUH,CAAA,GAAID,EAAA;IACvB;IACA,OAAO,IAAItD,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE6E,EAAA;EAC1B;EAEOlC,QAAQ0C,EAAU,EAAQ;IAC7B,OAAO,IAAI;EACf;EAEOnC,IAAIC,QAAgB,EAAQ;IAC/B,OACIA,QAAA,KAAa,EAAE,GACT,IAAIzB,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,EAAE,IACjBmD,QAAA,KAAa,EAAE,GACf,IAAIzB,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,IAAI,CAACuD,KAAK,IACzB,IAAAkB,yCAAE,EAAEtB,QAAA,EAAU,EAAE,MAAM,EAAE,GACxB,IAAIzB,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,IAAI,CAACuD,KAAK,GAAG,IAAI,CAACA,KAAK,EAAEL,GAAG,CAACC,QAAA,GAAW,EAAE,IACzD,IAAIzB,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,IAAI,CAACuD,KAAK,GAAG,IAAI,CAACA,KAAK,EACjCL,GAAG,CAACC,QAAA,GAAW,EAAE,EACjBH,QAAQ,CAAC,IAAI;EAEhC;EAEOM,MAAMC,KAAwB,EAAQ;IACzC,IAAI,OAAOA,KAAA,KAAU,UACjB,OAAO,IAAI7B,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,IAAI,CAACuD,KAAK,GAAGA,KAAA,OAClC,IAAIA,KAAA,YAAiB7B,yCAAA,EACtB,OAAO,IAAIA,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,IAAI,CAACuD,KAAK,GAAGA,KAAA,CAAMA,KAAK,OAC7C,MAAM,KAAI,GAAAV,yCAAY,EAAE;EACjC;EAEOY,aAAaF,KAAwB,EAAQ;IAChD,IAAI,OAAOA,KAAA,KAAU,UACjB,OAAO,IAAI7B,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,IAAI,CAACuD,KAAK,GAAGA,KAAA,OAClC,IAAIA,KAAA,YAAiB7B,yCAAA,EACtB,OAAO,IAAIA,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,IAAI,CAACuD,KAAK,GAAGA,KAAA,CAAMA,KAAK,OAE9C,MAAM,KAAI,GAAAV,yCAAY,EAClB;EAEZ;EAEOgB,SAASN,KAAwB,EAAQ;IAC5C,OAAO,IAAI,CAACC,GAAG,CACX,OAAOD,KAAA,KAAU,WAAW,CAACA,KAAA,GAAQA,KAAA,CAAMb,MAAM;EAEzD;EAEOoB,OAAOP,KAAwB,EAAQ;IAC1C,OAAO,IAAI,CAACP,QAAQ,CAChB,CAAC,OAAOO,KAAA,KAAU,WACZ,IAAI7B,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAEuD,KAAA,IACfA,KAAI,EACRQ,OAAO;EAEjB;EAEOC,QAAQT,KAAwB,EAAW;IAC9C,OACIA,KAAA,YAAiB7B,yCAAA,IACjB,IAAI,CAAC6B,KAAK,KAAKA,KAAA,CAAMA,KAAK,IAC1B,IAAI,CAACvD,CAAC,KAAKuD,KAAA,CAAMvD,CAAC;EAE1B;EAEOkE,GAAGX,KAAS,EAAW;IAC1B,OAAO,IAAI,CAACA,KAAK,GAAGA,KAAA,CAAMA,KAAK;EACnC;EAEOc,GAAGd,KAAS,EAAW;IAC1B,OAAO,IAAI,CAACA,KAAK,GAAGA,KAAA,CAAMA,KAAK;EACnC;EAEOe,KAAKf,KAAS,EAAW;IAC5B,OAAO,IAAI,CAACW,EAAE,CAACX,KAAA,KAAU,IAAI,CAACU,MAAM,CAACV,KAAA;EACzC;EAEOgB,KAAKhB,KAAS,EAAW;IAC5B,OAAO,IAAI,CAACc,EAAE,CAACd,KAAA,KAAU,IAAI,CAACU,MAAM,CAACV,KAAA;EACzC;EAEO+B,QAAA,EAAc;IACjB,IAAI,IAAI,CAAC/B,KAAK,KAAK,EAAE,EACjB,OAAO,IAAI7B,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,EAAE,OACrB,IAAI,IAAAuF,wCAAK,EAAE,IAAI,CAAChC,KAAK,EAAE,CAAC,IAAI,CAACvD,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAACA,CAAC,KAAK,EAAE,EAC3D,MAAM,IAAIwF,KAAA,CAAM,wBACb,IAAI,IAAAf,yCAAE,EAAE,IAAI,CAACzE,CAAC,EAAE,EAAE,MAAM,EAAE,EAC7B,OAAO,IAAI0B,yCAAA,CACP,IAAI,CAAC1B,CAAC,EACN,IAAAuF,wCAAK,EAAE,IAAI,CAAChC,KAAK,EAAE,CAAC,IAAI,CAACvD,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAACA,CAAC,QAE9C,IAAI,IAAAyE,yCAAE,EAAE,IAAI,CAACzE,CAAC,EAAE,EAAE,MAAM,EAAE,EAC7B,OAAO,IAAI0B,yCAAA,CACP,IAAI,CAAC1B,CAAC,EACN,IAAAuF,wCAAK,EAAE,IAAI,CAAChC,KAAK,EAAE,CAAC,IAAI,CAACvD,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAACA,CAAC;IAGrD,IAAIyF,CAAA,GAAI,EAAE;IACV,IAAIR,CAAA,GAAI,IAAI,CAACjF,CAAC,GAAG,EAAE;IACnB,OAAO,IAAAyE,yCAAE,EAAEQ,CAAA,EAAG,EAAE,MAAM,EAAE,EAAE;MACtBA,CAAA,IAAK,EAAE;MACPQ,CAAA;IACJ;IACA,IAAInE,CAAA,GAAI,EAAE;IACV,KAAK,IAAIX,CAAA,GAAI,EAAE,EAAEA,CAAA,GAAI,IAAI,CAACX,CAAC,EAAEW,CAAA,IAAK,EAAE,EAAE;MAClC,MAAM+E,KAAA,GAAQ,IAAAH,wCAAK,EAAE5E,CAAA,EAAG,CAAC,IAAI,CAACX,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAACA,CAAC;MAClD,IAAI0F,KAAA,KAAU,IAAAjB,yCAAE,EAAE,CAAC,EAAE,EAAE,IAAI,CAACzE,CAAC,GAAG;QAC5BsB,CAAA,GAAIX,CAAA;QACJ;MACJ;IACJ;IACA,IAAIgF,CAAA,GAAIF,CAAA;IACR,IAAIG,CAAA,GAAI,IAAAL,wCAAK,EAAEjE,CAAA,EAAG2D,CAAA,EAAG,IAAI,CAACjF,CAAC;IAC3B,IAAI6F,CAAA,GAAI,IAAAN,wCAAK,EAAE,IAAI,CAAChC,KAAK,EAAE0B,CAAA,EAAG,IAAI,CAACjF,CAAC;IACpC,IAAI8F,CAAA,GAAI,IAAAP,wCAAK,EAAE,IAAI,CAAChC,KAAK,EAAE,CAAC0B,CAAA,GAAI,EAAE,IAAI,EAAE,EAAE,IAAI,CAACjF,CAAC;IAChD,OAAO,MAAM;MACT,IAAI6F,CAAA,KAAM,EAAE,EAAE,OAAO,IAAInE,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE,EAAE,OACjC,IAAI6F,CAAA,KAAM,EAAE,EAAE,OAAO,IAAInE,yCAAA,CAAG,IAAI,CAAC1B,CAAC,EAAE8F,CAAA;MACzC,IAAInF,CAAA,GAAI,EAAE;MACV,IAAIoF,CAAA,GAAIF,CAAA;MACR,OAAOE,CAAA,IAAK,EAAE,EAAE;QACZA,CAAA,GAAI,IAAAtB,yCAAE,EAAEsB,CAAA,IAAK,EAAE,EAAE,IAAI,CAAC/F,CAAC;QACvBW,CAAA;MACJ;MACA,MAAMyD,CAAA,GAAI,IAAAmB,wCAAK,EAAEK,CAAA,EAAG,IAAAL,wCAAK,EAAE,EAAE,EAAEI,CAAA,GAAIhF,CAAA,GAAI,EAAE,EAAE,IAAI,CAACX,CAAC,GAAG,IAAI,CAACA,CAAC;MAC1D2F,CAAA,GAAIhF,CAAA;MACJiF,CAAA,GAAI,IAAAnB,yCAAE,EAAEL,CAAA,IAAK,EAAE,EAAE,IAAI,CAACpE,CAAC;MACvB6F,CAAA,GAAI,IAAApB,yCAAE,EAAEoB,CAAA,GAAID,CAAA,EAAG,IAAI,CAAC5F,CAAC;MACrB8F,CAAA,GAAI,IAAArB,yCAAE,EAAEqB,CAAA,GAAI1B,CAAA,EAAG,IAAI,CAACpE,CAAC;IACzB;EACJ;EAEOwD,IAAID,KAAwB,EAAY;IAC3C,IAAI;MACA,OAAO,IAAI,CAACD,KAAK,CAACC,KAAA;IACtB,EAAE,OAAOiB,KAAA,EAAO;MACZ,IAAI,EAAEA,KAAA,aAAiB,GAAA3B,yCAAY,MAAM,OAAOU,KAAA,KAAU,UACtD,MAAMiB,KAAA;MACV,OAAOjB,KAAA,CAAMD,KAAK,CAAC,IAAI;IAC3B;EACJ;EAEON,SAASO,KAAwB,EAAY;IAChD,IAAI;MACA,OAAO,IAAI,CAACE,YAAY,CAACF,KAAA;IAC7B,EAAE,OAAOiB,KAAA,EAAO;MACZ,IAAI,EAAEA,KAAA,aAAiB,GAAA3B,yCAAY,MAAM,OAAOU,KAAA,KAAU,UACtD,MAAMiB,KAAA;MACV,OAAOjB,KAAA,CAAME,YAAY,CAAC,IAAI;IAClC;EACJ;EAEOQ,OAAOV,KAAwB,EAAW;IAC7C,IAAI;MACA,OAAO,IAAI,CAACS,OAAO,CAACT,KAAA;IACxB,EAAE,OAAOiB,KAAA,EAAO;MACZ,IAAI,EAAEA,KAAA,aAAiB,GAAA3B,yCAAY,IAAI,MAAM2B,KAAA;MAC7C,OAAO,OAAOjB,KAAA,KAAU,WAAW,QAAQA,KAAA,CAAMS,OAAO,CAAC,IAAI;IACjE;EACJ;AACJ;;;ACxPO,MAAMvC,yCAAA,UAAY,GAAA7B,yCAAO;EAC5B,OAAcgC,GAAA,GAAM,IAAIH,yCAAA,CAAI,EAAE,EAAE,IAAAC,yCAAC,EAAEE,GAAG,EAAE,IAAAF,yCAAC,EAAEE,GAAG;EAEvCpB,SAAA,GAAY;EACZJ,IAAA;EAEPL,YAAYC,CAAS,EAAE0D,CAAK,EAAErC,CAAK,EAAE;IACjC,KAAK,CAACrB,CAAA,EAAG,CAAC0D,CAAA,EAAGrC,CAAA,CAAE;IACf,IAAI,CAACjB,IAAI,GAAG,KAAI,GAAAsB,yCAAC,EAAE1B,CAAA,EAAG,CAAC,EAAE;EAC7B;EAEOE,UAAUF,CAAS,EAAEH,QAAc,EAAQ;IAC9C,OAAO,IAAI4B,yCAAA,CAAIzB,CAAA,EAAGH,QAAQ,CAAC,EAAE,EAAEA,QAAQ,CAAC,EAAE;EAC9C;EAEOkE,QAAA,EAAgB;IACnB,MAAM,CAACI,CAAA,EAAGC,CAAA,CAAE,GAAG,IAAI,CAACvE,QAAQ;IAC5B,MAAMmG,MAAA,GAAS7B,CAAA,CAAEnB,QAAQ,CAACmB,CAAA,EAAGX,GAAG,CAACY,CAAA,CAAEpB,QAAQ,CAACoB,CAAA,GAAIL,OAAO;IACvD,OAAO,IAAItC,yCAAA,CACP,IAAI,CAACzB,CAAC,EACNmE,CAAA,CAAEnB,QAAQ,CAACgD,MAAA,GACX5B,CAAA,CAAE1B,MAAM,GAAGM,QAAQ,CAACgD,MAAA;EAE5B;EAEOC,gBAAA,EAAwB;IAC3B,MAAM,CAAC9B,CAAA,EAAGC,CAAA,CAAE,GAAG,IAAI,CAACvE,QAAQ;IAC5B,OAAO,IAAI4B,yCAAA,CAAI,IAAI,CAACzB,CAAC,EAAEmE,CAAA,CAAEN,QAAQ,CAACO,CAAA,GAAUD,CAAA,CAAEX,GAAG,CAACY,CAAA;EACtD;EAEOkB,QAAA,EAAgB;IACnB,MAAM,CAACY,EAAA,EAAIC,EAAA,CAAG,GAAG,IAAI,CAACtG,QAAQ;IAC9B,IAAIsG,EAAA,CAAGlC,MAAM,CAAC,IAAI,CAACnE,SAAS,CAAC+B,GAAG,CAAC,IAAI,CAAC7B,CAAC,IACnC,OAAO,IAAI,CAACmB,MAAM,CAAC,IAAI,CAACnB,CAAC,EAAEkG,EAAA,CAAGZ,OAAO;IACzC,IAAIc,KAAA,GAAQF,EAAA,CAAGhD,GAAG,CAAC,EAAE,EAAEM,GAAG,CAAC2C,EAAA,CAAGjD,GAAG,CAAC,EAAE;IACpC,IAAImD,KAAA,GAAQD,KAAA,CAAMlD,GAAG,CAAC,CAAC,IAAI,CAAClD,CAAC,GAAG,EAAE,IAAI,EAAE;IACxC,IAAI,KAAI,GAAA0B,yCAAC,EAAE,IAAI,CAAC1B,CAAC,EAAE,CAAC,EAAE,EAAEiE,MAAM,CAACoC,KAAA,GAC3B,MAAM,IAAIb,KAAA,CAAM;IACpBY,KAAA,GAAQA,KAAA,CAAMd,OAAO;IACrB,IAAIgB,KAAA,GAAQJ,EAAA,CAAG1C,GAAG,CAAC4C,KAAA,EAAOpD,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAAC1B,CAAC,EAAE,EAAE,EAAE+D,OAAO;IAC7DsC,KAAA,GAAQC,KAAA,CAAMpD,GAAG,CAAC,CAAC,IAAI,CAAClD,CAAC,GAAG,EAAE,IAAI,EAAE;IACpC,IAAIqG,KAAA,CAAMpC,MAAM,CAAC,KAAI,GAAAvC,yCAAC,EAAE,IAAI,CAAC1B,CAAC,EAAE,CAAC,EAAE,IAC/BsG,KAAA,GAAQJ,EAAA,CACHrC,QAAQ,CAACuC,KAAA,EACTpD,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAAC1B,CAAC,EAAE,EAAE,EAAE+D,OAAO;IAC5C,MAAMc,EAAA,GAAKyB,KAAA,CAAMhB,OAAO;IACxB,MAAMR,EAAA,GAAKqB,EAAA,CAAGnD,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAAC1B,CAAC,EAAE,EAAE,EAAEgD,QAAQ,CAAC6B,EAAA,EAAId,OAAO;IAC9D,OAAO,IAAItC,yCAAA,CAAI,IAAI,CAACzB,CAAC,EAAE6E,EAAA,EAAIC,EAAA;EAC/B;AACJ;;;ACjDO,MAAMnD,yCAAA,UAAY,GAAA/B,yCAAO;EAC5B,OAAcgC,GAAA,GAAM,IAAID,yCAAA,CAAI,EAAE,EAAE,IAAAF,yCAAE,EAAEG,GAAG,EAAE,IAAAH,yCAAE,EAAEG,GAAG,EAAE,IAAAH,yCAAE,EAAEG,GAAG;EAElDpB,SAAA,GAAY;EACZJ,IAAA;EAEPL,YAAYC,CAAS,EAAE0D,CAAM,EAAErC,CAAM,EAAEC,CAAM,EAAE;IAC3C,KAAK,CAACtB,CAAA,EAAG,CAAC0D,CAAA,EAAGrC,CAAA,EAAGC,CAAA,CAAE;IAClB,IAAI,CAAClB,IAAI,GAAG,KAAI,GAAAqB,yCAAE,EAAEzB,CAAA,EAAG,IAAA0B,yCAAC,EAAEE,GAAG,CAACC,GAAG,CAAC7B,CAAA,GAAI,IAAA0B,yCAAC,EAAEE,GAAG,CAACC,GAAG,CAAC7B,CAAA;EACrD;EAEOE,UAAUF,CAAS,EAAEH,QAAe,EAAQ;IAC/C,OAAO,IAAI8B,yCAAA,CAAI3B,CAAA,EAAGH,QAAQ,CAAC,EAAE,EAAEA,QAAQ,CAAC,EAAE,EAAEA,QAAQ,CAAC,EAAE;EAC3D;EAEOkE,QAAA,EAAgB;IACnB,MAAM,CAACI,CAAA,EAAGC,CAAA,EAAGwB,CAAA,CAAE,GAAG,IAAI,CAAC/F,QAAQ;IAC/B,MAAM0G,EAAA,GAAKpC,CAAA,CAAEnB,QAAQ,CAACmB,CAAA,EAAGN,QAAQ,CAACO,CAAA,CAAEpB,QAAQ,CAAC4C,CAAA,CAAEK,eAAe;IAC9D,MAAMO,EAAA,GAAKZ,CAAC,CAAE5C,QAAQ,CAAC4C,CAAA,EAClBK,eAAe,GACfpC,QAAQ,CAACM,CAAA,CAAEnB,QAAQ,CAACoB,CAAA;IACzB,MAAMqC,EAAA,GAAKrC,CAAA,CAAEpB,QAAQ,CAACoB,CAAA,EAAGP,QAAQ,CAACM,CAAA,CAAEnB,QAAQ,CAAC4C,CAAA;IAC7C,MAAMI,MAAA,GAASO,EAAA,CACVvD,QAAQ,CAACmB,CAAA,EACTX,GAAG,CAACgD,EAAC,CAAGxD,QAAQ,CAAC4C,CAAA,EAAGpC,GAAG,CAACiD,EAAA,CAAGzD,QAAQ,CAACoB,CAAA,GAAY6B,eAAe,IAC/DlC,OAAO;IACZ,OAAO,IAAIpC,yCAAA,CACP,IAAI,CAAC3B,CAAC,EACNuG,EAAA,CAAGvD,QAAQ,CAACgD,MAAA,GACZQ,EAAA,CAAGxD,QAAQ,CAACgD,MAAA,GACZS,EAAA,CAAGzD,QAAQ,CAACgD,MAAA;EAEpB;EAEOC,gBAAA,EAAwB;IAC3B,MAAM,CAAC9B,CAAA,EAAGC,CAAA,EAAGwB,CAAA,CAAE,GAAG,IAAI,CAAC/F,QAAQ;IAC/B,OAAO,IAAI8B,yCAAA,CAAI,IAAI,CAAC3B,CAAC,EAAE4F,CAAA,CAAE5C,QAAQ,CAAC,IAAI,CAAC5C,IAAI,GAAU+D,CAAA,EAAGC,CAAA;EAC5D;AACJ;;;ACtCO,MAAMtC,yCAAA,UAAa,GAAAlC,yCAAO;EAC7B,OAAcgC,GAAA,GAAM,IAAIE,yCAAA,CAAK,EAAE,EAAE,IAAAH,yCAAE,EAAEC,GAAG,EAAE,IAAAD,yCAAE,EAAEC,GAAG;EAE1CpB,SAAA,GAAY;EACZJ,IAAA;EAEPL,YAAYC,CAAS,EAAE0D,CAAM,EAAErC,CAAM,EAAE;IACnC,KAAK,CAACrB,CAAA,EAAG,CAAC0D,CAAA,EAAGrC,CAAA,CAAE;IACf,IAAI,CAACjB,IAAI,GAAG,KAAI,GAAAuB,yCAAE,EACd3B,CAAA,EACA,IAAAyB,yCAAE,EAAEG,GAAG,CAACL,IAAI,CAACvB,CAAA,GACb,IAAAyB,yCAAE,EAAEG,GAAG,CAACC,GAAG,CAAC7B,CAAA,GACZ,IAAAyB,yCAAE,EAAEG,GAAG,CAACL,IAAI,CAACvB,CAAA;EAErB;EAEOE,UAAUF,CAAS,EAAEH,QAAe,EAAQ;IAC/C,OAAO,IAAIiC,yCAAA,CAAK9B,CAAA,EAAGH,QAAQ,CAAC,EAAE,EAAEA,QAAQ,CAAC,EAAE;EAC/C;EAEOkE,QAAA,EAAgB;IACnB,MAAM,CAACI,CAAA,EAAGC,CAAA,CAAE,GAAG,IAAI,CAACvE,QAAQ;IAC5B,MAAMmG,MAAA,GAAS7B,CAAA,CACVnB,QAAQ,CAACmB,CAAA,EACTN,QAAQ,CAACO,CAAC,CAAEpB,QAAQ,CAACoB,CAAA,EAAW6B,eAAe,IAC/ClC,OAAO;IACZ,OAAO,IAAIjC,yCAAA,CACP,IAAI,CAAC9B,CAAC,EACNmE,CAAA,CAAEnB,QAAQ,CAACgD,MAAA,GACX5B,CAAA,CAAE1B,MAAM,GAAGM,QAAQ,CAACgD,MAAA;EAE5B;AACJ;;;;;;;;;;;;;;;;;;;;AChCO,MAAMU,yCAAA,GAAI,CAAC,mBAAmB;AAC9B,MAAM9D,yCAAA,GACT,mGAAmG;AAChG,MAAM+D,yCAAA,GAAI,KAAI,GAAAjF,yCAAC,EAAEkB,yCAAA,EAAG,EAAE;AACtB,MAAMgE,yCAAA,GAAI,KAAI,GAAAlF,yCAAC,EAAEkB,yCAAA,EAAG,EAAE;AACtB,MAAMiE,yCAAA,GAAS,KAAI,GAAApF,yCAAE,EAAEmB,yCAAA,EAAG,KAAI,GAAAlB,yCAAC,EAAEkB,yCAAA,EAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,EAAEkB,yCAAA,EAAG,EAAE;AACrD,MAAMkE,yCAAA,GAAS,KAAI,GAAArF,yCAAE,EAAEmB,yCAAA,EAAG,KAAI,GAAAlB,yCAAC,EAAEkB,yCAAA,EAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,EAAEkB,yCAAA,EAAG,EAAE;AAErD,MAAMmE,yCAAA,GAAK,KAAI,GAAArF,yCAAC,EACnBkB,yCAAA,EACA,mGAAmG;AAGhG,MAAMoE,yCAAA,GAAK,KAAI,GAAAtF,yCAAC,EACnBkB,yCAAA,EACA,mGAAmG;AAGhG,MAAMqE,yCAAA,GAAM,KAAI,GAAAxF,yCAAE,EACrBmB,yCAAA,EACA,KAAI,GAAAlB,yCAAC,EACDkB,yCAAA,EACA,mHAAmH,GAEvH,KAAI,GAAAlB,yCAAC,EACDkB,yCAAA,EACA,oHAAoH;AAIrH,MAAMsE,yCAAA,GAAM,KAAI,GAAAzF,yCAAE,EACrBmB,yCAAA,EACA,KAAI,GAAAlB,yCAAC,EACDkB,yCAAA,EACA,oHAAoH,GAExH,KAAI,GAAAlB,yCAAC,EACDkB,yCAAA,EACA,mHAAmH;AAIpH,MAAMuE,yCAAA,GACT,mEAAmE;AAChE,MAAMC,yCAAA,GAAI,mCAAmC;AAC7C,MAAMC,yCAAA,GACT,kKAAkK;AAC/J,MAAMC,yCAAA,GAAI,GAAG;AACb,MAAMC,yCAAA,GACT,kGAAkG;AAC/F,MAAMC,yCAAA,GACT,iGAAiG;AAE9F,MAAMC,yCAAA,GAAgB;KACzB7E,yCAAA;KACA+D,yCAAA;KACAC,yCAAA;MACAG,yCAAA;MACAC,yCAAA;OACAC,yCAAA;OACAC,yCAAA;KACAC,yCAAA;KACAC,yCAAA;KACAV,yCAAA;KACAY,yCAAA;UACAC,yCAAA;cACAC;AACJ;AAEO,MAAME,yCAAA,GAAqB;KAC9B9E,yCAAA;EACAuB,CAAA,EAAG0C,yCAAA;EACHzC,CAAA,EAAG0C,yCAAA;MACHC,yCAAA;MACAC,yCAAA;OACAC,yCAAA;OACAC,yCAAA;KACAC,yCAAA;EACAQ,CAAA,EAAGN,yCAAA;KACHX,yCAAA;KACAY,yCAAA;UACAC,yCAAA;cACAC;AACJ;;;;ACnFO,MAAMI,yCAAA,GAAgE;EACzE,SAAS,KAAI,GAAAlG,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,CAAC,EAAE;EACtB,SAAS,KAAI,GAAAnB,yCAAE,GACX,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GACZ,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG;EAG3G,SAAS,KAAI,GAAAnB,yCAAE,GACX,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAEhB,SAAS,KAAI,GAAAnB,yCAAE,GACX,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mFAAmF,GAEvF,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAEhB,SAAS,KAAI,GAAAnB,yCAAE,GACX,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAEhB,SAAS,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAC/C,SAAS,KAAI,GAAAnB,yCAAE,GACX,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAEhB,SAAS,KAAI,GAAAnB,yCAAE,GACX,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAEhB,SAAS,KAAI,GAAAnB,yCAAE,GACX,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mFAAmF,GAEvF,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAEhB,SAAS,KAAI,GAAAnB,yCAAE,GACX,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GACZ,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mFAAmF;EAG3F,SAAS,KAAI,GAAAnB,yCAAE,GACX,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mFAAmF,GAEvF,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAEhB,UAAU,KAAI,GAAAjB,yCAAE,GACZ,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,iGAAiG,IAGzG,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,UAAU,KAAI,GAAAjB,yCAAE,GACZ,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mFAAmF,GAEvF,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IAEhB,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,UAAU,KAAI,GAAAjB,yCAAE,GACZ,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,kGAAkG,IAG1G,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,UAAU,KAAI,GAAAjB,yCAAE,GACZ,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mFAAmF,GAEvF,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IAEhB,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,UAAU,KAAI,GAAAjB,yCAAE,GACZ,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,kGAAkG,IAG1G,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,UAAU,KAAI,GAAAjB,yCAAE,GACZ,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IAEhB,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,UAAU,KAAI,GAAAjB,yCAAE,GACZ,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,iGAAiG,GAErG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,UAAU,KAAI,GAAAjB,yCAAE,GACZ,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IAEhB,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,UAAU,KAAI,GAAAjB,yCAAE,GACZ,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,kGAAkG,GAEtG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,WAAW,KAAI,GAAAjB,yCAAE,GACb,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IAEhB,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAE1C,WAAW,KAAI,GAAAjB,yCAAE,GACb,GAAAiB,yCAAA,GACA,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,kGAAkG,GAEtG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;AAE9C;AAEO,SAASK,0CACZzC,SAAiB,EACjBG,CAAS,EACToC,KAAa;EAEb,OAAO6E,yCAAU,CAAC,GAAGpH,SAAA,IAAaG,CAAA,IAAKoC,KAAA,EAAO,CAAC;AACnD;;;;ACnPO,MAAM8E,yCAAA,GAAmB;EAC5BC,QAAA,EAAU;EACVC,SAAA,EAAW;EACXC,OAAA,EAAUC,MAAA;IACN,MAAMC,IAAA,GAAO,KAAI,GAAAC,sBAAA,CAAAC,YAAA,CAAE,EAAE,WAAW;IAChCF,IAAA,CAAKG,MAAM,CAACJ,MAAA;IACZ,OAAOC,IAAA,CAAKI,OAAO,CAAC;EACxB;AACJ;AAEO,MAAMC,yCAAA,GAAmB;EAC5BT,QAAA,EAAU;EACVC,SAAA,EAAW;EACXC,OAAA,EAAUC,MAAA;IACN,MAAMC,IAAA,GAAO,KAAI,GAAAC,sBAAA,CAAAC,YAAA,CAAE,EAAE,WAAW;IAChCF,IAAA,CAAKG,MAAM,CAACJ,MAAA;IACZ,OAAOC,IAAA,CAAKI,OAAO,CAAC;EACxB;AACJ;;;;;;ACnBO,MAAME,wCAAA,GAAO,CAChB,KAAI,GAAA/G,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,kGAAkG,GAEtG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,kGAAkG,IAG1G,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GACZ,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,kGAAkG,IAG1G,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAEnB;AAEM,MAAM6F,yCAAA,GAAO,CAChB,KAAI,GAAAhH,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GACZ,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,IAAI,GACd,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GACzC;AAEM,MAAM8F,yCAAA,GAAO,CAChB,KAAI,GAAAjH,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GACZ,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,kGAAkG,IAG1G,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,kGAAkG,IAG1G,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAEnB;AAEM,MAAM+F,yCAAA,GAAO,CAChB,KAAI,GAAAlH,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,GAEvG,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GACZ,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GACF,GAAAmB,yCAAA,GACA,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,KAAK,GACf,KAAI,GAAAlB,yCAAC,GACD,GAAAkB,yCAAA,GACA,mGAAmG,IAG3G,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GACzC;;;;;;;;;;ACnIM,MAAMgG,yCAAA,GAAO,KAAI,GAAAnH,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,CAAC,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,CAAC,EAAE;AACrD,MAAMiG,yCAAA,GAAU,KAAI,GAAApH,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,IAAI;AACxD,MAAMkG,yCAAA,GAAU,KAAI,GAAArH,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,KAAK,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,KAAK;AAC5D,MAAMmG,yCAAA,GACT,kGAAkG;AAC/F,MAAMC,yCAAA,GACT,kGAAkG;AAC/F,MAAMC,yCAAA,GACT,kGAAkG;AAC/F,MAAMC,yCAAA,GACT,kGAAkG;AAC/F,MAAMC,yCAAA,GAAO,CAChB,KAAI,GAAA1H,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAGmG,yCAAA,GAAM,KAAI,GAAArH,yCAAC,GAAE,GAAAkB,yCAAA,GAAGoG,yCAAA,IACrC,KAAI,GAAAvH,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,IAAAA,yCAAA,IAAIoG,yCAAA,GAAM,KAAI,GAAAtH,yCAAC,GAAE,GAAAkB,yCAAA,GAAGmG,yCAAA,IACzC,KAAI,GAAAtH,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAGqG,yCAAA,GAAM,KAAI,GAAAvH,yCAAC,GAAE,GAAAkB,yCAAA,GAAGsG,yCAAA,IACrC,KAAI,GAAAzH,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,IAAAA,yCAAA,IAAIsG,yCAAA,GAAM,KAAI,GAAAxH,yCAAC,GAAE,GAAAkB,yCAAA,GAAGqG,yCAAA,GAC5C;;;;AChBM,MAAMG,yCAAA,GACT,kGAAkG;AAE/F,MAAMC,yCAAA,GAAe,CACxB,KAAI,GAAA5H,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE,IACtC,KAAI,GAAAnB,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAGwG,yCAAA,GAAM,KAAI,GAAA1H,yCAAC,GAAE,GAAAkB,yCAAA,GAAGwG,yCAAA,IACrC,KAAI,GAAA3H,yCAAE,GAAE,GAAAmB,yCAAA,GAAG,KAAI,GAAAlB,yCAAC,GAAE,GAAAkB,yCAAA,GAAGwG,yCAAA,GAAM,KAAI,GAAA1H,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,IAAAA,yCAAA,IAAIwG,yCAAA,GAC5C;;;;;;ACVM,MAAME,yCAAA,GAAiB,IAAIC,WAAA,GAAcC,MAAM,CAClD;AAEG,MAAMC,yCAAA,GAAe,IAAIF,WAAA,GAAcC,MAAM,CAChD;AAEG,MAAME,yCAAA,GAAe,IAAIH,WAAA,GAAcC,MAAM,CAChD;AAEG,MAAMG,yCAAA,GAAkB,IAAIJ,WAAA,GAAcC,MAAM,CACnD;;;ACEG,MAAMI,yCAAA;;;;;EACT7J,YACI2D,CAAkB,EAClBrC,CAAkB,EAClBwI,UAA0B,EAC1BC,EAAO,IAAS,GAAArC,yCAAQ,CAAC,EAC3B;SAJS/D,CAAA,GAAAA,CAAA;SACArC,CAAA,GAAAA,CAAA;SACAwI,UAAA,GAAAA,UAAA;SACAC,EAAA,GAAAA,EAAA;IAEP,IAAA1G,yCAAK,EAAEM,CAAA,YAAarC,CAAA,CAAEtB,WAAW;EACrC;EAEOgK,UAAA,EAAqB;IACxB,OACI,IAAI,CAACF,UAAU,IACf,IAAI,CAACxI,CAAC,CACD2B,QAAQ,CAAC,IAAI,CAAC3B,CAAC,EACf4C,MAAM,CACH,IAAI,CAACP,CAAC,CACDV,QAAQ,CAAC,IAAI,CAACU,CAAC,EACfV,QAAQ,CAAC,IAAI,CAACU,CAAC,EACfF,GAAG,CAAC,IAAI,CAACsG,EAAE,CAAC3F,CAAC,CAACnB,QAAQ,CAAC,IAAI,CAACU,CAAC,GAC7BF,GAAG,CAAC,IAAI,CAACsG,EAAE,CAAC1F,CAAC;EAGlC;EAEO4F,WAAA,EAA4B;IAC/B,OAAO,KAAI,GAAAC,yCAAY,EACnB,IAAI,CAACvG,CAAC,EACN,IAAI,CAACrC,CAAC,EACN,IAAI,CAACqC,CAAC,CAAC7B,GAAG,CAAC,IAAI,CAACiI,EAAE,CAAC7E,CAAC,GACpB,IAAI,CAAC4E,UAAU,EACf,IAAI,CAACC,EAAE;EAEf;EAEOI,MAAA,EAAqB;IACxB,MAAMnE,CAAA,GAAI,IAAAjE,yCAAG,EAAEF,GAAG,CAACC,GAAG,CAAC,IAAI,CAACiI,EAAE,CAAC7E,CAAC;IAChC,MAAMkF,GAAA,GAAM,KAAI,GAAArI,yCAAG,EAAE,IAAI,CAACgI,EAAE,CAAC7E,CAAC,EAAEc,CAAA,CAAE3F,IAAI,EAAE,IAAAuB,yCAAE,EAAEC,GAAG,CAACL,IAAI,CAAC,IAAI,CAACuI,EAAE,CAAC7E,CAAC;IAC9D,MAAMmF,GAAA,GAAM,KAAI,GAAAtI,yCAAG,EAAE,IAAI,CAACgI,EAAE,CAAC7E,CAAC,EAAE,IAAAtD,yCAAE,EAAEC,GAAG,CAACL,IAAI,CAAC,IAAI,CAACuI,EAAE,CAAC7E,CAAC,GAAGc,CAAA,CAAE3F,IAAI;IAC/D,OAAO,IAAIwJ,yCAAA,CACP,IAAI,CAAClG,CAAC,CAACV,QAAQ,CAACmH,GAAA,GAChB,IAAI,CAAC9I,CAAC,CAAC2B,QAAQ,CAACoH,GAAA,GAChB,OACA,IAAI,CAACN,EAAE;EAEf;EAEOO,QAAA,EAAuB;IAC1B,MAAMtE,CAAA,GAAI,IAAAjE,yCAAG,EAAEF,GAAG,CAACC,GAAG,CAAC,IAAI,CAACiI,EAAE,CAAC7E,CAAC;IAChC,MAAMkF,GAAA,GAAM,KAAI,GAAArI,yCAAG,EAAE,IAAI,CAACgI,EAAE,CAAC7E,CAAC,EAAEc,CAAA,CAAE3F,IAAI,EAAE,IAAAuB,yCAAE,EAAEC,GAAG,CAACL,IAAI,CAAC,IAAI,CAACuI,EAAE,CAAC7E,CAAC;IAC9D,MAAMmF,GAAA,GAAM,KAAI,GAAAtI,yCAAG,EAAE,IAAI,CAACgI,EAAE,CAAC7E,CAAC,EAAE,IAAAtD,yCAAE,EAAEC,GAAG,CAACL,IAAI,CAAC,IAAI,CAACuI,EAAE,CAAC7E,CAAC,GAAGc,CAAA,CAAE3F,IAAI;IAC/D,OAAO,IAAIwJ,yCAAA,CACP,IAAI,CAAClG,CAAC,CAACI,MAAM,CAACqG,GAAA,GACd,IAAI,CAAC9I,CAAC,CAACyC,MAAM,CAACsG,GAAA,GACd,OACA,IAAI,CAACN,EAAE;EAEf;EAEOQ,OAAA,EAAsB;IACzB,MAAMC,IAAA,GAAO,IAAI,CAAC7G,CAAC,CACdV,QAAQ,CAAC,IAAI,CAACU,CAAC,EACfV,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAACoI,EAAE,CAAC7E,CAAC,EAAE,EAAE,GAC7BzB,GAAG,CAAC,IAAI,CAACsG,EAAE,CAAC3F,CAAC;IAClB,MAAMqG,CAAA,GAAID,IAAA,CAAKzG,MAAM,CAAC,IAAI,CAACzC,CAAC,CAAC2B,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAACoI,EAAE,CAAC7E,CAAC,EAAE,EAAE;IAC1D,MAAMwF,IAAA,GAAOD,CAAA,CAAExH,QAAQ,CAACwH,CAAA,EAAG3G,QAAQ,CAAC,IAAI,CAACH,CAAC,EAAEG,QAAQ,CAAC,IAAI,CAACH,CAAC;IAC3D,MAAMgH,IAAA,GAAOF,CAAA,CAAExH,QAAQ,CAAC,IAAI,CAACU,CAAC,CAACG,QAAQ,CAAC4G,IAAA,GAAO5G,QAAQ,CAAC,IAAI,CAACxC,CAAC;IAC9D,OAAO,IAAIuI,yCAAA,CACPa,IAAA,EACAC,IAAA,EACA,OACA,IAAI,CAACZ,EAAE;EAEf;EAEOtG,IAAID,KAAkB,EAAe;IACxC,IAAAH,yCAAK,EAAE,IAAI,CAAC2G,SAAS;IACrB,IAAA3G,yCAAK,EAAEG,KAAA,CAAMwG,SAAS;IACtB,IAAI,IAAI,CAACF,UAAU,EAAE,OAAOtG,KAAA,MACvB,IAAIA,KAAA,CAAMsG,UAAU,EAAE,OAAO,IAAI,MACjC,IAAI,IAAI,CAAC5F,MAAM,CAACV,KAAA,GAAQ,OAAO,IAAI,CAAC+G,MAAM;IAC/C,MAAME,CAAA,GAAIjH,KAAA,CAAMlC,CAAC,CAACwC,QAAQ,CAAC,IAAI,CAACxC,CAAC,EAAEyC,MAAM,CAACP,KAAA,CAAMG,CAAC,CAACG,QAAQ,CAAC,IAAI,CAACH,CAAC;IACjE,MAAM+G,IAAA,GAAOD,CAAA,CAAExH,QAAQ,CAACwH,CAAA,EAAG3G,QAAQ,CAAC,IAAI,CAACH,CAAC,EAAEG,QAAQ,CAACN,KAAA,CAAMG,CAAC;IAC5D,MAAMgH,IAAA,GAAOF,CAAA,CAAExH,QAAQ,CAAC,IAAI,CAACU,CAAC,CAACG,QAAQ,CAAC4G,IAAA,GAAO5G,QAAQ,CAAC,IAAI,CAACxC,CAAC;IAC9D,OAAO,IAAIuI,yCAAA,CACPa,IAAA,EACAC,IAAA,EACA,OACA,IAAI,CAACZ,EAAE;EAEf;EAEOjG,SAASN,KAAkB,EAAe;IAC7C,OAAO,IAAI,CAACC,GAAG,CAACD,KAAA,CAAMb,MAAM;EAChC;EAEOM,SAASO,KAAkB,EAAe;IAC7C,OAAO,IAAAoH,yCAAiB,EAAEpH,KAAA,EAAO,IAAI,CAACyG,UAAU,IAAI,IAAI,CAACF,EAAE,EAAEc,QAAQ;EACzE;EAEOlI,OAAA,EAAsB;IACzB,OAAO,IAAIkH,yCAAA,CACP,IAAI,CAAClG,CAAC,EACN,IAAI,CAACrC,CAAC,CAACqB,MAAM,IACb,IAAI,CAACmH,UAAU,EACf,IAAI,CAACC,EAAE;EAEf;EAEO7F,OAAOV,KAAkB,EAAW;IACvC,OACI,IAAI,CAACG,CAAC,CAACO,MAAM,CAACV,KAAA,CAAMG,CAAC,KACrB,IAAI,CAACrC,CAAC,CAAC4C,MAAM,CAACV,KAAA,CAAMlC,CAAC,KACrB,IAAI,CAACwI,UAAU,KAAKtG,KAAA,CAAMsG,UAAU;EAE5C;EAEO9H,MAAA,EAAqB;IACxB,OAAO,IAAI6H,yCAAA,CACP,IAAI,CAAClG,CAAC,CAAC3B,KAAK,IACZ,IAAI,CAACV,CAAC,CAACU,KAAK,IACZ,IAAI,CAAC8H,UAAU,EACf,IAAI,CAACC,EAAE;EAEf;EAEOtH,SAAA,EAAmB;IACtB,OAAO,iBAAiB,IAAI,CAACkB,CAAC,OAAO,IAAI,CAACrC,CAAC,OAAO,IAAI,CAACwI,UAAU,GAAG;EACxE;AACJ;;;;AE3HO,MAAMI,yCAAA;;;;;;EACT,OAAc5J,UACVC,KAAiB,EACjBuK,WAAoB,EACpBf,EAAA,IAAS,GAAArC,yCAAQ,CAAC,EACL;IACb,MAAMqD,QAAA,GAAWD,WAAA,IAAc,GAAApJ,yCAAE,KAAI,GAAAC,yCAAC;IACtC,IAAImJ,WAAA,EAAa;MACb,IAAIvK,KAAA,CAAMC,MAAM,KAAK,IAAI,MAAM,IAAIiF,KAAA,CAAM;IAC7C,OAAO;MACH,IAAIlF,KAAA,CAAMC,MAAM,KAAK,IAAI,MAAM,IAAIiF,KAAA,CAAM;IAC7C;IACA,MAAMuF,KAAA,GAAQzK,KAAK,CAAC,EAAE,GAAG;IACzB,IAAI,CAAC,MAAM,MAAM,KAAK,CAAC0K,QAAQ,CAACD,KAAA,GAC5B,MAAM,IAAIvF,KAAA,CAAM;IACpB,MAAMyF,UAAA,GAAa,CAACF,KAAA,GAAQ,IAAG,MAAO;IACtC,MAAMG,QAAA,GAAW,CAACH,KAAA,GAAQ,IAAG,MAAO;IACpC,MAAMI,MAAA,GAAS,CAACJ,KAAA,GAAQ,IAAG,MAAO;IAClC,IAAI,CAACE,UAAA,EAAY,MAAM,IAAIzF,KAAA,CAAM;IACjClF,KAAK,CAAC,EAAE,IAAI;IACZ,IAAI4K,QAAA,EAAU;MACV,KAAK,MAAME,IAAA,IAAQ9K,KAAA,EAAO;QACtB,IAAI8K,IAAA,KAAS,GACT,MAAM,IAAI5F,KAAA,CACN;MAEZ;MACA,OAAO,KAAI,GAAAoE,yCAAU,EACjBkB,QAAA,CAASlJ,GAAG,CAACL,IAAI,CAACuI,EAAA,CAAG7E,CAAC,GACtB6F,QAAA,CAASlJ,GAAG,CAACL,IAAI,CAACuI,EAAA,CAAG7E,CAAC,GACtB,MACA6E,EAAA,EACFE,UAAU;IAChB;IACA,MAAMtG,CAAA,GAAI,CAACmH,WAAA,IAAc,GAAApJ,yCAAE,KAAI,GAAAC,yCAAC,GAAGE,GAAG,CAACvB,SAAS,CAACyJ,EAAA,CAAG7E,CAAC,EAAE3E,KAAA;IACvD,MAAM+K,MAAA,GAAS,IAAAC,yCAAI,EAAE5H,CAAA,EAAGoG,EAAA;IACxB,MAAMyB,IAAA,GAAOV,WAAA,GACP,IAAAW,yCAAM,EAAEH,MAAA,EAAevB,EAAA,IACvB,IAAA2B,yCAAK,EAAEJ,MAAA,EAAcvB,EAAA;IAC3B,MAAMzI,CAAA,GAAKkK,IAAA,KAASJ,MAAA,GAASE,MAAA,GAASA,MAAA,CAAO3I,MAAM;IACnD,OAAO,KAAI,GAAAkH,yCAAU,EAAElG,CAAA,EAAGrC,CAAA,EAAG,OAAOyI,EAAA,EAAIE,UAAU;EACtD;EAEA,OAAchJ,QACVC,GAAW,EACX4J,WAAoB,EACpBf,EAAA,IAAS,GAAArC,yCAAQ,CAAC,EACL;IACb,OAAOwC,yCAAA,CAAc5J,SAAS,CAAC,IAAAa,yCAAM,EAAED,GAAA,GAAM4J,WAAA,EAAaf,EAAA;EAC9D;EAEA,OAAc4B,WAAA,EAA4B;IACtC,OAAO,KAAI,GAAA9B,yCAAU,EACjB,IAAAnC,yCAAQ,EAAEkE,EAAE,EACZ,IAAAlE,yCAAQ,EAAEmE,EAAE,EACZ,QACA,GAAAnE,yCAAQ,GACVuC,UAAU;EAChB;EAEA,OAAc6B,WAAA,EAA4B;IACtC,OAAO,KAAI,GAAAjC,yCAAU,EACjB,IAAAlC,yCAAa,EAAEoE,GAAG,EAClB,IAAApE,yCAAa,EAAEqE,GAAG,EAClB,QACA,GAAArE,yCAAa,GACfsC,UAAU;EAChB;EAEA,OAAcgC,WAAWnB,WAAA,GAAuB,KAAK,EAAiB;IAClE,MAAMC,QAAA,GAAWD,WAAA,IAAc,GAAApJ,yCAAE,KAAI,GAAAC,yCAAC;IACtC,OAAO,IAAIuI,yCAAA,CACPa,QAAA,CAASlJ,GAAG,CAACL,IAAI,CAAC,IAAAkG,yCAAQ,EAAExC,CAAC,GAC7B6F,QAAA,CAASlJ,GAAG,CAACL,IAAI,CAAC,IAAAkG,yCAAQ,EAAExC,CAAC,GAC7B6F,QAAA,CAASlJ,GAAG,CAACL,IAAI,CAAC,IAAAkG,yCAAQ,EAAExC,CAAC,GAC7B,OACA,GAAAwC,yCAAQ;EAEhB;EAEA,OAAcwE,WAAWpB,WAAA,GAAuB,IAAI,EAAiB;IACjE,MAAMC,QAAA,GAAWD,WAAA,IAAc,GAAApJ,yCAAE,KAAI,GAAAC,yCAAC;IACtC,OAAO,IAAIuI,yCAAA,CACPa,QAAA,CAASlJ,GAAG,CAACL,IAAI,CAAC,IAAAmG,yCAAa,EAAEzC,CAAC,GAClC6F,QAAA,CAASlJ,GAAG,CAACL,IAAI,CAAC,IAAAmG,yCAAa,EAAEzC,CAAC,GAClC6F,QAAA,CAASlJ,GAAG,CAACL,IAAI,CAAC,IAAAmG,yCAAa,EAAEzC,CAAC,GAClC,OACA,GAAAyC,yCAAa;EAErB;EAEA,OAAcwE,YACV5L,KAAiB,EACjBuK,WAAA,GAAuB,KAAK,EACf;IACb,OAAOZ,yCAAA,CAAc5J,SAAS,CAACC,KAAA,EAAOuK,WAAA,GAAa,GAAApD,yCAAQ;EAC/D;EAEA,OAAc0E,YACV7L,KAAiB,EACjBuK,WAAA,GAAuB,IAAI,EACd;IACb,OAAOZ,yCAAA,CAAc5J,SAAS,CAACC,KAAA,EAAOuK,WAAA,GAAa,GAAAnD,yCAAa;EACpE;EAEA,OAAc0E,UACVnL,GAAW,EACX4J,WAAA,GAAuB,KAAK,EACf;IACb,OAAOZ,yCAAA,CAAciC,WAAW,CAAC,IAAAhL,yCAAM,EAAED,GAAA,GAAM4J,WAAA;EACnD;EAEA,OAAcwB,UACVpL,GAAW,EACX4J,WAAA,GAAuB,IAAI,EACd;IACb,OAAOZ,yCAAA,CAAckC,WAAW,CAAC,IAAAjL,yCAAM,EAAED,GAAA,GAAM4J,WAAA;EACnD;EAEA9K,YACI2D,CAAkB,EAClBrC,CAAkB,EAClBC,CAAkB,EAClBuI,UAA0B,EAC1BC,EAAO,IAAS,GAAArC,yCAAQ,CAAC,EAC3B;SALS/D,CAAA,GAAAA,CAAA;SACArC,CAAA,GAAAA,CAAA;SACAC,CAAA,GAAAA,CAAA;SACAuI,UAAA,GAAAA,UAAA;SACAC,EAAA,GAAAA,EAAA;IAEP,IAAA1G,yCAAK,EAAEM,CAAA,YAAarC,CAAA,CAAEtB,WAAW;IACjC,IAAAqD,yCAAK,EAAE/B,CAAA,YAAaC,CAAA,CAAEvB,WAAW;EACrC;EAEOgK,UAAA,EAAqB;IACxB,OAAO,IAAI,CAACF,UAAU,IAAI,IAAI,CAACe,QAAQ,GAAGb,SAAS;EACvD;EAEOuC,QAAA,EAAmB;IACtB,OACI,IAAI,CAACvC,SAAS,MACd,IAAI,CAAC/G,QAAQ,CAAC,IAAI,CAAC8G,EAAE,CAACyC,CAAC,EAAEtI,MAAM,CAC3B,IAAI,CAACP,CAAC,aAAY,GAAAhC,yCAAC,IACbuI,yCAAA,CAAc+B,UAAU,KACxB/B,yCAAA,CAAcgC,UAAU;EAG1C;EAEOO,eAAA,EAAyB;IAC5B,MAAMlM,KAAA,GAAQ,IAAI,CAAC2B,OAAO;IAC1B,OAAO,IAAAwK,yCAAS,EAAE,IAAAC,yCAAM,EAAEpM,KAAA,EAAOO,KAAK,CAAC,GAAG,IAAI;EAClD;EAEO+J,SAAA,EAAwB;IAC3B,OAAO,IAAI,CAACf,UAAU,GAChB,KAAI,GAAAD,yCAAU,EACV,IAAI,CAAClG,CAAC,CAACnC,IAAI,CAAC,IAAI,CAACuI,EAAE,CAAC7E,CAAC,GACrB,IAAI,CAAC5D,CAAC,CAACE,IAAI,CAAC,IAAI,CAACuI,EAAE,CAAC7E,CAAC,GACrB,MACA,IAAI,CAAC6E,EAAE,IAEX,KAAI,GAAAF,yCAAU,EACV,IAAI,CAAClG,CAAC,CAACI,MAAM,CAAC,IAAI,CAACxC,CAAC,CAAC4B,GAAG,CAAC,EAAE,IAC3B,IAAI,CAAC7B,CAAC,CAACyC,MAAM,CAAC,IAAI,CAACxC,CAAC,CAAC4B,GAAG,CAAC,EAAE,IAC3B,OACA,IAAI,CAAC4G,EAAE;EAErB;EAEO7H,QAAA,EAAsB;IACzB,MAAM0K,KAAA,GAAQ,IAAI,CAAC/B,QAAQ;IAC3B,MAAMgC,MAAA,GAASD,KAAA,CAAMjJ,CAAC,CAACzB,OAAO;IAC9B,IAAI0K,KAAA,CAAM9C,UAAU,EAAE;MAClB,MAAMvJ,KAAA,GAAQ,CAAC,KAAK;MACpB,KAAK,IAAIK,CAAA,GAAI,GAAGA,CAAA,GAAIiM,MAAA,CAAOrM,MAAM,GAAG,GAAGI,CAAA,IAAKL,KAAA,CAAMM,IAAI,CAAC;MACvD,OAAOsB,UAAA,CAAWC,IAAI,CAAC7B,KAAA;IAC3B;IACA,MAAMiL,IAAA,GACFoB,KAAA,CAAMtL,CAAC,aAAY,GAAAI,yCAAE,IACf,IAAA+J,yCAAM,EAAEmB,KAAA,CAAMtL,CAAC,EAAE,IAAI,CAACyI,EAAE,IACxB,IAAA2B,yCAAK,EAAEkB,KAAA,CAAMtL,CAAC,EAAE,IAAI,CAACyI,EAAE;IACjC8C,MAAM,CAAC,EAAE,IAAIrB,IAAA,GAAO,OAAO;IAC3B,OAAOqB,MAAA;EACX;EAEOtK,MAAA,EAAgB;IACnB,OAAO,IAAAC,yCAAI,EAAE,IAAI,CAACN,OAAO;EAC7B;EAEOO,SAAA,EAAmB;IACtB,OAAO,mBAAmB,IAAI,CAACkB,CAAC,OAAO,IAAI,CAACrC,CAAC,OAAO,IAAI,CAACC,CAAC,OAAO,IAAI,CAACuI,UAAU,GAAG;EACvF;EAEOS,OAAA,EAAwB;IAC3B,IAAI,IAAI,CAACT,UAAU,IAAI,IAAI,CAACxI,CAAC,CAAC4C,MAAM,CAAC,IAAI,CAACP,CAAC,CAACnC,IAAI,CAAC,IAAI,CAACuI,EAAE,CAAC7E,CAAC,IACtD,OAAO,IAAIgF,yCAAA,CACP,IAAI,CAACvG,CAAC,CAAC7B,GAAG,CAAC,IAAI,CAACiI,EAAE,CAAC7E,CAAC,GACpB,IAAI,CAACvB,CAAC,CAAC7B,GAAG,CAAC,IAAI,CAACiI,EAAE,CAAC7E,CAAC,GACpB,IAAI,CAACvB,CAAC,CAACnC,IAAI,CAAC,IAAI,CAACuI,EAAE,CAAC7E,CAAC,GACrB,MACA,IAAI,CAAC6E,EAAE;IAEf,MAAMrE,CAAA,GAAI,IAAI,CAAC/B,CAAC,CACXV,QAAQ,CAAC,IAAI,CAAC3B,CAAC,EACf2B,QAAQ,CAAC,IAAI,CAAC3B,CAAC,EACf2B,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAACoI,EAAE,CAAC7E,CAAC,EAAE,EAAE;IAClC,MAAM4H,IAAA,GAAO,IAAI,CAACvL,CAAC,CAAC0B,QAAQ,CAAC,IAAI,CAAC1B,CAAC;IACnC,MAAMwL,KAAA,GAAQD,IAAA,CAAK7J,QAAQ,CAAC6J,IAAA;IAC5B,MAAME,IAAA,GAAO,IAAI,CAAC1L,CAAC,CAAC2B,QAAQ,CAAC,IAAI,CAAC3B,CAAC;IACnC,MAAM2L,KAAA,GAAQD,IAAA,CAAK/J,QAAQ,CAAC+J,IAAA;IAC5B,MAAMpH,CAAA,GAAI,IAAI,CAACjC,CAAC,CACXV,QAAQ,CAAC,IAAI,CAACU,CAAC,EACfV,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAACoI,EAAE,CAAC7E,CAAC,EAAE,EAAE,GAC7BzB,GAAG,CAAC,IAAI,CAACsG,EAAE,CAAC3F,CAAC,CAACnB,QAAQ,CAAC8J,KAAA;IAC5B,MAAMG,GAAA,GAAMtH,CAAA,CAAE3C,QAAQ,CAAC2C,CAAA,EAAG9B,QAAQ,CAAC4B,CAAA,CAAEzC,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAACoI,EAAE,CAAC7E,CAAC,EAAE,EAAE;IAClE,MAAMiI,GAAA,GAAMvH,CAAA,CAAE3C,QAAQ,CAACyC,CAAA,CAAE5B,QAAQ,CAACoJ,GAAA,GAAMpJ,QAAQ,CAC5CmJ,KAAA,CAAMhK,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAACoI,EAAE,CAAC7E,CAAC,EAAE,EAAE;IAEvC,MAAMkI,GAAA,GAAM,IAAI,CAAC9L,CAAC,CAAC2B,QAAQ,CAAC,IAAI,CAAC1B,CAAC,EAAE0B,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAACoI,EAAE,CAAC7E,CAAC,EAAE,EAAE;IACjE,OAAO,IAAIgF,yCAAA,CACPgD,GAAA,EACAC,GAAA,EACAC,GAAA,EACA,OACA,IAAI,CAACrD,EAAE;EAEf;EAEOpH,OAAA,EAAwB;IAC3B,OAAO,IAAI,CAACkI,QAAQ,GAAGlI,MAAM,GAAGsH,UAAU;EAC9C;EAEOxG,IAAID,KAAoB,EAAiB;IAC5C,IAAI,IAAI,CAACsG,UAAU,EAAE,OAAOtG,KAAA,MACvB,IAAIA,KAAA,CAAMsG,UAAU,EAAE,OAAO,IAAI;IACtC,MAAMuD,EAAA,GAAK,IAAI,CAAC1J,CAAC,CAACV,QAAQ,CAACO,KAAA,CAAMjC,CAAC,CAAC4B,GAAG,CAAC,EAAE;IACzC,MAAMmK,EAAA,GAAK9J,KAAA,CAAMG,CAAC,CAACV,QAAQ,CAAC,IAAI,CAAC1B,CAAC,CAAC4B,GAAG,CAAC,EAAE;IACzC,MAAMoK,EAAA,GAAK,IAAI,CAACjM,CAAC,CAAC2B,QAAQ,CAACO,KAAA,CAAMjC,CAAC,CAAC4B,GAAG,CAAC,EAAE;IACzC,MAAMqK,EAAA,GAAKhK,KAAA,CAAMlC,CAAC,CAAC2B,QAAQ,CAAC,IAAI,CAAC1B,CAAC,CAAC4B,GAAG,CAAC,EAAE;IACzC,IAAIkK,EAAA,CAAGnJ,MAAM,CAACoJ,EAAA,GAAK;MACf,IAAI,CAACC,EAAA,CAAGrJ,MAAM,CAACsJ,EAAA,GACX,OAAO,IAAItD,yCAAA,CACP,IAAI,CAACvG,CAAC,CAAC7B,GAAG,CAAC,IAAI,CAACiI,EAAE,CAAC7E,CAAC,GACpB,IAAI,CAACvB,CAAC,CAAC7B,GAAG,CAAC,IAAI,CAACiI,EAAE,CAAC7E,CAAC,GACpB,IAAI,CAACvB,CAAC,CAACnC,IAAI,CAAC,IAAI,CAACuI,EAAE,CAAC7E,CAAC,GACrB,MACA,IAAI,CAAC6E,EAAE,OAER,OAAO,IAAI,CAACQ,MAAM;IAC7B;IACA,MAAMkD,CAAA,GAAIH,EAAA,CAAGxJ,QAAQ,CAACuJ,EAAA;IACtB,MAAMtH,CAAA,GAAIyH,EAAA,CAAG1J,QAAQ,CAACyJ,EAAA;IACtB,MAAMG,IAAA,GAAOD,CAAA,CAAExK,QAAQ,CAACwK,CAAA;IACxB,MAAME,IAAA,GAAOF,CAAA,CAAExK,QAAQ,CAACyK,IAAA;IACxB,MAAME,EAAA,GAAK7H,CAAA,CAAE9C,QAAQ,CAAC8C,CAAA,EACjBjC,QAAQ,CAAC6J,IAAA,EACT7J,QAAQ,CAACuJ,EAAA,CAAGpK,QAAQ,CAACyK,IAAA,EAAMzK,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAE,IAAI,CAACoI,EAAE,CAAC7E,CAAC,EAAE,EAAE;IAC7D,MAAM2I,EAAA,GAAK9H,CAAA,CAAE9C,QAAQ,CAACoK,EAAA,CAAGpK,QAAQ,CAACyK,IAAA,EAAM5J,QAAQ,CAAC8J,EAAA,GAAK9J,QAAQ,CAC1DyJ,EAAA,CAAGtK,QAAQ,CAAC0K,IAAA;IAEhB,MAAMG,EAAA,GAAKL,CAAA,CAAExK,QAAQ,CAAC,IAAI,CAAC1B,CAAC,EAAE0B,QAAQ,CAACO,KAAA,CAAMjC,CAAC;IAC9C,OAAO,IAAI2I,yCAAA,CACP0D,EAAA,EACAC,EAAA,EACAC,EAAA,EACA,OACA,IAAI,CAAC/D,EAAE;EAEf;EAEO9G,SAASO,KAAkB,EAAiB;IAC/C,OAAO,IAAAoH,yCAAiB,EAAEpH,KAAA,EAAO,IAAI,EAAE,IAAI,CAACuG,EAAE;EAClD;EAEO7F,OAAOV,KAAoB,EAAW;IACzC,OAAO,IAAI,CAACqH,QAAQ,GAAG3G,MAAM,CAACV,KAAA,CAAMqH,QAAQ;EAChD;EAEO7I,MAAA,EAAuB;IAC1B,OAAO,IAAIkI,yCAAA,CACP,IAAI,CAACvG,CAAC,CAAC3B,KAAK,IACZ,IAAI,CAACV,CAAC,CAACU,KAAK,IACZ,IAAI,CAACT,CAAC,CAACS,KAAK,IACZ,IAAI,CAAC8H,UAAU,EACf,IAAI,CAACC,EAAE;EAEf;AACJ;;;AC9SO,MAAMjH,yCAAA,SAAsB2C,KAAA;EAC/BzF,YAAY+N,OAAe,EAAE;IACzB,KAAK,CAACA,OAAA;IACNC,MAAA,CAAOC,cAAc,CAAC,IAAI,EAAEnL,yCAAA,CAAcoL,SAAS;EACvD;AACJ;;;;ACLO,MAAMC,wCAAA,SAAuB1I,KAAA;EAChCzF,YAAY+N,OAAe,EAAE;IACzB,KAAK,CAACA,OAAA;IACNC,MAAA,CAAOC,cAAc,CAAC,IAAI,EAAEE,wCAAA,CAAeD,SAAS;EACxD;AACJ;AAEO,SAAS7K,0CACZ+K,IAAa,EACbL,OAAA,GAAkB,mBAAmB;EAErC,IAAI,CAACK,IAAA,EAAM,MAAM,IAAID,wCAAA,CAAeJ,OAAA;AACxC;;;;AEAO,MAAMM,yCAAA;;EACT,OAAcC,IAAA,GAAO;EAErB,OAAchO,UAAUC,KAAiB,EAAc;IACnD,OAAO,IAAI8N,yCAAA,CAAW,IAAA3J,yCAAE,EAAE,IAAAC,yCAAY,EAAEpE,KAAA,EAAO,QAAQ,IAAAmH,yCAAQ,EAAE8E,CAAC;EACtE;EAEA,OAAcvL,QAAQC,GAAW,EAAc;IAC3C,OAAOmN,yCAAA,CAAW/N,SAAS,CAAC,IAAAa,yCAAM,EAAED,GAAA;EACxC;EAEA,OAAcqN,SAASC,IAAgB,EAAc;IACjD,MAAMhO,MAAA,GAAS;IACf,MAAMiO,GAAA,GAAM,IAAAC,yCAAY,EACpBlO,MAAA,EACA2B,UAAA,CAAWC,IAAI,CAAC,C,GAAIoM,IAAA,EAAM,EAAE,GAC5B,IAAIhF,WAAA,GAAcC,MAAM,CAAC,yBACzBtH,UAAA,CAAWC,IAAI,CAAC,CAAC,GAAG5B,MAAA,CAAO;IAE/B,OAAO,IAAI6N,yCAAA,CAAW,IAAA3J,yCAAE,EAAE,IAAAC,yCAAY,EAAE8J,GAAA,EAAK,QAAQ,IAAA/G,yCAAQ,EAAE8E,CAAC;EACpE;EAEA,OAAcmC,WAAWnL,KAAa,EAAc;IAChD,OAAO,IAAI6K,yCAAA,CAAW,IAAA3J,yCAAE,EAAElB,KAAA,EAAO,IAAAkE,yCAAQ,EAAE8E,CAAC;EAChD;EAEA,OAAcoC,UAAUC,WAAyB,EAAc;IAC3D,OAAO,IAAIR,yCAAA,CACP,IAAA3J,yCAAE,EACEmK,WAAA,CAAYC,MAAM,CACd,CAACF,SAAA,EAAWG,UAAA,KAAeH,SAAA,GAAYG,UAAA,CAAWvL,KAAK,EACvD,EAAE,GAEN,IAAAkE,yCAAQ,EAAE8E,CAAC;EAGvB;EAEAxM,YAAYwD,KAAoB,EAAE;SAAfA,KAAA,GAAAA,KAAA;IACf,IAAAH,yCAAK,EAAEG,KAAA,GAAQ,IAAAkE,yCAAQ,EAAE8E,CAAC;EAC9B;EAEOwC,MAAA,EAAuB;IAC1B,OAAO,IAAA9E,yCAAY,EAAEyB,UAAU,GAAG1I,QAAQ,CAAC,IAAI,CAACO,KAAK;EACzD;EAEOtB,QAAA,EAAsB;IACzB,OAAO,IAAA2C,yCAAY,EAAE,IAAI,CAACrB,KAAK,EAAE6K,yCAAA,CAAWC,IAAI,EAAE;EACtD;EAEO/L,MAAA,EAAgB;IACnB,OAAO,IAAAC,yCAAI,EAAE,IAAI,CAACN,OAAO;EAC7B;EAEOO,SAAA,EAAmB;IACtB,OAAO,gBAAgB,IAAI,CAACF,KAAK,KAAK;EAC1C;EAEO2B,OAAOV,KAAiB,EAAW;IACtC,OAAO,IAAI,CAACA,KAAK,KAAKA,KAAA,CAAMA,KAAK;EACrC;AACJ;;;AC3DO,MAAMyL,yCAAA;EACT,OAAcC,OAAOV,IAAgB,EAAc;IAC/C,OAAO,IAAAW,yCAAK,EAAEX,IAAA;EAClB;EAEA,OAAchD,KACVuD,UAAsB,EACtBhB,OAAmB,EACN;IACb,MAAMqB,SAAA,GAAYL,UAAA,CAAWC,KAAK;IAClC,OAAO,IAAAK,yCAAU,EACbN,UAAA,EACA5M,UAAA,CAAWC,IAAI,CAAC,C,GAAIgN,SAAA,CAAUlN,OAAO,I,GAAO6L,OAAA,CAAQ,IACpD,GAAArE,yCAAW;EAEnB;EAEA,OAAc4F,aACVP,UAAsB,EACtBhB,OAAmB,EACnBwB,gBAA+B,EAClB;IACb,OAAO,IAAAF,yCAAU,EACbN,UAAA,EACA5M,UAAA,CAAWC,IAAI,CAAC,C,GAAImN,gBAAA,CAAiBrN,OAAO,I,GAAO6L,OAAA,CAAQ,IAC3D,GAAArE,yCAAW;EAEnB;EAEA,OAAc8F,OACVJ,SAAwB,EACxBrB,OAAmB,EACnB0B,SAAwB,EACjB;IACP,OAAO,IAAAC,yCAAY,EACfN,SAAA,EACAjN,UAAA,CAAWC,IAAI,CAAC,C,GAAIgN,SAAA,CAAUlN,OAAO,I,GAAO6L,OAAA,CAAQ,GACpD0B,SAAA,GACA,GAAA/F,yCAAW;EAEnB;EAEA,OAAckF,UAAUe,UAA2B,EAAiB;IAChE,OAAO,IAAAC,yCAAe,EAAED,UAAA;EAC5B;EAEA,OAAcE,gBACVC,UAA2B,EAC3BC,QAAsB,EACtBN,SAAwB,EACjB;IACP,IAAIK,UAAA,CAAWtP,MAAM,KAAKuP,QAAA,CAASvP,MAAM,IAAI,CAACsP,UAAA,CAAWtP,MAAM,EAC3D,OAAO;IACX,MAAMwP,OAAA,GAA6B,EAAE;IACrC,KAAK,IAAIpP,CAAA,GAAI,GAAGA,CAAA,GAAIkP,UAAA,CAAWtP,MAAM,EAAEI,CAAA,IACnCoP,OAAA,CAAQnP,IAAI,CACRsB,UAAA,CAAWC,IAAI,CAAC,C,GAAI0N,UAAU,CAAClP,CAAA,CAAE,CAACsB,OAAO,I,GAAO6N,QAAQ,CAACnP,CAAA,CAAE,CAAC;IAEpE,OAAO,IAAAqP,yCAAkB,EACrBH,UAAA,EACAE,OAAA,EACAP,SAAA,GACA,GAAA/F,yCAAW;EAEnB;EAEA,OAAcwG,cACVnB,UAAsB,EACtB/L,KAAa,EACH;IACV,OAAO,IAAAmN,yCAAY,EAAEpB,UAAA,EAAY/L,KAAA;EACrC;EAEA,OAAcoN,wBACVrB,UAAsB,EACtB/L,KAAa,EACH;IACV,OAAO,IAAAqN,yCAAsB,EAAEtB,UAAA,EAAY/L,KAAA;EAC/C;EAEA,OAAcsN,wBACVlB,SAAwB,EACxBpM,KAAa,EACA;IACb,OAAO,IAAAuN,yCAAsB,EAAEnB,SAAA,EAAWpM,KAAA;EAC9C;AACJ;;;ACrFO,MAAMwN,yCAAA;EACT,OAActB,OAAOV,IAAgB,EAAc;IAC/C,OAAO,IAAAW,yCAAK,EAAEX,IAAA;EAClB;EAEA,OAAchD,KACVuD,UAAsB,EACtBhB,OAAmB,EACN;IACb,OAAO,IAAAsB,yCAAU,EAAEN,UAAA,EAAYhB,OAAA,GAAS,GAAAxE,yCAAa;EACzD;EAEA,OAAciG,OACVJ,SAAwB,EACxBrB,OAAmB,EACnB0B,SAAwB,EACjB;IACP,OAAO,IAAAC,yCAAY,EAAEN,SAAA,EAAWrB,OAAA,EAAS0B,SAAA,GAAW,GAAAlG,yCAAa;EACrE;EAEA,OAAcqF,UAAUe,UAA2B,EAAiB;IAChE,OAAO,IAAAC,yCAAe,EAAED,UAAA;EAC5B;EAEA,OAAcE,gBACVC,UAA2B,EAC3BC,QAAsB,EACtBN,SAAwB,EACjB;IACP,IAAIK,UAAA,CAAWtP,MAAM,KAAKuP,QAAA,CAASvP,MAAM,IAAI,CAACsP,UAAA,CAAWtP,MAAM,EAC3D,OAAO;IACX,KAAK,MAAMuN,OAAA,IAAWgC,QAAA,EAClB,KAAK,MAAMU,KAAA,IAASV,QAAA,EAAU;MAC1B,IAAIhC,OAAA,KAAY0C,KAAA,IAAS,IAAAC,yCAAS,EAAE3C,OAAA,EAAS0C,KAAA,GACzC,OAAO;IACf;IAEJ,OAAO,IAAAR,yCAAkB,EACrBH,UAAA,EACAC,QAAA,EACAN,SAAA,GACA,GAAAlG,yCAAa;EAErB;EAEA,OAAc2G,cACVnB,UAAsB,EACtB/L,KAAa,EACH;IACV,OAAO,IAAAmN,yCAAY,EAAEpB,UAAA,EAAY/L,KAAA;EACrC;EAEA,OAAcoN,wBACVrB,UAAsB,EACtB/L,KAAa,EACH;IACV,OAAO,IAAAqN,yCAAsB,EAAEtB,UAAA,EAAY/L,KAAA;EAC/C;EAEA,OAAcsN,wBACVlB,SAAwB,EACxBpM,KAAa,EACA;IACb,OAAO,IAAAuN,yCAAsB,EAAEnB,SAAA,EAAWpM,KAAA;EAC9C;AACJ;;;AC1DO,MAAM2N,yCAAA;EACT,OAAczB,OAAOV,IAAgB,EAAc;IAC/C,OAAO,IAAAW,yCAAK,EAAEX,IAAA;EAClB;EAEA,OAAchD,KACVuD,UAAsB,EACtBhB,OAAmB,EACN;IACb,OAAO,IAAAsB,yCAAU,EAAEN,UAAA,EAAYhB,OAAA,GAAS,GAAApE,yCAAW;EACvD;EAEA,OAAc6F,OACVJ,SAAwB,EACxBrB,OAAmB,EACnB0B,SAAwB,EACjB;IACP,OAAO,IAAAC,yCAAY,EAAEN,SAAA,EAAWrB,OAAA,EAAS0B,SAAA,GAAW,GAAA9F,yCAAW;EACnE;EAEA,OAAciF,UAAUe,UAA2B,EAAiB;IAChE,OAAO,IAAAC,yCAAe,EAAED,UAAA;EAC5B;EAEA,OAAcE,gBACVC,UAA2B,EAC3BC,QAAsB,EACtBN,SAAwB,EACjB;IACP,IAAIK,UAAA,CAAWtP,MAAM,KAAKuP,QAAA,CAASvP,MAAM,IAAI,CAACsP,UAAA,CAAWtP,MAAM,EAC3D,OAAO;IACX,KAAK,MAAMuN,OAAA,IAAWgC,QAAA,EAClB,KAAK,MAAMU,KAAA,IAASV,QAAA,EAAU;MAC1B,IAAIhC,OAAA,KAAY0C,KAAA,IAAS,IAAAC,yCAAS,EAAE3C,OAAA,EAAS0C,KAAA,GACzC,OAAO;IACf;IAEJ,OAAO,IAAAR,yCAAkB,EACrBH,UAAA,EACAC,QAAA,EACAN,SAAA,GACA,GAAA9F,yCAAW;EAEnB;EAEA,OAAciH,SAAS7B,UAAsB,EAAiB;IAC1D,MAAMK,SAAA,GAAYL,UAAA,CAAWC,KAAK;IAClC,OAAO,IAAA6B,yCAAI,EAAEzB,SAAA,CAAUlN,OAAO,KAAI,GAAA0H,yCAAc,GAAG3G,QAAQ,CACvD8L,UAAA,CAAWvL,KAAK;EAExB;EAEA,OAAcsN,UACV1B,SAAwB,EACxB2B,KAAoB,EACb;IACP,IAAI;MACA,IAAA1N,yCAAK,EAAE0N,KAAA,CAAMxE,OAAO;MACpB,IAAAlJ,yCAAK,EAAE+L,SAAA,CAAU7C,OAAO;MACxB,MAAMrH,CAAA,GAAI,IAAA2L,yCAAI,EAAEzB,SAAA,CAAUlN,OAAO,KAAI,GAAA0H,yCAAc;MACnD,MAAM9H,GAAA,GAAM,IAAAC,yCAAG,EAAEF,GAAG,CAACC,GAAG,CAAC,IAAA4F,yCAAQ,EAAExC,CAAC;MACpC,MAAM8L,aAAA,GAAgB,IAAAC,yCAAc,EAChC,CAAC7B,SAAA,EAAW,IAAAlF,yCAAY,EAAEyB,UAAU,GAAGhJ,MAAM,GAAG,EAChD,CAACuC,CAAA,EAAG6L,KAAA,CAAM;MAEd,OAAOC,aAAA,CAAc9M,MAAM,CAACpC,GAAA;IAChC,EAAE,OAAOoP,CAAA,EAAG;MACR,IAAIA,CAAA,aAAa,GAAA/C,wCAAa,GAAG,OAAO;MACxC,MAAM+C,CAAA;IACV;EACJ;EAEA,OAAcC,oBACVrB,UAA2B,EAC3B/B,OAAmB,EACnB0B,SAAwB,EACjB;IACP,IAAI,CAACK,UAAA,CAAWtP,MAAM,EAAE,OAAO;IAC/B,IAAIoO,SAAA,GAAYkB,UAAU,CAAC,EAAE;IAC7B,KAAK,MAAMV,SAAA,IAAaU,UAAA,CAAWhP,KAAK,CAAC,IACrC8N,SAAA,GAAYA,SAAA,CAAUnL,GAAG,CAAC2L,SAAA;IAC9B,OAAO,IAAAM,yCAAY,EAAEd,SAAA,EAAWb,OAAA,EAAS0B,SAAA,GAAW,GAAA9F,yCAAW;EACnE;EAEA,OAAcuG,cACVnB,UAAsB,EACtB/L,KAAa,EACH;IACV,OAAO,IAAAmN,yCAAY,EAAEpB,UAAA,EAAY/L,KAAA;EACrC;EAEA,OAAcoN,wBACVrB,UAAsB,EACtB/L,KAAa,EACH;IACV,OAAO,IAAAqN,yCAAsB,EAAEtB,UAAA,EAAY/L,KAAA;EAC/C;EAEA,OAAcsN,wBACVlB,SAAwB,EACxBpM,KAAa,EACA;IACb,OAAO,IAAAuN,yCAAsB,EAAEnB,SAAA,EAAWpM,KAAA;EAC9C;AACJ;;;;;;;;;;;;;;;;;;;AC1HO,SAASoO,0CAAKC,MAAc;EAC/B,OAAOA,MAAA,CAAOC,OAAO,CAAC,SAAUb,KAAA,IAAWA,KAAA,KAAU,MAAM,MAAM;AACrE;AAEO,SAASc,0CAAa/N,KAAa;EACtC,OAAOgO,IAAA,CAAKC,GAAG,CAACjO,KAAA,EAAOf,QAAQ,CAAC,GAAGjC,MAAM;AAC7C;AAEO,SAASkR,0CAAgBlO,KAAa;EACzC,OAAO,CAACA,KAAA,GAAQ,EAAE,GAAG,CAACA,KAAA,GAAQA,KAAI,EAAGf,QAAQ,CAAC,GAAGjC,MAAM;AAC3D;AAEO,SAASmR,0CAAa/Q,CAAS;EAClC,IAAIA,CAAA,GAAI,EAAE,EAAE,OAAO,CAAC,EAAE;EACtB,MAAMgR,IAAA,GAAsB,EAAE;EAC9B,OAAOhR,CAAA,KAAM,EAAE,EAAE;IACbgR,IAAA,CAAK/Q,IAAI,CAACgR,MAAA,CAAO,IAAAnN,yCAAE,EAAE9D,CAAA,EAAG,EAAE;IAC1BA,CAAA,IAAK,EAAE;EACX;EACA,OAAOgR,IAAA,CAAK7Q,OAAO;AACvB;AAEO,SAAS+Q,0CAAUlR,CAAS;EAC/B,IAAIA,CAAA,GAAI,GAAG,OAAO,CAAC,EAAE;EACrB,MAAMgR,IAAA,GAAsB,EAAE;EAC9B,OAAOhR,CAAA,KAAM,GAAG;IACZgR,IAAA,CAAK/Q,IAAI,CAACgR,MAAA,CAAO,IAAA9O,yCAAQ,EAAEnC,CAAA,EAAG;IAC9BA,CAAA,IAAK;EACT;EACA,OAAOgR,IAAA,CAAK7Q,OAAO;AACvB;AAEO,SAASgR,0CACZvO,KAAa,EACb8K,IAAY,EACZ0D,MAAc,EACd5G,MAAA,GAAkB,KAAK;EAEvB,IAAI5H,KAAA,GAAQ,KAAK,CAAC4H,MAAA,EACd,MAAM,IAAI3F,KAAA,CAAM;EACpB,IAAI+L,IAAA,CAAKS,KAAK,CAACzO,KAAA,MAAWA,KAAA,EACtB,MAAM,IAAIiC,KAAA,CAAM;EACpB,IAAI4L,MAAA,GAASG,IAAA,CAAKC,GAAG,CAACjO,KAAA,EACjBf,QAAQ,CAAC,GACTyP,QAAQ,CAAC5D,IAAA,GAAO,GAAG;EACxB,IAAI9K,KAAA,GAAQ,GACR6N,MAAA,GAAS,CAACc,QAAA,CAASf,yCAAA,CAAKC,MAAA,GAAS,KAAK,GACjC5O,QAAQ,CAAC,GACTyP,QAAQ,CAAC5D,IAAA,GAAO,GAAG;EAE5B,IAAI/N,KAAA,GAAQ8Q,MAAA,CAAOZ,KAAK,CAAC,YAAazP,GAAG,CAAEyP,KAAA,IAAU0B,QAAA,CAAS1B,KAAA,EAAO;EACrE,IAAIuB,MAAA,KAAW,UAAUzR,KAAA,CAAMQ,OAAO;EACtC,OAAOoB,UAAA,CAAWC,IAAI,CAAC7B,KAAA;AAC3B;AAEO,SAASmM,0CACZnM,KAAiB,EACjByR,MAAc,EACd5G,MAAA,GAAkB,KAAK;EAEvB,IAAI7K,KAAA,CAAMC,MAAM,KAAK,GAAG,OAAO;EAC/B,MAAMgL,IAAA,GAAOjL,KAAK,CAACyR,MAAA,KAAW,WAAWzR,KAAA,CAAMC,MAAM,GAAG,IAAI,EAAE,CACzDiC,QAAQ,CAAC,GACTyP,QAAQ,CAAC,GAAG,IAAI,CAAC,EAAE;EACxB,MAAME,QAAA,GAAWJ,MAAA,KAAW,WAAWzR,KAAA,CAAMQ,OAAO,KAAKR,KAAA;EACzD,IAAI8Q,MAAA,GAAS;EACb,KAAK,MAAMhG,IAAA,IAAQ+G,QAAA,EAAUf,MAAA,IAAUhG,IAAA,CAAK5I,QAAQ,CAAC,GAAGyP,QAAQ,CAAC,GAAG;EACpE,IAAI1G,IAAA,KAAS,OAAOJ,MAAA,EAChBiG,MAAA,GAAS,CAACc,QAAA,CAASf,yCAAA,CAAKC,MAAA,GAAS,KAAK,GACjC5O,QAAQ,CAAC,GACTyP,QAAQ,CAAC3R,KAAA,CAAMC,MAAM,GAAG,GAAG;EAEpC,MAAMiB,MAAA,GAAS0Q,QAAA,CAASd,MAAA,EAAQ;EAChC,OAAO7F,IAAA,KAAS,OAAOJ,MAAA,GAAS,CAAC3J,MAAA,GAASA,MAAA;AAC9C;AAEO,SAAS4Q,0CAAU7O,KAAa;EACnC,IAAIA,KAAA,KAAU,GAAG,OAAOrB,UAAA,CAAWC,IAAI,CAAC,EAAE;EAC1C,MAAM5B,MAAA,GAAS+Q,yCAAC,CAAa/N,KAAA,IAAS,KAAM;EAC5C,IAAIjD,KAAA,GAAQwR,yCAAA,CAAWvO,KAAA,EAAOhD,MAAA,EAAQ,OAAO;EAC7C,OACID,KAAA,CAAMC,MAAM,GAAG,KACfD,KAAK,CAAC,EAAE,MAAM,CAACA,KAAK,CAAC,EAAE,GAAG,IAAG,MAAO,IAAI,OAAO,IAE/CA,KAAA,GAAQA,KAAA,CAAMO,KAAK,CAAC;EACxB,OAAOP,KAAA;AACX;AAEO,SAAS+R,0CAAU/R,KAAiB;EACvC,OAAOmM,yCAAA,CAAWnM,KAAA,EAAO,OAAO;AACpC;AAEO,SAASsE,0CACZrB,KAAa,EACb8K,IAAY,EACZ0D,MAAc,EACd5G,MAAA,GAAkB,KAAK;EAEvB,IAAI5H,KAAA,GAAQ,EAAE,IAAI,CAAC4H,MAAA,EACf,MAAM,IAAI3F,KAAA,CAAM;EACpB,IAAI4L,MAAA,GAAS,CAAC7N,KAAA,GAAQ,EAAE,GAAG,CAACA,KAAA,GAAQA,KAAI,EACnCf,QAAQ,CAAC,GACTyP,QAAQ,CAAC5D,IAAA,GAAO,GAAG;EACxB,IAAI9K,KAAA,GAAQ,GACR6N,MAAA,GAAS,CAACkB,MAAA,CAAO,OAAOnB,yCAAA,CAAKC,MAAA,KAAW,EAAE,EACrC5O,QAAQ,CAAC,GACTyP,QAAQ,CAAC5D,IAAA,GAAO,GAAG;EAE5B,IAAI/N,KAAA,GAAQ8Q,MAAA,CAAOZ,KAAK,CAAC,YAAazP,GAAG,CAAEyP,KAAA,IAAU0B,QAAA,CAAS1B,KAAA,EAAO;EACrE,IAAIuB,MAAA,KAAW,UAAUzR,KAAA,CAAMQ,OAAO;EACtC,OAAOoB,UAAA,CAAWC,IAAI,CAAC7B,KAAA;AAC3B;AAEO,SAASoE,0CACZpE,KAAiB,EACjByR,MAAc,EACd5G,MAAA,GAAkB,KAAK;EAEvB,IAAI7K,KAAA,CAAMC,MAAM,KAAK,GAAG,OAAO,EAAE;EACjC,MAAMgL,IAAA,GAAOjL,KAAK,CAACyR,MAAA,KAAW,WAAWzR,KAAA,CAAMC,MAAM,GAAG,IAAI,EAAE,CACzDiC,QAAQ,CAAC,GACTyP,QAAQ,CAAC,GAAG,IAAI,CAAC,EAAE;EACxB,MAAME,QAAA,GAAWJ,MAAA,KAAW,WAAWzR,KAAA,CAAMQ,OAAO,KAAKR,KAAA;EACzD,IAAI8Q,MAAA,GAAS;EACb,KAAK,MAAMhG,IAAA,IAAQ+G,QAAA,EAAUf,MAAA,IAAUhG,IAAA,CAAK5I,QAAQ,CAAC,GAAGyP,QAAQ,CAAC,GAAG;EACpE,IAAI1G,IAAA,KAAS,OAAOJ,MAAA,EAChBiG,MAAA,GAAS,CAACkB,MAAA,CAAO,OAAOnB,yCAAA,CAAKC,MAAA,KAAW,EAAE,EACrC5O,QAAQ,CAAC,GACTyP,QAAQ,CAAC3R,KAAA,CAAMC,MAAM,GAAG,GAAG;EAEpC,MAAMiB,MAAA,GAAS8Q,MAAA,CAAO,OAAOlB,MAAA;EAC7B,OAAO7F,IAAA,KAAS,OAAOJ,MAAA,GAAS,CAAC3J,MAAA,GAASA,MAAA;AAC9C;AAEO,SAAS+Q,0CAAahP,KAAa;EACtC,IAAIA,KAAA,KAAU,EAAE,EAAE,OAAOrB,UAAA,CAAWC,IAAI,CAAC,EAAE;EAC3C,MAAM5B,MAAA,GAASkR,yCAAC,CAAgBlO,KAAA,IAAS,KAAM;EAC/C,IAAIjD,KAAA,GAAQsE,yCAAA,CAAcrB,KAAA,EAAOhD,MAAA,EAAQ,OAAO;EAChD,OACID,KAAA,CAAMC,MAAM,GAAG,KACfD,KAAK,CAAC,EAAE,MAAM,CAACA,KAAK,CAAC,EAAE,GAAG,IAAG,MAAO,IAAI,OAAO,IAE/CA,KAAA,GAAQA,KAAA,CAAMO,KAAK,CAAC;EACxB,OAAOP,KAAA;AACX;AAEO,SAASkS,0CAAalS,KAAiB;EAC1C,OAAOoE,yCAAA,CAAcpE,KAAA,EAAO,OAAO;AACvC;AAEO,SAASmS,0CAAY,GAAGC,KAAmB;EAC9C,MAAMpS,KAAA,GAAuB,EAAE;EAC/B,KAAK,MAAMqS,IAAA,IAAQD,KAAA,EACf,KAAK,MAAMtH,IAAA,IAAQuH,IAAA,EAAMrS,KAAA,CAAMM,IAAI,CAACwK,IAAA;EAExC,OAAOlJ,UAAA,CAAWC,IAAI,CAAC7B,KAAA;AAC3B;AAEO,SAASmQ,0CAAWtM,CAAa,EAAEC,CAAa;EACnD,OACID,CAAA,CAAE5D,MAAM,KAAK6D,CAAA,CAAE7D,MAAM,IAAI4D,CAAA,CAAE9B,SAAS,CAAC,CAAC+I,IAAA,EAAMzK,CAAA,KAAMyD,CAAC,CAACzD,CAAA,CAAE,KAAKyK,IAAA,MAAU;AAE7E;AAEA,MAAMwH,iCAAA,GAAc;AACpB,MAAMC,6BAAA,GAAkC;EACpC,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL1O,CAAA,EAAG;EACHC,CAAA,EAAG;EACHwB,CAAA,EAAG;EACHkN,CAAA,EAAG;EACH7B,CAAA,EAAG;EACHlL,CAAA,EAAG;EACHgN,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;AACP;AAEO,SAAS7Q,0CAAMjC,KAAiB;EACnC,OAAO+S,KAAA,CAAMlR,IAAI,CAAC7B,KAAA,EACbS,GAAG,CAAEqD,CAAA,IAAMwO,iCAAW,CAACxO,CAAA,IAAK,EAAE,GAAGwO,iCAAW,CAACxO,CAAA,GAAI,GAAG,EACpD3B,IAAI,CAAC;AACd;AAEO,SAASvB,0CAAQD,GAAW;EAC/B,MAAMX,KAAA,GAAQ,IAAI4B,UAAA,CAAWqP,IAAA,CAAKS,KAAK,CAAC/Q,GAAA,CAAIV,MAAM,GAAG;EACrD,IAAII,CAAA;EACJ,KAAKA,CAAA,GAAI,GAAGA,CAAA,GAAIL,KAAA,CAAMC,MAAM,EAAEI,CAAA,IAAK;IAC/B,MAAMwD,CAAA,GAAI0O,6BAAO,CAAC5R,GAAG,CAACN,CAAA,GAAI,EAAE,CAAC;IAC7B,MAAMyD,CAAA,GAAIyO,6BAAO,CAAC5R,GAAG,CAACN,CAAA,GAAI,IAAI,EAAE,CAAC;IACjC,IAAIwD,CAAA,KAAMmP,SAAA,IAAalP,CAAA,KAAMkP,SAAA,EACzB;IAEJhT,KAAK,CAACK,CAAA,CAAE,GAAGwD,CAAC,IAAK,IAAKC,CAAA;EAC1B;EACA,OAAOzD,CAAA,KAAML,KAAA,CAAMC,MAAM,GAAGD,KAAA,GAAQA,KAAA,CAAMO,KAAK,CAAC,GAAGF,CAAA;AACvD;;;;;;;ACxMO,SAAS2K,0CAAM5H,CAAW,EAAEoG,EAAA,IAAS,GAAArC,yCAAQ,CAAC;EACjD,MAAM8L,CAAA,GAAI7P,CAAA,CAAEV,QAAQ,CAACU,CAAA,EAAGV,QAAQ,CAACU,CAAA,EAAGF,GAAG,CAACsG,EAAA,CAAG3F,CAAC,CAACnB,QAAQ,CAACU,CAAA,GAAIF,GAAG,CAACsG,EAAA,CAAG1F,CAAC;EAGlE,MAAM/C,CAAA,GAAIkS,CAAA,CAAEjO,OAAO;EACnB,IAAIjE,CAAA,CAAE4C,MAAM,CAAC,EAAE,KAAK,CAAC,KAAI,GAAA2F,yCAAU,EAAElG,CAAA,EAAGrC,CAAA,EAAG,OAAOyI,EAAA,EAAIC,SAAS,IAC3D,MAAM,IAAIvE,KAAA,CAAM;EACpB,OAAOnE,CAAA;AACX;AAEO,SAASsJ,0CACZpH,KAAkB,EAClBoJ,KAAoB,EACpB7C,EAAA,IAAS,GAAArC,yCAAQ,CAAC;EAElB,IAAIlE,KAAA,aAAiB,GAAA7B,yCAAC,GAAG6B,KAAA,GAAQA,KAAA,CAAMA,KAAK;EAC5C,IAAI/B,MAAA,GAAS,KAAI,GAAAyI,yCAAY,EACzB0C,KAAA,CAAMjJ,CAAC,CAAC7B,GAAG,CAACiI,EAAA,CAAG7E,CAAC,GAChB0H,KAAA,CAAMjJ,CAAC,CAAC7B,GAAG,CAACiI,EAAA,CAAG7E,CAAC,GAChB0H,KAAA,CAAMjJ,CAAC,CAACnC,IAAI,CAACuI,EAAA,CAAG7E,CAAC,GACjB,MACA6E,EAAA;EAEJ,IAAI6C,KAAA,CAAM9C,UAAU,IAAI,IAAApF,yCAAE,EAAElB,KAAA,EAAOuG,EAAA,CAAG7E,CAAC,MAAM,EAAE,EAAE,OAAOzD,MAAA;EACxD,IAAIgS,MAAA,GAAS7G,KAAA;EACb,OAAOpJ,KAAA,GAAQ,EAAE,EAAE;IACf,IAAIA,KAAA,GAAQ,EAAE,EAAE/B,MAAA,GAASA,MAAA,CAAOgC,GAAG,CAACgQ,MAAA;IACpCA,MAAA,GAASA,MAAA,CAAOhQ,GAAG,CAACgQ,MAAA;IACpBjQ,KAAA,KAAU,EAAE;EAChB;EACA,OAAO/B,MAAA;AACX;AAEO,SAASiS,0CACZC,CAAgB,EAChBC,SAAkB,EAClB7J,EAAM;EAEN,MAAM;IAAApG,CAAA,EAAEA,CAAC;IAAArC,CAAA,EAAEA,CAAC;IAAAC,CAAA,EAAEA;EAAC,CAAE,GAAGoS,CAAA;EACpB,MAAME,SAAA,GAA+B,CAAC,MAAM,MAAM,MAAM,KAAK;EAC7D,IAAIC,MAAA,GAASF,SAAS,CAAC,EAAE,CAACpT,MAAM;EAChC,KAAK,MAAMuT,MAAA,IAAUH,SAAA,CAAU9S,KAAK,CAAC,IACjCgT,MAAA,GAAStC,IAAA,CAAKwC,GAAG,CAACF,MAAA,EAAQC,MAAA,CAAOvT,MAAM;EAC3C,MAAMyT,KAAA,GAA2B,EAAE;EACnC,KAAK,IAAIrT,CAAA,GAAI,GAAGA,CAAA,GAAIkT,MAAA,EAAQlT,CAAA,IAAKqT,KAAA,CAAMpT,IAAI,CAAC;EAC5CoT,KAAK,CAAC,EAAE,GAAG1S,CAAA,CAAE4B,GAAG,CAAC,EAAE;EACnB8Q,KAAK,CAAC,EAAE,GAAG1S,CAAA,CAAE4B,GAAG,CAAC,EAAE;EACnB,KAAK,IAAIvC,CAAA,GAAI,GAAGA,CAAA,GAAIqT,KAAA,CAAMzT,MAAM,EAAEI,CAAA,IAAK;IACnC,IAAAyC,yCAAK,EAAE4Q,KAAK,CAACrT,CAAA,GAAI,EAAE,KAAK;IACxB,IAAAyC,yCAAK,EAAE4Q,KAAK,CAAC,EAAE,KAAK;IACpBA,KAAK,CAACrT,CAAA,CAAE,GAAGqT,KAAK,CAACrT,CAAA,GAAI,EAAE,EAAEqC,QAAA,CAASgR,KAAK,CAAC,EAAE;EAC9C;EACA,KAAK,MAAM,CAACrT,CAAA,EAAGsT,IAAA,CAAK,IAAIN,SAAA,CAAUhQ,OAAO,IAAI;IACzC,MAAMuQ,OAAA,GAAUD,IAAA,CACXpT,KAAK,GACLC,OAAO,GACPC,GAAG,CAAC,CAACkT,IAAA,EAAMtT,CAAA,KAAMsT,IAAA,CAAKjR,QAAQ,CAACgR,KAAK,CAACrT,CAAA,CAAE;IAC5C,IAAIwT,IAAA,GAAOD,OAAO,CAAC,EAAE;IACrB,KAAK,MAAME,KAAA,IAASF,OAAA,CAAQrT,KAAK,CAAC,IAAI;MAClCsT,IAAA,GAAOA,IAAA,CAAKnR,QAAQ,CAACU,CAAA;MACrByQ,IAAA,GAAOA,IAAA,CAAK3Q,GAAG,CAAC4Q,KAAA;IACpB;IACAR,SAAS,CAACjT,CAAA,CAAE,GAAGwT,IAAA;EACnB;EACA,IAAA/Q,yCAAK,EAAEuQ,SAAS,CAAC,EAAE,CAACpT,MAAM,GAAG,MAAMoT,SAAS,CAAC,EAAE,CAACpT,MAAM;EACtD,IAAA6C,yCAAK,EAAE4Q,KAAK,CAAC,EAAE,KAAK;EACpB,IAAA5Q,yCAAK,EAAEwQ,SAAS,CAAC,EAAE,KAAK;EACxBA,SAAS,CAAC,EAAE,GAAGA,SAAS,CAAC,EAAE,EAAE5Q,QAAA,CAASgR,KAAK,CAAC,EAAE;EAC9C,IAAA5Q,yCAAK,EAAEwQ,SAAS,CAAC,EAAE,KAAK;EACxB,IAAAxQ,yCAAK,EAAEwQ,SAAS,CAAC,EAAE,KAAK;EACxBA,SAAS,CAAC,EAAE,GAAGA,SAAS,CAAC,EAAE,CAAE5Q,QAAQ,CAAC3B,CAAA;EACtCuS,SAAS,CAAC,EAAE,GAAGA,SAAS,CAAC,EAAE,CAAE5Q,QAAQ,CAAC1B,CAAA,CAAE4B,GAAG,CAAC,EAAE;EAC9C,MAAMmR,CAAA,GAAIT,SAAS,CAAC,EAAE,CAAC5Q,QAAQ,CAAC4Q,SAAS,CAAC,EAAE;EAC5C,MAAMU,CAAA,GAAIV,SAAS,CAAC,EAAE,CAAE5Q,QAAQ,CAAC4Q,SAAS,CAAC,EAAE,EAAE5Q,QAAQ,CAACqR,CAAA;EACxD,MAAME,CAAA,GAAIX,SAAS,CAAC,EAAE,CAAC5Q,QAAQ,CAAC4Q,SAAS,CAAC,EAAE,EAAE5Q,QAAQ,CAACqR,CAAA,EAAGrR,QAAQ,CAACqR,CAAA;EACnE,OAAO,KAAI,GAAApK,yCAAY,EACnBqK,CAAA,EACAC,CAAA,EACAF,CAAA,EACAX,CAAA,CAAE7J,UAAU,EACZC,EAAA;AAER;AAEO,SAAS2B,0CAAOzJ,OAAW,EAAE8H,EAAA,IAAS,GAAArC,yCAAQ,CAAC;EAClD,OAAOzF,OAAA,CAAQqC,EAAE,CAAC,KAAI,GAAA3C,yCAAC,EAAEoI,EAAA,CAAG7E,CAAC,EAAE,CAAC6E,EAAA,CAAG7E,CAAC,GAAG,EAAE,IAAI,EAAE;AACnD;AAEO,SAASuG,0CAAQxJ,OAAY,EAAE8H,EAAA,IAAS,GAAApC,yCAAa,CAAC;EACzD,IAAI1F,OAAA,CAAQnC,QAAQ,CAAC,EAAE,CAACoE,MAAM,CAAC,KAAI,GAAAvC,yCAAC,EAAEoI,EAAA,CAAG7E,CAAC,EAAE,EAAE,IAC1C,OAAOwG,yCAAA,CAAOzJ,OAAA,CAAQnC,QAAQ,CAAC,EAAE;EACrC,OAAOmC,OAAA,CAAQnC,QAAQ,CAAC,EAAE,CAACwE,EAAE,CAAC,KAAI,GAAA3C,yCAAC,EAAEoI,EAAA,CAAG7E,CAAC,EAAE,CAAC6E,EAAA,CAAG7E,CAAC,GAAG,EAAE,IAAI,EAAE;AAC/D;;;;;;;;;;AC7FO,SAASuP,0CAAMjR,KAAa,EAAEhD,MAAc;EAC/C,IAAIgD,KAAA,GAAQ,EAAE,IAAIA,KAAA,IAAS,EAAE,IAAK,EAAE,GAAG+O,MAAA,CAAO/R,MAAA,GAC1C,MAAM,IAAIiF,KAAA,CAAM,yBAAyBjC,KAAA,YAAiBhD,MAAA,GAAS;EACvE,MAAMD,KAAA,GAAuB,EAAE;EAC/B,KAAK,IAAIK,CAAA,GAAI,GAAGA,CAAA,GAAIJ,MAAA,EAAQI,CAAA,IAAKL,KAAA,CAAMM,IAAI,CAAC;EAC5C,IAAI6T,SAAA,GAAYlR,KAAA;EAChB,KAAK,IAAI5C,CAAA,GAAIJ,MAAA,GAAS,GAAGI,CAAA,IAAK,GAAGA,CAAA,IAAK;IAClCL,KAAK,CAACK,CAAA,CAAE,GAAGiR,MAAA,CAAO6C,SAAA,GAAY,KAAK;IACnCA,SAAA,KAAc,EAAE;EACpB;EACA,MAAMjT,MAAA,GAASU,UAAA,CAAWC,IAAI,CAAC7B,KAAA;EAC/B,MAAMoU,YAAA,GAAe,IAAA9P,yCAAY,EAAErB,KAAA,EAAOhD,MAAA,EAAQ;EAClD,IAAA6C,yCAAK,EAAE,IAAAqN,yCAAS,EAAEjP,MAAA,EAAQkT,YAAA;EAC1B,OAAOlT,MAAA;AACX;AAEO,SAASmT,0CAAMC,MAAkB;EACpC,IAAIpT,MAAA,GAAS,EAAE;EACf,KAAK,MAAMqT,KAAA,IAASD,MAAA,EAAQ;IACxBpT,MAAA,KAAW,EAAE;IACbA,MAAA,IAAU8Q,MAAA,CAAOuC,KAAA;EACrB;EACA,IAAAzR,yCAAK,EAAE5B,MAAA,KAAW,IAAAkD,yCAAY,EAAEkQ,MAAA,EAAQ;EACxC,OAAOpT,MAAA;AACX;AAEO,SAASsT,0CAAS3Q,CAAa,EAAEC,CAAa;EACjD,OAAOlC,UAAA,CAAWC,IAAI,CAACgC,CAAA,CAAEpD,GAAG,CAAC,CAACiB,OAAA,EAASrB,CAAA,KAAMqB,OAAA,GAAUoC,CAAC,CAACzD,CAAA,CAAE;AAC/D;AAEO,SAASoU,0CACZjH,OAAmB,EACnBkH,GAAe,EACfzU,MAAc,EACd2H,IAAc;EAEd,MAAM+M,GAAA,GAAM1D,IAAA,CAAK2D,KAAK,CAAC,CAAC3U,MAAA,GAAS2H,IAAA,CAAKJ,QAAQ,GAAG,KAAKI,IAAA,CAAKJ,QAAQ;EACnE,IAAImN,GAAA,GAAM,KACN,MAAM,IAAIzP,KAAA,CAAM,kCAAkCyP,GAAA,gBAAmB;EACzE,MAAME,SAAA,GAAY,C,GAAIH,GAAA,E,GAAQR,yCAAA,CAAMlC,MAAA,CAAO0C,GAAA,CAAIzU,MAAM,GAAG,GAAG;EAC3D,MAAM6U,KAAA,GAAQZ,yCAAA,CAAM,EAAE,EAAEtM,IAAA,CAAKH,SAAS;EACtC,MAAMsN,OAAA,GAAUb,yCAAA,CAAMlC,MAAA,CAAO/R,MAAA,GAAS;EACtC,MAAM+U,GAAA,GAAMpN,IAAA,CAAKF,OAAO,CACpB9F,UAAA,CAAWC,IAAI,CAAC,C,GACTiT,KAAA,E,GACAtH,OAAA,E,GACAuH,OAAA,E,GACAb,yCAAA,CAAM,EAAE,EAAE,I,GACVW,SAAA,CACN;EAEL,MAAMI,OAAA,GAA6B,EAAE;EACrCA,OAAA,CAAQ3U,IAAI,CACRsH,IAAA,CAAKF,OAAO,CAAC9F,UAAA,CAAWC,IAAI,CAAC,C,GAAImT,GAAA,E,GAAQd,yCAAA,CAAM,EAAE,EAAE,I,GAAOW,SAAA,CAAU;EAExE,KAAK,IAAIxU,CAAA,GAAI,GAAGA,CAAA,IAAKsU,GAAA,EAAKtU,CAAA,IACtB4U,OAAA,CAAQ3U,IAAI,CACRsH,IAAA,CAAKF,OAAO,CACR9F,UAAA,CAAWC,IAAI,CAAC,C,GACT2S,yCAAA,CAASQ,GAAA,EAAKC,OAAO,CAAC5U,CAAA,GAAI,EAAE,G,GAC5B6T,yCAAA,CAAMlC,MAAA,CAAO3R,CAAA,GAAI,IAAI,I,GACrBwU,SAAA,CACN;EAIb,MAAMK,iBAAA,GAAmC,EAAE;EAC3C,KAAK,MAAMvB,IAAA,IAAQsB,OAAA,EAASC,iBAAA,CAAkB5U,IAAI,IAAIqT,IAAA;EACtD,OAAO/R,UAAA,CAAWC,IAAI,CAACqT,iBAAA,CAAkB3U,KAAK,CAAC,GAAGN,MAAA;AACtD;AAEO,SAASkV,0CACZ3H,OAAmB,EACnBkH,GAAe,EACfzU,MAAc,EACd2H,IAAc;EAEd,MAAMiN,SAAA,GAAY,C,GAAIH,GAAA,E,GAAQR,yCAAA,CAAMlC,MAAA,CAAO0C,GAAA,CAAIzU,MAAM,GAAG,GAAG;EAC3D,MAAMmV,aAAA,GAAgB,C,GACf5H,OAAA,E,GACA0G,yCAAA,CAAMlC,MAAA,CAAO/R,MAAA,GAAS,I,GACtB4U,SAAA,CACN;EACD,OAAOjN,IAAA,CAAKF,OAAO,CAAC9F,UAAA,CAAWC,IAAI,CAACuT,aAAA,GAAgB7U,KAAK,CAAC,GAAGN,MAAA;AACjE;AAEO,SAASoV,0CACZ7H,OAAmB,EACnB8H,KAAa,EACbZ,GAAe,EACfa,OAAe,EACfC,MAAc,EACdC,UAAkB,EAClBC,MAKe,EACf9N,IAAc;EAEd,MAAM+N,aAAA,GAAgBL,KAAA,GAAQE,MAAA,GAASC,UAAA;EACvC,MAAMP,iBAAA,GAAoBQ,MAAA,CAAOlI,OAAA,EAASkH,GAAA,EAAKiB,aAAA,EAAe/N,IAAA;EAC9D,MAAMgO,OAAA,GAAgC,EAAE;EACxC,KAAK,IAAIvV,CAAA,GAAI,GAAGA,CAAA,GAAIiV,KAAA,EAAOjV,CAAA,IAAK;IAC5B,MAAMwV,OAAA,GAAyB,EAAE;IACjC,KAAK,IAAIvS,CAAA,GAAI,GAAGA,CAAA,GAAIkS,MAAA,EAAQlS,CAAA,IAAK;MAC7B,MAAMwS,SAAA,GAAYL,UAAA,IAAcnS,CAAA,GAAIjD,CAAA,GAAImV,MAAK;MAC7C,MAAMO,EAAA,GAAKb,iBAAA,CAAkB3U,KAAK,CAC9BuV,SAAA,EACAA,SAAA,GAAYL,UAAA;MAEhBI,OAAA,CAAQvV,IAAI,CAAC,IAAA6D,yCAAE,EAAEkQ,yCAAA,CAAM0B,EAAA,GAAKR,OAAA;IAChC;IACAK,OAAA,CAAQtV,IAAI,CAACuV,OAAA;EACjB;EACA,OAAOD,OAAA;AACX;AAEO,SAASI,0CACZxI,OAAmB,EACnB8H,KAAa,EACbZ,GAAe;EAEf,OAAOW,yCAAA,CAAY7H,OAAA,EAAS8H,KAAA,EAAOZ,GAAA,GAAK,GAAApS,yCAAA,GAAG,GAAG,IAAImS,yCAAA,GAAkB,GAAAlN,yCAAK;AAC7E;AAEO,SAAS0O,0CACZzI,OAAmB,EACnB8H,KAAa,EACbZ,GAAe;EAEf,OAAOW,yCAAA,CAAY7H,OAAA,EAAS8H,KAAA,EAAOZ,GAAA,GAAK,GAAApS,yCAAA,GAAG,GAAG,IAAImS,yCAAA,GAAkB,GAAAlN,yCAAK;AAC7E;;;;;;;;;ACrIO,SAASqH,0CAAOX,IAAgB;EACnC,MAAMhO,MAAA,GAAS;EACf,MAAMiO,GAAA,GAAM,IAAAC,yCAAY,EACpBlO,MAAA,EACA2B,UAAA,CAAWC,IAAI,CAAC,C,GAAIoM,IAAA,EAAM,EAAE,GAC5B,IAAIhF,WAAA,GAAcC,MAAM,CAAC,yBACzBtH,UAAA,CAAWC,IAAI,CAAC,CAAC,GAAG5B,MAAA,CAAO;EAE/B,OAAO,KAAI,GAAA6N,yCAAS,EAAE,IAAA3J,yCAAE,EAAE,IAAAC,yCAAY,EAAE8J,GAAA,EAAK,QAAQ,IAAA/G,yCAAQ,EAAE8E,CAAC;AACpE;AAEO,SAASiK,0CAAeC,GAAe,EAAEC,IAAgB;EAC5D,OAAO,IAAAjI,yCAAY,EAAE,MAAUgI,GAAA,EAAKC,IAAA,EAAMxU,UAAA,CAAWC,IAAI,CAAC,EAAE;AAChE;AAEO,SAASwU,0CACZC,QAAoB,EACpB7T,KAAa;EAEb,MAAM2T,IAAA,GAAO,IAAA5E,yCAAS,EAAE/O,KAAA,EAAO,GAAG;EAClC,MAAM0T,GAAA,GAAMG,QAAA,CAAS3U,OAAO;EAC5B,MAAM4U,MAAA,GAAS3U,UAAA,CAAWC,IAAI,CAACsU,GAAA,CAAI1V,GAAG,CAAEkQ,CAAA,IAAMA,CAAA,GAAI;EAClD,MAAM6F,QAAA,GAAWN,yCAAA,CAAeC,GAAA,EAAKC,IAAA;EACrC,MAAMK,QAAA,GAAWP,yCAAA,CAAeK,MAAA,EAAQH,IAAA;EACxC,MAAMM,SAAA,GAA2B,EAAE;EACnC,KAAK,IAAIrW,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAKA,CAAA,IACrBqW,SAAA,CAAUpW,IAAI,IAAI,IAAA8L,yCAAM,EAAEoK,QAAA,CAASjW,KAAK,CAACF,CAAA,GAAI,IAAI,CAACA,CAAA,GAAI,KAAK;EAC/D,KAAK,IAAIA,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAKA,CAAA,IACrBqW,SAAA,CAAUpW,IAAI,IAAI,IAAA8L,yCAAM,EAAEqK,QAAA,CAASlW,KAAK,CAACF,CAAA,GAAI,IAAI,CAACA,CAAA,GAAI,KAAK;EAC/D,OAAO,IAAA+L,yCAAM,EAAExK,UAAA,CAAWC,IAAI,CAAC6U,SAAA;AACnC;AAEO,SAAS9G,0CAAc0G,QAAoB,EAAE7T,KAAa;EAC7D,OAAOmM,yCAAA,CAAOyH,yCAAA,CAAoBC,QAAA,EAAU7T,KAAA;AAChD;AAEO,SAASqN,0CACZwG,QAAoB,EACpB7T,KAAa;EAEb,MAAMmF,IAAA,GAAO,IAAAwE,yCAAM,EACfxK,UAAA,CAAWC,IAAI,CAAC,C,GACTyU,QAAA,CAAS7H,KAAK,GAAG9M,OAAO,I,GACxB,IAAA6P,yCAAS,EAAE/O,KAAA,EAAO,GAAG,OAC3B;EAEL,OAAO,IAAAqL,yCAAS,EAAEO,SAAS,CAAC,CAAC,IAAAP,yCAAS,EAAE/N,SAAS,CAAC6H,IAAA,GAAO0O,QAAA,CAAS;AACtE;AAEO,SAAStG,0CACZ2G,QAAuB,EACvBlU,KAAa;EAEb,MAAMmF,IAAA,GAAO,IAAAwE,yCAAM,EACfxK,UAAA,CAAWC,IAAI,CAAC,C,GAAI8U,QAAA,CAAShV,OAAO,I,GAAO,IAAA6P,yCAAS,EAAE/O,KAAA,EAAO,GAAG,OAAO;EAE3E,OAAOkU,QAAA,CAASzT,GAAG,CACf,IAAAyG,yCAAY,EAAEyB,UAAU,GAAG1I,QAAQ,CAAC,IAAAoL,yCAAS,EAAE/N,SAAS,CAAC6H,IAAA,EAAM3E,KAAK;AAE5E;AAEO,SAAS2T,0CACZD,QAAuB,EACvBlU,KAAa;EAEb,MAAMmF,IAAA,GAAO,IAAAwE,yCAAM,EACfxK,UAAA,CAAWC,IAAI,CAAC,C,GAAI8U,QAAA,CAAShV,OAAO,I,GAAO,IAAA6P,yCAAS,EAAE/O,KAAA,EAAO,GAAG,OAAO;EAE3E,OAAOkU,QAAA,CAASzT,GAAG,CACf,IAAAyG,yCAAY,EAAE4B,UAAU,GAAG7I,QAAQ,CAAC,IAAAoL,yCAAS,EAAE/N,SAAS,CAAC6H,IAAA,EAAM3E,KAAK;AAE5E;;;;;;AC/EO,MAAM4T,yCAAA,GAAY;AAElB,SAASC,0CAAQV,IAAgB,EAAED,GAAe;EACrD,MAAMvO,IAAA,GAAO,KAAI,GAAAC,sBAAA,CAAAC,YAAA,CAAE,EAAE,WAAW,cAAc;IAC1CiP,OAAA,EAAS;MAAEC,MAAA,EAAQ;MAAc/T,KAAA,EAAOmT;IAAK;EACjD;EACAxO,IAAA,CAAKG,MAAM,CAACoO,GAAA;EACZ,OAAOvO,IAAA,CAAKI,OAAO,CAAC;AACxB;AAEO,SAASiP,0CACZhX,MAAc,EACdiX,GAAe,EACfC,IAAgB;EAEhB,MAAMC,MAAA,GAASnG,IAAA,CAAKoG,IAAI,CAACpX,MAAA,GAAS4W,yCAAA;EAClC,IAAIS,YAAA,GAAe;EACnB,MAAMpJ,GAAA,GAAqB,EAAE;EAC7B,IAAI2F,IAAA,GAAOjS,UAAA,CAAWC,IAAI,CAAC,EAAE;EAC7B,KAAK,IAAIxB,CAAA,GAAI,GAAGA,CAAA,IAAK+W,MAAA,EAAQ/W,CAAA,IAAK;IAC9BwT,IAAA,GAAOiD,yCAAA,CACHI,GAAA,EACAtV,UAAA,CAAWC,IAAI,CAACxB,CAAA,KAAM,IAAI,C,GAAI8W,IAAA,EAAM,EAAE,GAAG,C,GAAItD,IAAA,E,GAASsD,IAAA,EAAM9W,CAAA,CAAE;IAElE,IAAIkX,OAAA,GAAUtX,MAAA,GAASqX,YAAA;IACvB,IAAIC,OAAA,GAAUV,yCAAA,EAAWU,OAAA,GAAUV,yCAAA;IACnC3I,GAAA,CAAI5N,IAAI,IAAIuT,IAAA,CAAKtT,KAAK,CAAC,GAAGgX,OAAA;IAC1BD,YAAA,IAAgBC,OAAA;EACpB;EACA,IAAAzU,yCAAK,EAAEwU,YAAA,KAAiBrX,MAAA;EACxB,OAAO2B,UAAA,CAAWC,IAAI,CAACqM,GAAA;AAC3B;AAEO,SAASC,0CACZlO,MAAc,EACduX,GAAe,EACfpB,IAAgB,EAChBe,IAAgB;EAEhB,OAAOF,yCAAA,CAAOhX,MAAA,EAAQ6W,yCAAA,CAAQV,IAAA,EAAMoB,GAAA,GAAML,IAAA;AAC9C;;;;;;AC1CO,MAAMM,yCAAA,GAAgB;AAEtB,SAASrL,0CAAQoB,OAAmB;EACvC,MAAM5F,IAAA,GAAO,KAAI,GAAAC,sBAAA,CAAAC,YAAA,CAAE,EAAE,WAAW;EAChCF,IAAA,CAAKG,MAAM,CAACyF,OAAA;EACZ,OAAO5F,IAAA,CAAKI,OAAO,CAAC;AACxB;AAEO,SAAS0P,0CAAQlK,OAAmB;EACvC,OAAO5L,UAAA,CAAWC,IAAI,CAAC,C,GAChBuK,yCAAA,CAAQxK,UAAA,CAAWC,IAAI,CAAC,C,GAAI2L,OAAA,EAAS,EAAE,I,GACvCpB,yCAAA,CAAQxK,UAAA,CAAWC,IAAI,CAAC,C,GAAI2L,OAAA,EAAS,EAAE,GAC7C;AACL;AAEO,SAASmK,0CAAQnK,OAAmB,EAAEoK,CAAa;EACtD,IAAIA,CAAA,CAAE3X,MAAM,GAAGwX,yCAAA,EAAeG,CAAA,GAAIxL,yCAAA,CAAQwL,CAAA;EAC1C,OAAOA,CAAA,CAAE3X,MAAM,GAAGwX,yCAAA,EAAeG,CAAA,GAAIhW,UAAA,CAAWC,IAAI,CAAC,C,GAAI+V,CAAA,EAAG,EAAE;EAC9D,MAAMC,KAAA,GAAuB,EAAE;EAC/B,KAAK,IAAIxX,CAAA,GAAI,GAAGA,CAAA,GAAIoX,yCAAA,EAAepX,CAAA,IAAKwX,KAAA,CAAMvX,IAAI,CAACsX,CAAC,CAACvX,CAAA,CAAE,GAAG;EAC1D,MAAMyX,KAAA,GAAuB,EAAE;EAC/B,KAAK,IAAIzX,CAAA,GAAI,GAAGA,CAAA,GAAIoX,yCAAA,EAAepX,CAAA,IAAKyX,KAAA,CAAMxX,IAAI,CAACsX,CAAC,CAACvX,CAAA,CAAE,GAAG;EAC1D,OAAO+L,yCAAA,CACHxK,UAAA,CAAWC,IAAI,CAAC,C,GACTgW,KAAA,E,GACAzL,yCAAA,CAAQxK,UAAA,CAAWC,IAAI,CAAC,C,GAAIiW,KAAA,E,GAAUtK,OAAA,CAAQ,GACpD;AAET;;;;;AC7BO,SAASvI,yCAAOlC,IAAY,EAAEF,QAAgB,EAAEkV,MAAc;EACjE,IAAIlV,QAAA,GAAW,EAAE,EAAE,OAAO,EAAE,MACvB,IAAIE,IAAA,GAAO,EAAE,IAAIA,IAAA,GAAOgV,MAAA,EAAQhV,IAAA,GAAOoB,yCAAA,CAAIpB,IAAA,EAAMgV,MAAA;EACtD,IAAI7W,MAAA,GAAS,EAAE;EACf,OAAO2B,QAAA,GAAW,EAAE,EAAE;IAClB,IAAI,CAACA,QAAA,GAAW,EAAE,IAAI,EAAE,EAAE3B,MAAA,GAASiD,yCAAA,CAAIjD,MAAA,GAAS6B,IAAA,EAAMgV,MAAA;IACtDlV,QAAA,KAAa,EAAE;IACfE,IAAA,GAAOoB,yCAAA,CAAIpB,IAAA,GAAOA,IAAA,EAAMgV,MAAA;EAC5B;EACA,OAAO7W,MAAA;AACX;AAEO,SAASiD,0CAAIlB,KAAa,EAAEsS,OAAe;EAC9C,OAAO,CAACtS,KAAC,GAAQsS,OAAA,GAAWA,OAAM,IAAKA,OAAA;AAC3C;AAEO,SAAS/S,0CAAUS,KAAa,EAAEsS,OAAe;EACpD,OAAO,CAACtS,KAAC,GAAQsS,OAAA,GAAWA,OAAM,IAAKA,OAAA;AAC3C;;;;;;;ACIO,SAASyC,0CAAK5U,CAAM;EACvB,MAAM6U,KAAA,GAAQ,IAAA9T,yCAAE,EAAEf,CAAA,CAAE7D,QAAQ,CAAC,EAAE,CAAC0D,KAAK,EAAE,EAAE,MAAM,EAAE;EACjD,MAAMiV,KAAA,GAAQ9U,CAAA,CAAE7D,QAAQ,CAAC,EAAE,CAAC0D,KAAK,KAAK,EAAE;EACxC,MAAMkV,KAAA,GAAQ,IAAAhU,yCAAE,EAAEf,CAAA,CAAE7D,QAAQ,CAAC,EAAE,CAAC0D,KAAK,EAAE,EAAE,MAAM,EAAE;EACjD,OAAOgV,KAAA,IAAUC,KAAA,IAASC,KAAA,GAAS,EAAE,GAAG,EAAE;AAC9C;AAEO,SAASC,0CAAW7S,CAAM;EAC7B,MAAM8S,YAAA,GAAe,IAAA/P,yCAAG,EACnB1F,GAAG,CAAC,EAAE,EACNF,QAAQ,CAAC6C,CAAA,CAAE3C,GAAG,CAAC,EAAE,GACjBM,GAAG,CAAC,IAAAoF,yCAAG,EAAE5F,QAAQ,CAAC6C,CAAA,CAAE3C,GAAG,CAAC,EAAE;EAC/B,MAAM0V,MAAA,GAAS,IAAA9P,yCAAM,EAAE9F,QAAQ,CAAC2V,YAAA,CAAanV,GAAG,CAAC,KAAI,GAAA9B,yCAAC,GAAE,GAAAkB,yCAAA,GAAG,EAAE;EAC7D,IAAIiW,MAAA,GAAS,IAAAhQ,yCAAM,EAAEnG,MAAM,GAAGM,QAAQ,CAAC2V,YAAA;EACvCE,MAAA,GAASA,MAAA,CAAO5U,MAAM,CAAC,EAAE,IAAI,IAAA4E,yCAAM,EAAE7F,QAAQ,EAAC,GAAA4F,yCAAG,KAAKiQ,MAAA;EACtD,MAAMC,OAAA,GAAUD,MAAA,CAAO3V,GAAG,CAAC,EAAE;EAC7B,MAAM6V,OAAA,GAAU,IAAAjQ,yCAAM,EAAE9F,QAAQ,CAAC8V,OAAA,EAC5BtV,GAAG,CAAC,IAAAqF,yCAAM,EAAE7F,QAAQ,CAAC4V,MAAA,EAAQ5V,QAAQ,CAAC6V,MAAA,CAAO3V,GAAG,CAAC,EAAE,IACnDM,GAAG,CAACoV,MAAA,CAAO1V,GAAG,CAAC,EAAE;EACtB,IAAI8V,KAAA,GAAQF,OAAA,CAAQ5V,GAAG,CAAC,EAAE;EAC1B,MAAM+V,KAAA,GAAQF,OAAA,CAAQ/V,QAAQ,CAACgW,KAAA;EAC/BA,KAAA,GAAQA,KAAA,CAAMhW,QAAQ,CAACiW,KAAA,EAAOjW,QAAQ,CAAC8V,OAAA;EACvC,IAAII,aAAA,GAAgBD,KAAA,CAAMjW,QAAQ,CAACgW,KAAA,CAAM9V,GAAG,CAAC,CAAC,IAAAN,yCAAA,KAAK,EAAE,GAAG,EAAE,IAAI,GAAG;EACjE,KAAK,MAAMxC,IAAA,KAAQ,GAAAiJ,yCAAW,GAAG;IAC7B,IAAItE,EAAA,GAAKmU,aAAA,CAAclW,QAAQ,CAAC5C,IAAA;IAChC,IAAI2E,EAAA,CAAG7B,GAAG,CAAC,EAAE,EAAEF,QAAQ,CAAC8V,OAAA,EAAS7U,MAAM,CAAC8U,OAAA,GAAU;MAC9C,IAAIT,yCAAA,CAAKvT,EAAA,MAAQuT,yCAAA,CAAKzS,CAAA,GAAId,EAAA,GAAKA,EAAA,CAAGrC,MAAM;MACxC,IAAAU,yCAAK,EAAEkV,yCAAA,CAAKvT,EAAA,MAAQuT,yCAAA,CAAKzS,CAAA;MACzB,OAAO,KAAI,GAAAoE,yCAAY,EACnB2O,MAAA,CAAO5V,QAAQ,CAAC6V,MAAA,GAChB9T,EAAA,CAAG/B,QAAQ,CAAC6V,MAAA,CAAO3V,GAAG,CAAC,EAAE,IACzB2V,MAAA,EACA,QACA,GAAAnR,yCAAa;IAErB;EACJ;EACA,MAAMyR,MAAA,GAAS,IAAAvQ,yCAAG,EAAE5F,QAAQ,CAAC6C,CAAA,CAAE3C,GAAG,CAAC,EAAE,GAAGF,QAAQ,CAAC4V,MAAA;EACjD,MAAMQ,MAAA,GAASP,MAAA;EACf,MAAMQ,OAAA,GAAU,IAAAzQ,yCAAG,EAAE1F,GAAG,CAAC,EAAE,EAAEF,QAAQ,CAAC6C,CAAA,CAAE3C,GAAG,CAAC,EAAE,GAAGF,QAAQ,CAAC+V,OAAA;EAC1D,MAAMO,OAAA,GAAUR,OAAA;EAChBI,aAAA,GAAgBA,aAAA,CAAclW,QAAQ,CAAC6C,CAAA,CAAE3C,GAAG,CAAC,EAAE;EAC/C,KAAK,MAAMqW,GAAA,KAAO,GAAApQ,yCAAG,GAAG;IACpB,IAAInE,EAAA,GAAKuU,GAAA,CAAIvW,QAAQ,CAACkW,aAAA;IACtB,IAAIlU,EAAA,CAAG9B,GAAG,CAAC,EAAE,EAAEF,QAAQ,CAACsW,OAAA,EAASrV,MAAM,CAACoV,OAAA,GAAU;MAC9C,IAAIf,yCAAA,CAAKtT,EAAA,MAAQsT,yCAAA,CAAKzS,CAAA,GAAIb,EAAA,GAAKA,EAAA,CAAGtC,MAAM;MACxC,IAAAU,yCAAK,EAAEkV,yCAAA,CAAKtT,EAAA,MAAQsT,yCAAA,CAAKzS,CAAA;MACzB,OAAO,KAAI,GAAAoE,yCAAY,EACnBkP,MAAA,CAAOnW,QAAQ,CAACoW,MAAA,GAChBpU,EAAA,CAAGhC,QAAQ,CAACoW,MAAA,CAAOlW,GAAG,CAAC,EAAE,IACzBkW,MAAA,EACA,QACA,GAAA1R,yCAAa;IAErB;EACJ;EACA,MAAM,IAAIlC,KAAA,CAAM;AACpB;AAEO,SAASgU,0CAAK9F,CAAgB;EACjC,OAAO,IAAAD,yCAAM,EAAEC,CAAA,EAAG,EAAC,GAAAlL,wCAAG,IAAG,GAAAC,yCAAG,IAAG,GAAAC,yCAAG,IAAG,GAAAC,yCAAG,EAAE,GAAE,GAAAjB,yCAAa;AAC7D;AAEO,SAAS+R,0CAAW5T,CAAM,EAAE6T,EAAQ;EACvC,IAAIC,EAAA,GAAKH,yCAAA,CAAKd,yCAAA,CAAW7S,CAAA;EACzB,IAAI6T,EAAA,EAAI;IACJ,MAAME,GAAA,GAAMJ,yCAAA,CAAKd,yCAAA,CAAWgB,EAAA;IAC5BC,EAAA,GAAKA,EAAA,CAAGnW,GAAG,CAACoW,GAAA;EAChB;EACA,OAAOD,EAAA,CAAG3W,QAAQ,EAAC,GAAAqE,yCAAG;AAC1B;AAEO,SAASuJ,0CAAMxK,KAAiB,EAAE4O,GAAe;EACpD,MAAMnV,QAAA,GAAW,IAAA0W,yCAAE,EAAEnQ,KAAA,EAAO,GAAG4O,GAAA,EAAKjU,GAAG,CAAE8Y,EAAA;IACrC,MAAMC,KAAA,GAAQD,EAAA,CAAG9Y,GAAG,CAAEwC,KAAA,IAAU,KAAI,GAAA7B,yCAAC,GAAE,GAAAkB,yCAAA,GAAGW,KAAA;IAC1C,OAAO,KAAI,GAAA9B,yCAAE,GAAE,GAAAmB,yCAAA,GAAGkX,KAAK,CAAC,EAAE,EAAEA,KAAK,CAAC,EAAE;EACxC;EACA,OAAOL,yCAAA,CAAW5Z,QAAQ,CAAC,EAAE,EAAEA,QAAQ,CAAC,EAAE;AAC9C;;;;;;;;ACzFO,SAASka,yCACZjU,CAAc,EACd4N,CAAc,EACd5J,EAAA,IAAS,GAAArC,yCAAQ,CAAC;EAElB,MAAMuS,GAAA,GAAMlU,CAAA,CAAEuE,OAAO;EACrB,MAAM4P,KAAA,GAAQ,KAAI,GAAAvY,yCAAC,EAAEoI,EAAA,CAAG7E,CAAC,EAAE,EAAE,EACxBjC,QAAQ,CAACgX,GAAA,CAAItW,CAAC,CAACR,GAAG,CAAC,EAAE,EAAEM,GAAG,CAACsG,EAAA,CAAG3F,CAAC,GAC/BL,MAAM,CAACkW,GAAA,CAAI3Y,CAAC,CAAC2B,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAEoI,EAAA,CAAG7E,CAAC,EAAE,EAAE;EAC1C,MAAMiV,CAAA,GAAIF,GAAA,CAAI3Y,CAAC,CAACwC,QAAQ,CAACmW,GAAA,CAAItW,CAAC,CAACV,QAAQ,CAACiX,KAAA;EACxC,OAAOvG,CAAA,CAAErS,CAAC,CAACwC,QAAQ,CAAC6P,CAAA,CAAEhQ,CAAC,CAACV,QAAQ,CAACiX,KAAA,GAAQpW,QAAQ,CAACqW,CAAA;AACtD;AAEO,SAASC,0CACZrU,CAAc,EACd9F,CAAc,EACd0T,CAAc;EAEd,MAAMsG,GAAA,GAAMlU,CAAA,CAAEuE,OAAO;EACrB,MAAM+P,GAAA,GAAMpa,CAAA,CAAEqK,OAAO;EACrB,IAAI2P,GAAA,CAAI/V,MAAM,CAACmW,GAAA,CAAI1X,MAAM,KAAK,OAAOgR,CAAA,CAAEhQ,CAAC,CAACG,QAAQ,CAACmW,GAAA,CAAItW,CAAC;EACvD,MAAMuW,KAAA,GAAQG,GAAA,CAAI/Y,CAAC,CAACwC,QAAQ,CAACmW,GAAA,CAAI3Y,CAAC,EAAEyC,MAAM,CAACsW,GAAA,CAAI1W,CAAC,CAACG,QAAQ,CAACmW,GAAA,CAAItW,CAAC;EAC/D,MAAMwW,CAAA,GAAIE,GAAA,CAAI/Y,CAAC,CACV2B,QAAQ,CAACgX,GAAA,CAAItW,CAAC,EACdG,QAAQ,CAACmW,GAAA,CAAI3Y,CAAC,CAAC2B,QAAQ,CAACoX,GAAA,CAAI1W,CAAC,GAC7BI,MAAM,CAACkW,GAAA,CAAItW,CAAC,CAACG,QAAQ,CAACuW,GAAA,CAAI1W,CAAC;EAChC,OAAOgQ,CAAA,CAAErS,CAAC,CAACwC,QAAQ,CAAC6P,CAAA,CAAEhQ,CAAC,CAACV,QAAQ,CAACiX,KAAA,GAAQpW,QAAQ,CAACqW,CAAA;AACtD;AAEO,SAASG,0CACZC,CAAS,EACT5G,CAAc,EACd1T,CAAc,EACd8J,EAAA,IAAS,GAAArC,yCAAQ,CAAC;EAElB,MAAM8S,MAAA,GAAS,IAAA7I,yCAAW,EAAE4I,CAAA;EAC5B,IAAIxU,CAAA,GAAI9F,CAAA;EACR,IAAI+F,CAAA,GAAI,IAAAjE,yCAAG,EAAEF,GAAG,CAACC,GAAG,CAACiI,EAAA,CAAG7E,CAAC;EACzB,KAAK,IAAItE,CAAA,GAAI,GAAGA,CAAA,GAAI4Z,MAAA,CAAOha,MAAM,EAAEI,CAAA,IAAK;IACpC,MAAM6Z,GAAA,GAAMT,wCAAA,CAAejU,CAAA,EAAG4N,CAAA,EAAG5J,EAAA;IACjC/D,CAAA,GAAIA,CAAA,CAAE/C,QAAQ,CAAC+C,CAAA,EAAG/C,QAAQ,CAACwX,GAAA;IAC3B1U,CAAA,GAAIA,CAAA,CAAE9C,QAAQ,CAAC,KAAI,GAAAtB,yCAAC,EAAEoI,EAAA,CAAG7E,CAAC,EAAE,EAAE;IAC9B,IAAIsV,MAAM,CAAC5Z,CAAA,CAAE,KAAK,GAAG;MACjB,MAAM8Z,GAAA,GAAMN,yCAAA,CAAYrU,CAAA,EAAG9F,CAAA,EAAG0T,CAAA;MAC9B3N,CAAA,GAAIA,CAAA,CAAE/C,QAAQ,CAACyX,GAAA;MACf3U,CAAA,GAAIA,CAAA,CAAEtC,GAAG,CAACxD,CAAA;IACd;EACJ;EACA,OAAO+F,CAAA;AACX;AAEO,SAAS2U,0CAAoB1Y,OAAa,EAAE8H,EAAA,IAAS,GAAArC,yCAAQ,CAAC;EACjE,IAAIqC,EAAA,CAAGoO,CAAC,KAAK,GAAG,EAAE;IACd,IAAIyC,GAAA,GAAM3Y,OAAA,CAAQkB,GAAG,CAAC,CAAC4G,EAAA,CAAG7E,CAAC,IAAI,EAAE,GAAG6E,EAAA,CAAG7E,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI6E,EAAA,CAAGyC,CAAC;IAC3DoO,GAAA,GAAMA,GAAA,CAAIhY,OAAO,CAAC,GAAGK,QAAQ,CAAC2X,GAAA;IAC9BA,GAAA,GAAMA,GAAA,CAAIhY,OAAO,CAAC,GAAGmB,MAAM,CAAC6W,GAAA;IAC5B,OAAOA,GAAA;EACX,OAAO,OAAO3Y,OAAA,CAAQkB,GAAG,CAAC,CAAC4G,EAAA,CAAG7E,CAAC,IAAI6E,EAAA,CAAGoO,CAAC,GAAG,EAAE,IAAIpO,EAAA,CAAGyC,CAAC;AACxD;AAEO,SAASqO,0CACZlH,CAAgB,EAChB1T,CAAgB,EAChB8J,EAAA,IAAS,GAAArC,yCAAQ,CAAC;EAElB,MAAM5B,CAAA,GAAI,IAAA4B,yCAAQ,EAAE/D,CAAC,GAAG,EAAE;EAC1B,IAAI4W,CAAA,GAAIzU,CAAA,GAAI,EAAE;EACdyU,CAAA,GAAIA,CAAA,GAAI,EAAE,GAAG,CAACA,CAAA,GAAIA,CAAA;EAClB,OAAOI,yCAAA,CAAoBL,yCAAA,CAAWC,CAAA,EAAG5G,CAAA,CAAE9I,QAAQ,IAAI5K,CAAA,CAAE4K,QAAQ,KAAKd,EAAA;AAC1E;AAEO,SAASkH,0CACZ6J,EAAmB,EACnBC,EAAmB,EACnBhR,EAAA,IAAS,GAAArC,yCAAQ,CAAC;EAElB,MAAM5B,CAAA,GAAI,IAAA4B,yCAAQ,EAAE/D,CAAC,GAAG,EAAE;EAC1B,IAAI4W,CAAA,GAAIzU,CAAA,GAAI,EAAE;EACdyU,CAAA,GAAIA,CAAA,GAAI,EAAE,GAAG,CAACA,CAAA,GAAIA,CAAA;EAClB,IAAIS,IAAA,GAAO,IAAAjZ,yCAAG,EAAEF,GAAG,CAACC,GAAG,CAACiI,EAAA,CAAG7E,CAAC;EAC5B,KAAK,IAAItE,CAAA,GAAI,GAAGA,CAAA,GAAIma,EAAA,CAAGva,MAAM,EAAEI,CAAA,IAC3Boa,IAAA,GAAOA,IAAA,CAAK/X,QAAQ,CAChBqX,yCAAA,CAAWC,CAAA,EAAGO,EAAE,CAACla,CAAA,CAAE,CAACiK,QAAQ,IAAIkQ,EAAE,CAACna,CAAA,CAAE,CAACiK,QAAQ,IAAId,EAAA;EAG1D,OAAO4Q,yCAAA,CAAoBK,IAAA,EAAMjR,EAAA;AACrC;;;;;;ACvFO,SAASsF,0CACZ4L,EAAc,EACdlN,OAAmB,EACnBkH,GAAe;EAEf,OAAO,IAAApE,yCAAI,EAAE9C,OAAA,EAASkH,GAAA,EAAKhS,QAAQ,CAACgY,EAAA,CAAGzX,KAAK;AAChD;AAEO,SAASkM,0CACZwL,EAAiB,EACjBnN,OAAmB,EACnB0B,SAAwB,EACxBwF,GAAe;EAEf,IAAI,CAACxF,SAAA,CAAUlD,OAAO,MAAM,CAAC2O,EAAA,CAAG3O,OAAO,IAAI,OAAO;EAClD,MAAMrH,CAAA,GAAI,IAAA2L,yCAAI,EAAE9C,OAAA,EAASkH,GAAA;EACzB,MAAMnT,GAAA,GAAM,IAAAC,yCAAG,EAAEF,GAAG,CAACC,GAAG,CAAC,IAAA4F,yCAAQ,EAAExC,CAAC;EACpC,MAAM8L,aAAA,GAAgB,IAAAC,yCAAc,EAChC,CAACiK,EAAA,EAAI,IAAAhR,yCAAY,EAAEyB,UAAU,GAAGhJ,MAAM,GAAG,EACzC,CAACuC,CAAA,EAAGuK,SAAA,CAAU;EAElB,OAAOuB,aAAA,CAAc9M,MAAM,CAACpC,GAAA;AAChC;AAEO,SAAS8N,0CAAiBD,UAA2B;EACxD,IAAI,CAACA,UAAA,CAAWnP,MAAM,EAClB,MAAM,IAAIiF,KAAA,CAAM;EACpB,IAAImJ,SAAA,GAAYe,UAAU,CAAC,EAAE;EAC7B,IAAAtM,yCAAK,EAAEuL,SAAA,CAAUrC,OAAO;EACxB,KAAK,MAAMkD,SAAA,IAAaE,UAAA,CAAW7O,KAAK,CAAC,IAAI;IACzC,IAAAuC,yCAAK,EAAEoM,SAAA,CAAUlD,OAAO;IACxBqC,SAAA,GAAYA,SAAA,CAAUnL,GAAG,CAACgM,SAAA;EAC9B;EACA,OAAOb,SAAA;AACX;AAEO,SAASqB,0CACZkL,GAAoB,EACpBC,EAAgB,EAChB3L,SAAwB,EACxBwF,GAAe;EAEf,IAAIkG,GAAA,CAAI3a,MAAM,KAAK4a,EAAA,CAAG5a,MAAM,IAAI,CAAC2a,GAAA,CAAI3a,MAAM,EAAE,OAAO;EACpD,IAAI,CAACiP,SAAA,CAAUlD,OAAO,IAAI,OAAO;EACjC,MAAM8O,EAAA,GAAK,CAAC5L,SAAA,CAAU;EACtB,MAAM6L,EAAA,GAAK,CAAC,IAAApR,yCAAY,EAAEyB,UAAU,GAAGhJ,MAAM,GAAG;EAChD,KAAK,IAAI/B,CAAA,GAAI,GAAGA,CAAA,GAAIua,GAAA,CAAI3a,MAAM,EAAEI,CAAA,IAAK;IACjC,IAAI,CAACua,GAAG,CAACva,CAAA,CAAE,CAAC2L,OAAO,IAAI,OAAO;IAC9B8O,EAAA,CAAGxa,IAAI,CAAC,IAAAgQ,yCAAI,EAAEuK,EAAE,CAACxa,CAAA,CAAE,EAAEqU,GAAA;IACrBqG,EAAA,CAAGza,IAAI,CAACsa,GAAG,CAACva,CAAA,CAAE;EAClB;EACA,OAAO,IAAAmB,yCAAG,EAAEF,GAAG,CAACC,GAAG,CAAC,IAAA4F,yCAAQ,EAAExC,CAAC,EAAEhB,MAAM,CAAC,IAAA+M,yCAAc,EAAEqK,EAAA,EAAID,EAAA;AAChE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}