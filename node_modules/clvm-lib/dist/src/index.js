var $fpZC2$chiabls = require("chia-bls");


function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

$parcel$export(module.exports, "Program", () => $9636c8954d640602$export$b6c59b989905b650);
var $a550084cece3e4e0$exports = {};

$parcel$export($a550084cece3e4e0$exports, "ParserError", () => $a550084cece3e4e0$export$d125cf0331bff9a9);
class $a550084cece3e4e0$export$d125cf0331bff9a9 extends Error {
    constructor(message){
        super(message);
        Object.setPrototypeOf(this, $a550084cece3e4e0$export$d125cf0331bff9a9.prototype);
    }
}



const $94ca46fd7d128ba2$export$eebaaf2b24d91f63 = {
    q: 0x01n,
    a: 0x02n,
    i: 0x03n,
    c: 0x04n,
    f: 0x05n,
    r: 0x06n,
    l: 0x07n,
    x: 0x08n,
    "=": 0x09n,
    ">s": 0x0an,
    sha256: 0x0bn,
    substr: 0x0cn,
    strlen: 0x0dn,
    concat: 0x0en,
    "+": 0x10n,
    "-": 0x11n,
    "*": 0x12n,
    "/": 0x13n,
    divmod: 0x14n,
    ">": 0x15n,
    ash: 0x16n,
    lsh: 0x17n,
    logand: 0x18n,
    logior: 0x19n,
    logxor: 0x1an,
    lognot: 0x1bn,
    point_add: 0x1dn,
    pubkey_for_exp: 0x1en,
    not: 0x20n,
    any: 0x21n,
    all: 0x22n,
    ".": 0x23n,
    softfork: 0x24n
};


const $1382d0708deed0de$export$b81a09a7187d4786 = `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&'()*+,-./:;<=>?@[\]^_\`{|}~ 	

`;





const $69b3f00f8a7733d7$export$2ede34752a982e57 = (0, $fpZC2$chiabls.encodeBigInt)((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["q"]);
const $69b3f00f8a7733d7$export$688e2fe60354a4fd = (0, $fpZC2$chiabls.encodeBigInt)((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["a"]);
const $69b3f00f8a7733d7$export$15235ce324d8441e = (0, $fpZC2$chiabls.encodeBigInt)((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["f"]);
const $69b3f00f8a7733d7$export$11418da7d6f16373 = (0, $fpZC2$chiabls.encodeBigInt)((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["r"]);
const $69b3f00f8a7733d7$export$2542912e97e68f4e = (0, $fpZC2$chiabls.encodeBigInt)((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["c"]);
const $69b3f00f8a7733d7$export$9d2b043fe7614ba5 = (0, $fpZC2$chiabls.encodeBigInt)((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["x"]);



class $17c1ef024405b6ea$export$a4dd1bf5a8aa5573 extends Set {
    isSuperset(set) {
        for (const item of set)if (!this.has(item)) return false;
        return true;
    }
    isSubset(set) {
        for (const item of this)if (!set.has(item)) return false;
        return true;
    }
    isSupersetProper(set) {
        return this.isSuperset(set) && !this.isSubset(set);
    }
    isSubsetProper(set) {
        return this.isSubset(set) && !this.isSuperset(set);
    }
    equals(set) {
        return this.isSubset(set) && this.isSuperset(set);
    }
    union(set) {
        const union = new $17c1ef024405b6ea$export$a4dd1bf5a8aa5573(this);
        for (const item of set)union.add(item);
        return union;
    }
    intersection(set) {
        const intersection = new $17c1ef024405b6ea$export$a4dd1bf5a8aa5573();
        for (const item of set)if (this.has(item)) intersection.add(item);
        return intersection;
    }
    symmetricDifference(set) {
        const difference = new $17c1ef024405b6ea$export$a4dd1bf5a8aa5573(this);
        for (const item of set)if (difference.has(item)) difference.delete(item);
        else difference.add(item);
        return difference;
    }
    difference(set) {
        const difference = new $17c1ef024405b6ea$export$a4dd1bf5a8aa5573(this);
        for (const item of set)difference.delete(item);
        return difference;
    }
    update(set) {
        for (const item of set)this.add(item);
        return this;
    }
    differenceUpdate(set) {
        for (const item of set)this.delete(item);
        return this;
    }
    symmetricDifferenceUpdate(set) {
        for (const item of set)if (this.has(item)) this.delete(item);
        else this.add(item);
        return this;
    }
    intersectionUpdate(set) {
        for (const item of this)if (!set.has(item)) this.delete(item);
        return this;
    }
    sort(sorter) {
        return new $17c1ef024405b6ea$export$a4dd1bf5a8aa5573([
            ...this
        ].sort(sorter));
    }
    map(mapper) {
        const result = new $17c1ef024405b6ea$export$a4dd1bf5a8aa5573();
        let index = 0;
        for (const item of this)result.add(mapper(item, index++, this));
        return result;
    }
    filter(predicate) {
        const result = new $17c1ef024405b6ea$export$a4dd1bf5a8aa5573();
        let index = 0;
        for (const item of this)if (predicate(item, index++, this)) result.add(item);
        return result;
    }
}



function $3f2125465f2f6884$export$7ac16079f594c861(left, right) {
    let mask = 1n;
    let tempPath = left;
    while(tempPath > 1n){
        right <<= 1n;
        mask <<= 1n;
        tempPath >>= 1n;
    }
    mask -= 1n;
    return right | left & mask;
}
class $3f2125465f2f6884$export$119c224dc5fdfaa6 {
    static top = new $3f2125465f2f6884$export$119c224dc5fdfaa6();
    static left = $3f2125465f2f6884$export$119c224dc5fdfaa6.top.first();
    static right = $3f2125465f2f6884$export$119c224dc5fdfaa6.top.rest();
    index;
    constructor(index = 1n){
        if (index < 0n) {
            const byteCount = (0, $fpZC2$chiabls.bigIntBitLength)(index) + 7 >> 3;
            const blob = (0, $fpZC2$chiabls.bigIntToBytes)(index, byteCount, "big", true);
            index = (0, $fpZC2$chiabls.bytesToBigInt)(Uint8Array.from([
                0,
                ...blob
            ]), "big", false);
        }
        this.index = index;
    }
    asPath() {
        const byteCount = (0, $fpZC2$chiabls.bigIntBitLength)(this.index) + 7 >> 3;
        return (0, $fpZC2$chiabls.bigIntToBytes)(this.index, byteCount, "big");
    }
    add(other) {
        return new $3f2125465f2f6884$export$119c224dc5fdfaa6($3f2125465f2f6884$export$7ac16079f594c861(this.index, other.index));
    }
    first() {
        return new $3f2125465f2f6884$export$119c224dc5fdfaa6(this.index * 2n);
    }
    rest() {
        return new $3f2125465f2f6884$export$119c224dc5fdfaa6(this.index * 2n + 1n);
    }
    toString() {
        return `NodePath: ${this.index}`;
    }
}






function $ec4be0719743fcdf$export$15d71aa2e69a0c29(program) {
    return (0, $9636c8954d640602$export$b6c59b989905b650).cons((0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["q"]), program);
}
function $ec4be0719743fcdf$export$57e68749c88bb462(program, args) {
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["a"]),
        program,
        args
    ]);
}
function $ec4be0719743fcdf$export$408b9eea5dcb5044(program, macroLookup) {
    return $ec4be0719743fcdf$export$57e68749c88bb462((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromText("com"),
        program,
        $ec4be0719743fcdf$export$15d71aa2e69a0c29(macroLookup)
    ]), (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).top.asPath()));
}
function $ec4be0719743fcdf$export$9692bc1ad98955fc(program, args) {
    return $ec4be0719743fcdf$export$57e68749c88bb462($ec4be0719743fcdf$export$15d71aa2e69a0c29(program), $ec4be0719743fcdf$export$15d71aa2e69a0c29(args));
}



const $c1f25f83b21fbca5$var$defaultMacroSources = [
    `
    ; we have to compile this externally, since it uses itself
    ;(defmacro defmacro (name params body)
    ;    (qq (list (unquote name) (mod (unquote params) (unquote body))))
    ;)
    (q . ("defmacro"
       (c (q . "list")
          (c (f 1)
             (c (c (q . "mod")
                   (c (f (r 1))
                      (c (f (r (r 1)))
                         (q . ()))))
                (q . ()))))))
    `,
    `
    ;(defmacro list ARGS
    ;    ((c (mod args
    ;        (defun compile-list
    ;               (args)
    ;               (if args
    ;                   (qq (c (unquote (f args))
    ;                         (unquote (compile-list (r args)))))
    ;                   ()))
    ;            (compile-list args)
    ;        )
    ;        ARGS
    ;    ))
    ;)
    (q "list"
        (a (q #a (q #a 2 (c 2 (c 3 (q))))
                 (c (q #a (i 5
                             (q #c (q . 4)
                                   (c 9 (c (a 2 (c 2 (c 13 (q))))
                                           (q)))
                             )
                             (q 1))
                           1)
                    1))
            1))
    `,
    `(defmacro function (BODY)
        (qq (opt (com (q . (unquote BODY))
                 (qq (unquote (macros)))
                 (qq (unquote (symbols)))))))`,
    `(defmacro if (A B C)
        (qq (a
            (i (unquote A)
               (function (unquote B))
               (function (unquote C)))
            @)))`,
    `(defmacro / (A B) (qq (f (divmod (unquote A) (unquote B)))))`
];
let $c1f25f83b21fbca5$var$defaultMacroLookupProgram;
function $c1f25f83b21fbca5$var$buildDefaultMacroLookup(evalAsProgram) {
    const run = (0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(a (com 2 3) 1)");
    for (const macroSource of $c1f25f83b21fbca5$var$defaultMacroSources){
        const macroProgram = (0, $9636c8954d640602$export$b6c59b989905b650).fromSource(macroSource);
        const env = (0, $9636c8954d640602$export$b6c59b989905b650).cons(macroProgram, $c1f25f83b21fbca5$var$defaultMacroLookupProgram);
        const newMacro = evalAsProgram(run, env).value;
        $c1f25f83b21fbca5$var$defaultMacroLookupProgram = (0, $9636c8954d640602$export$b6c59b989905b650).cons(newMacro, $c1f25f83b21fbca5$var$defaultMacroLookupProgram);
    }
    return $c1f25f83b21fbca5$var$defaultMacroLookupProgram;
}
function $c1f25f83b21fbca5$export$35ac38cd538ce3a4(evalAsProgram) {
    if (!$c1f25f83b21fbca5$var$defaultMacroLookupProgram || $c1f25f83b21fbca5$var$defaultMacroLookupProgram.isNull) {
        $c1f25f83b21fbca5$var$defaultMacroLookupProgram = (0, $9636c8954d640602$export$b6c59b989905b650).fromList([]);
        $c1f25f83b21fbca5$var$buildDefaultMacroLookup(evalAsProgram);
    }
    return $c1f25f83b21fbca5$var$defaultMacroLookupProgram;
}






function $b8dc7cb54aa9eaa3$export$633da1651c3bd3f9(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}










const $b28f999d37dccebe$var$atomMatch = new TextEncoder().encode("$");
const $b28f999d37dccebe$var$sexpMatch = new TextEncoder().encode(":");
function $b28f999d37dccebe$export$c85aa06d1e6a7731(bindings, key, valueProgram) {
    if (key in bindings) {
        if (!bindings[key].equals(valueProgram)) return null;
        return bindings;
    }
    return {
        ...bindings,
        [key]: valueProgram
    };
}
function $b28f999d37dccebe$export$4659b591c19bdf3d(pattern, sexp, knownBindings = {}) {
    if (!pattern.isCons) {
        if (sexp.isCons) return null;
        return (0, $fpZC2$chiabls.bytesEqual)(pattern.atom, sexp.atom) ? knownBindings : null;
    }
    const left = pattern.first;
    const right = pattern.rest;
    if (left.isAtom && (0, $fpZC2$chiabls.bytesEqual)(left.atom, $b28f999d37dccebe$var$atomMatch)) {
        if (sexp.isCons) return null;
        if (right.isAtom && (0, $fpZC2$chiabls.bytesEqual)(right.atom, $b28f999d37dccebe$var$atomMatch)) {
            if ((0, $fpZC2$chiabls.bytesEqual)(sexp.atom, $b28f999d37dccebe$var$atomMatch)) return {};
            return null;
        }
        return $b28f999d37dccebe$export$c85aa06d1e6a7731(knownBindings, right.toText(), sexp);
    }
    if (left.isAtom && (0, $fpZC2$chiabls.bytesEqual)(left.atom, $b28f999d37dccebe$var$sexpMatch)) {
        if (right.isAtom && (0, $fpZC2$chiabls.bytesEqual)(right.atom, $b28f999d37dccebe$var$sexpMatch)) {
            if ((0, $fpZC2$chiabls.bytesEqual)(sexp.atom, $b28f999d37dccebe$var$sexpMatch)) return {};
            return null;
        }
        return $b28f999d37dccebe$export$c85aa06d1e6a7731(knownBindings, right.toText(), sexp);
    }
    if (!sexp.isCons) return null;
    const newBindings = $b28f999d37dccebe$export$4659b591c19bdf3d(left, sexp.first, knownBindings);
    if (!newBindings) return newBindings;
    return $b28f999d37dccebe$export$4659b591c19bdf3d(right, sexp.rest, newBindings);
}


function $a985f73a592474fb$export$6eee28b7ff726723(program) {
    if (!program.isCons) return program.isNull;
    const operator = program.first;
    if (!operator.isCons) {
        const value = operator.atom;
        if ((0, $fpZC2$chiabls.bytesEqual)(value, (0, $69b3f00f8a7733d7$export$2ede34752a982e57))) return true;
        else if ((0, $fpZC2$chiabls.bytesEqual)(value, (0, $69b3f00f8a7733d7$export$9d2b043fe7614ba5))) return false;
    } else if (!$a985f73a592474fb$export$6eee28b7ff726723(operator)) return false;
    return program.rest.toList().every((item)=>$a985f73a592474fb$export$6eee28b7ff726723(item));
}
function $a985f73a592474fb$export$4b7046275197ae1c(program, evalAsProgram) {
    if ($a985f73a592474fb$export$6eee28b7ff726723(program) && !program.isNull) {
        const newProgram = evalAsProgram(program, (0, $9636c8954d640602$export$b6c59b989905b650).nil).value;
        program = (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(newProgram);
    }
    return program;
}
function $a985f73a592474fb$export$3ee5814c52647d49(program) {
    return program.isAtom && program.toBigInt() === 1n;
}
function $a985f73a592474fb$export$6e8a6ed2471a063e(program, _evalAsProgram) {
    const matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(a (q . (: . sexp)) (: . args))"), program);
    if (matched && $a985f73a592474fb$export$3ee5814c52647d49(matched["args"])) return matched["sexp"];
    return program;
}
function $a985f73a592474fb$export$840131dd5ee64358(args) {
    const matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(c (: . first) (: . rest))"), args);
    if (matched) return matched["first"];
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["f"]),
        args
    ]);
}
function $a985f73a592474fb$export$a540b74c4a2a7577(args) {
    const matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(c (: . first) (: . rest))"), args);
    if (matched) return matched["rest"];
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)["r"]),
        args
    ]);
}
function $a985f73a592474fb$export$c5d611a83338c57a(program, args) {
    const value = program.toBigInt();
    if (value <= 1n) return args;
    program = (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(value >> 1n);
    if (value & 1n) return $a985f73a592474fb$export$c5d611a83338c57a(program, $a985f73a592474fb$export$a540b74c4a2a7577(args));
    return $a985f73a592474fb$export$c5d611a83338c57a(program, $a985f73a592474fb$export$840131dd5ee64358(args));
}
function $a985f73a592474fb$export$f44402eed32c89db(program, args) {
    if (!program.isCons) return $a985f73a592474fb$export$c5d611a83338c57a(program, args);
    let first = program.first;
    if (first.isCons) first = $a985f73a592474fb$export$f44402eed32c89db(first, args);
    else if ((0, $fpZC2$chiabls.bytesEqual)(first.atom, (0, $69b3f00f8a7733d7$export$2ede34752a982e57))) return program;
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        first,
        ...program.rest.toList().map((item)=>$a985f73a592474fb$export$f44402eed32c89db(item, args))
    ]);
}
function $a985f73a592474fb$export$47ba71260b7e33dc(program, evalAsProgram) {
    const matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(a (q . (: . sexp)) (: . args))"), program);
    if (!matched) return program;
    const originalArgs = matched["args"];
    const originalCall = matched["sexp"];
    const newEvalProgramArgs = $a985f73a592474fb$export$f44402eed32c89db(originalCall, originalArgs);
    if ($a985f73a592474fb$export$6eee28b7ff726723(newEvalProgramArgs)) return $a985f73a592474fb$export$767e25f35e0954(newEvalProgramArgs, evalAsProgram);
    const newOperands = newEvalProgramArgs.toList();
    const optOperands = newOperands.map((item)=>$a985f73a592474fb$export$767e25f35e0954(item, evalAsProgram));
    const nonConstantCount = optOperands.filter((item)=>item.isCons && (item.first.isCons || !(0, $fpZC2$chiabls.bytesEqual)(item.first.atom, (0, $69b3f00f8a7733d7$export$2ede34752a982e57)))).length;
    if (nonConstantCount < 1) return (0, $9636c8954d640602$export$b6c59b989905b650).fromList(optOperands);
    return program;
}
function $a985f73a592474fb$export$2da8b1cb5a5c1650(program, evalAsProgram) {
    if (!program.isCons) return program;
    const operator = program.first;
    if (operator.isAtom && (0, $fpZC2$chiabls.bytesEqual)(operator.atom, (0, $69b3f00f8a7733d7$export$2ede34752a982e57))) return program;
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromList(program.toList().map((item)=>$a985f73a592474fb$export$767e25f35e0954(item, evalAsProgram)));
}
function $a985f73a592474fb$export$6f76a56e2909b861(program, _evalAsProgram) {
    let matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(f (c (: . first) (: . rest)))"), program);
    if (matched) return matched["first"];
    matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(r (c (: . first) (: . rest)))"), program);
    if (matched) return matched["rest"];
    return program;
}
function $a985f73a592474fb$export$ea1c1c64007bc24b(program, _evalAsProgram) {
    let matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(f ($ . atom))"), program);
    if (matched && !matched["atom"].isNull) {
        const node = new (0, $3f2125465f2f6884$export$119c224dc5fdfaa6)(matched["atom"].toBigInt()).add((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).left);
        return (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(node.asPath());
    }
    matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(r ($ . atom))"), program);
    if (matched && !matched["atom"].isNull) {
        const node = new (0, $3f2125465f2f6884$export$119c224dc5fdfaa6)(matched["atom"].toBigInt()).add((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).right);
        return (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(node.asPath());
    }
    return program;
}
function $a985f73a592474fb$export$32ec3f290cb70d5a(program, _evalAsProgram) {
    const matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(q . 0)"), program);
    if (matched) return (0, $9636c8954d640602$export$b6c59b989905b650).nil;
    return program;
}
function $a985f73a592474fb$export$b4f30947615ab0c1(program, _evalAsProgram) {
    const matched = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)((0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(a 0 . (: . rest))"), program);
    if (matched) return (0, $9636c8954d640602$export$b6c59b989905b650).nil;
    return program;
}
function $a985f73a592474fb$export$767e25f35e0954(program, evalAsProgram) {
    if (program.isAtom) return program;
    const optimizers = [
        $a985f73a592474fb$export$6f76a56e2909b861,
        $a985f73a592474fb$export$4b7046275197ae1c,
        $a985f73a592474fb$export$6e8a6ed2471a063e,
        $a985f73a592474fb$export$47ba71260b7e33dc,
        $a985f73a592474fb$export$2da8b1cb5a5c1650,
        $a985f73a592474fb$export$ea1c1c64007bc24b,
        $a985f73a592474fb$export$32ec3f290cb70d5a,
        $a985f73a592474fb$export$b4f30947615ab0c1
    ];
    while(program.isCons){
        const startProgram = program;
        for (const optimizer of optimizers){
            program = optimizer(program, evalAsProgram);
            if (!startProgram.equals(program)) break;
        }
        if (startProgram.equals(program)) return program;
    }
    return program;
}
function $a985f73a592474fb$export$f47d6a487cee0a73(runProgram) {
    return (args)=>{
        return {
            value: $a985f73a592474fb$export$767e25f35e0954(args.first, runProgram),
            cost: 1n
        };
    };
}


const $d81bf0ff4dbe2d6e$var$mainName = "";
function $d81bf0ff4dbe2d6e$export$9896244d8c99a4d0(items) {
    if (items.length === 0) return (0, $9636c8954d640602$export$b6c59b989905b650).nil;
    else if (items.length === 1) return items[0];
    const halfSize = items.length >> 1;
    return (0, $9636c8954d640602$export$b6c59b989905b650).cons($d81bf0ff4dbe2d6e$export$9896244d8c99a4d0(items.slice(0, halfSize)), $d81bf0ff4dbe2d6e$export$9896244d8c99a4d0(items.slice(halfSize)));
}
function $d81bf0ff4dbe2d6e$export$50a2a08029067c58(items) {
    if (items.length === 0) return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)((0, $9636c8954d640602$export$b6c59b989905b650).nil)
    ]);
    else if (items.length === 1) return items[0];
    const halfSize = items.length >> 1;
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $69b3f00f8a7733d7$export$2542912e97e68f4e)),
        $d81bf0ff4dbe2d6e$export$50a2a08029067c58(items.slice(0, halfSize)),
        $d81bf0ff4dbe2d6e$export$50a2a08029067c58(items.slice(halfSize))
    ]);
}
function $d81bf0ff4dbe2d6e$export$bffa455ba8c619a6(program) {
    if (program.isCons) return [
        ...$d81bf0ff4dbe2d6e$export$bffa455ba8c619a6(program.first),
        ...$d81bf0ff4dbe2d6e$export$bffa455ba8c619a6(program.rest)
    ];
    else return [
        program.toText()
    ];
}
function $d81bf0ff4dbe2d6e$export$fddefddb691e6258(functions, constants, macros) {
    const macrosAsDict = {};
    for (const item of macros)macrosAsDict[item.rest.first.toText()] = item;
    const possibleSymbols = new (0, $17c1ef024405b6ea$export$a4dd1bf5a8aa5573)(Object.keys(functions));
    possibleSymbols.update(new (0, $17c1ef024405b6ea$export$a4dd1bf5a8aa5573)(Object.keys(constants)));
    let newNames = new (0, $17c1ef024405b6ea$export$a4dd1bf5a8aa5573)([
        $d81bf0ff4dbe2d6e$var$mainName
    ]);
    const usedNames = new (0, $17c1ef024405b6ea$export$a4dd1bf5a8aa5573)(newNames);
    while(newNames.size){
        const priorNewNames = new (0, $17c1ef024405b6ea$export$a4dd1bf5a8aa5573)(newNames);
        newNames = new (0, $17c1ef024405b6ea$export$a4dd1bf5a8aa5573)();
        for (const item of priorNewNames){
            for (const group of [
                functions,
                macrosAsDict
            ])if (item in group) newNames.update(new (0, $17c1ef024405b6ea$export$a4dd1bf5a8aa5573)($d81bf0ff4dbe2d6e$export$bffa455ba8c619a6(group[item])));
        }
        newNames.differenceUpdate(usedNames);
        usedNames.update(newNames);
    }
    usedNames.intersectionUpdate(possibleSymbols);
    usedNames.delete($d81bf0ff4dbe2d6e$var$mainName);
    return usedNames.sort((a, b)=>(0, $b8dc7cb54aa9eaa3$export$633da1651c3bd3f9)(a, b));
}
function $d81bf0ff4dbe2d6e$export$8bf632d40c0a848b(name, namespace, functions, constants, macros, runProgram) {
    const program = (0, $9636c8954d640602$export$b6c59b989905b650).fromSource("(_read (_full_path_for_name 1))");
    const output = runProgram(program, name).value;
    for (const item of output.toList())$d81bf0ff4dbe2d6e$export$7d6a67d8e26b1886(item, namespace, functions, constants, macros, runProgram);
}
function $d81bf0ff4dbe2d6e$export$66c2bd7a184bdde8(program, args) {
    if (program.isCons) return (0, $9636c8954d640602$export$b6c59b989905b650).cons($d81bf0ff4dbe2d6e$export$66c2bd7a184bdde8(program.first, args), $d81bf0ff4dbe2d6e$export$66c2bd7a184bdde8(program.rest, args));
    else if (args.includes(program.toText())) return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromText("unquote"),
        program
    ]);
    return program;
}
function $d81bf0ff4dbe2d6e$export$3d84838a88a77879(program) {
    const second = program.rest;
    const third = second.rest;
    const items = [
        (0, $9636c8954d640602$export$b6c59b989905b650).fromText("defmacro"),
        second.first,
        third.first
    ];
    const code = third.rest.first;
    const args = $d81bf0ff4dbe2d6e$export$bffa455ba8c619a6(third.first).filter((item)=>item.length);
    const unquotedCode = $d81bf0ff4dbe2d6e$export$66c2bd7a184bdde8(code, args);
    items.push((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromText("qq"),
        unquotedCode
    ]));
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromList(items);
}
function $d81bf0ff4dbe2d6e$export$7d6a67d8e26b1886(declarationProgram, namespace, functions, constants, macros, runProgram) {
    const op = declarationProgram.first.toText();
    const nameProgram = declarationProgram.rest.first;
    if (op === "include") {
        $d81bf0ff4dbe2d6e$export$8bf632d40c0a848b(nameProgram, namespace, functions, constants, macros, runProgram);
        return;
    }
    const name = nameProgram.toText();
    if (namespace.has(name)) throw new Error(`Symbol ${JSON.stringify(name)} redefined.`);
    namespace.add(name);
    if (op === "defmacro") macros.push(declarationProgram);
    else if (op === "defun") functions[name] = declarationProgram.rest.rest;
    else if (op === "defun-inline") macros.push($d81bf0ff4dbe2d6e$export$3d84838a88a77879(declarationProgram));
    else if (op === "defconstant") constants[name] = (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(declarationProgram.rest.rest.first);
    else throw new Error(`Expected "defun", "defun-inline", "defmacro", or "defconstant", but got ${JSON.stringify(op)}.`);
}
function $d81bf0ff4dbe2d6e$export$9665f6d487c71a5a(args, runProgram) {
    const functions = {};
    const constants = {};
    const macros = [];
    const mainLocalArguments = args.first;
    const namespace = new (0, $17c1ef024405b6ea$export$a4dd1bf5a8aa5573)();
    while(true){
        args = args.rest;
        if (args.rest.isNull) break;
        $d81bf0ff4dbe2d6e$export$7d6a67d8e26b1886(args.first, namespace, functions, constants, macros, runProgram);
    }
    const uncompiledMain = args.first;
    functions[$d81bf0ff4dbe2d6e$var$mainName] = (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        mainLocalArguments,
        uncompiledMain
    ]);
    return [
        functions,
        constants,
        macros
    ];
}
function $d81bf0ff4dbe2d6e$export$bb136ef67aed6c8c(tree, rootNode) {
    if (tree.isNull) return (0, $9636c8954d640602$export$b6c59b989905b650).nil;
    else if (!tree.isCons) return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
            tree,
            (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(rootNode.asPath())
        ])
    ]);
    const left = $d81bf0ff4dbe2d6e$export$bb136ef67aed6c8c(tree.first, rootNode.add((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).left));
    const right = $d81bf0ff4dbe2d6e$export$bb136ef67aed6c8c(tree.rest, rootNode.add((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).right));
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        ...left.toList(),
        ...right.toList()
    ]);
}
function $d81bf0ff4dbe2d6e$export$3b9592ef1cecfca1(macroLookup, macros, runProgram) {
    let macroLookupProgram = (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(macroLookup);
    for (const macro of macros){
        macroLookupProgram = (0, $ec4be0719743fcdf$export$57e68749c88bb462)((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
            (0, $9636c8954d640602$export$b6c59b989905b650).fromText("opt"),
            (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                (0, $9636c8954d640602$export$b6c59b989905b650).fromText("com"),
                (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                    (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $69b3f00f8a7733d7$export$2542912e97e68f4e)),
                    macro,
                    macroLookupProgram
                ])),
                macroLookupProgram
            ])
        ]), (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).top.asPath()));
        macroLookupProgram = (0, $a985f73a592474fb$export$767e25f35e0954)(macroLookupProgram, runProgram);
    }
    return macroLookupProgram;
}
function $d81bf0ff4dbe2d6e$export$7eeeed3abcd324fe(functions, macroLookupProgram, constantSymbolTable, argsRootNode) {
    const compiledFunctions = {};
    for (const [name, lambdaExpression] of Object.entries(functions)){
        const localSymbolTable = $d81bf0ff4dbe2d6e$export$bb136ef67aed6c8c(lambdaExpression.first, argsRootNode);
        const allSymbols = (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
            ...localSymbolTable.toList(),
            ...constantSymbolTable.toList()
        ]);
        compiledFunctions[name] = (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
            (0, $9636c8954d640602$export$b6c59b989905b650).fromText("opt"),
            (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                (0, $9636c8954d640602$export$b6c59b989905b650).fromText("com"),
                (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(lambdaExpression.rest.first),
                macroLookupProgram,
                (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(allSymbols)
            ])
        ]);
    }
    return compiledFunctions;
}
function $d81bf0ff4dbe2d6e$export$19b97198b397b1c4(args, macroLookup, _symbolTable, runProgram) {
    const [functions, constants, macros] = $d81bf0ff4dbe2d6e$export$9665f6d487c71a5a(args, runProgram);
    const macroLookupProgram = $d81bf0ff4dbe2d6e$export$3b9592ef1cecfca1(macroLookup, macros, runProgram);
    const allConstantNames = $d81bf0ff4dbe2d6e$export$fddefddb691e6258(functions, constants, macros);
    const hasConstantTree = allConstantNames.size > 0;
    const constantTree = $d81bf0ff4dbe2d6e$export$9896244d8c99a4d0([
        ...allConstantNames.map((item)=>(0, $9636c8954d640602$export$b6c59b989905b650).fromText(item))
    ]);
    const constantRootNode = (0, $3f2125465f2f6884$export$119c224dc5fdfaa6).left;
    const argsRootNode = hasConstantTree ? (0, $3f2125465f2f6884$export$119c224dc5fdfaa6).right : (0, $3f2125465f2f6884$export$119c224dc5fdfaa6).top;
    const constantSymbolTable = $d81bf0ff4dbe2d6e$export$bb136ef67aed6c8c(constantTree, constantRootNode);
    const compiledFunctions = $d81bf0ff4dbe2d6e$export$7eeeed3abcd324fe(functions, macroLookupProgram, constantSymbolTable, argsRootNode);
    const mainPathSource = compiledFunctions[$d81bf0ff4dbe2d6e$var$mainName].toString();
    let argTreeSource;
    if (hasConstantTree) {
        const allConstantsLookup = {};
        for (const [key, value] of Object.entries(compiledFunctions))if (allConstantNames.has(key)) allConstantsLookup[key] = value;
        Object.assign(allConstantsLookup, constants);
        const allConstantsList = [
            ...allConstantNames
        ].map((item)=>allConstantsLookup[item]);
        const allConstantsTreeProgram = $d81bf0ff4dbe2d6e$export$50a2a08029067c58(allConstantsList);
        const allConstantsTreeSource = allConstantsTreeProgram.toString();
        argTreeSource = `(c ${allConstantsTreeSource} 1)`;
    } else argTreeSource = "1";
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromSource(`(opt (q . (a ${mainPathSource} ${argTreeSource})))`);
}


const $6edfc72fb8768007$var$passThroughOperators = new (0, $17c1ef024405b6ea$export$a4dd1bf5a8aa5573)([
    ...Object.values((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)).map((value)=>(0, $fpZC2$chiabls.toHex)((0, $fpZC2$chiabls.encodeBigInt)(value))),
    (0, $fpZC2$chiabls.toHex)(new TextEncoder().encode("com")),
    (0, $fpZC2$chiabls.toHex)(new TextEncoder().encode("opt"))
]);
function $6edfc72fb8768007$export$4f014e0e2f9a3439(args, macroLookup, symbolTable, runProgram, level = 1) {
    function com(program) {
        return $6edfc72fb8768007$export$6469419774d99a46(program, macroLookup, symbolTable, runProgram);
    }
    const program = args.first;
    if (!program.isCons) return (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(program);
    if (!program.first.isCons) {
        const op = program.first.toText();
        if (op === "qq") {
            const expression = $6edfc72fb8768007$export$4f014e0e2f9a3439(program.rest, macroLookup, symbolTable, runProgram, level + 1);
            return com((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $69b3f00f8a7733d7$export$2542912e97e68f4e)),
                (0, $9636c8954d640602$export$b6c59b989905b650).fromText(op),
                (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                    (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $69b3f00f8a7733d7$export$2542912e97e68f4e)),
                    expression,
                    (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)((0, $9636c8954d640602$export$b6c59b989905b650).nil)
                ])
            ]));
        } else if (op === "unquote") {
            if (level === 1) return com(program.rest.first);
            const expression = $6edfc72fb8768007$export$4f014e0e2f9a3439(program.rest, macroLookup, symbolTable, runProgram, level - 1);
            return com((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $69b3f00f8a7733d7$export$2542912e97e68f4e)),
                (0, $9636c8954d640602$export$b6c59b989905b650).fromText(op),
                (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                    (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $69b3f00f8a7733d7$export$2542912e97e68f4e)),
                    expression,
                    (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)((0, $9636c8954d640602$export$b6c59b989905b650).nil)
                ])
            ]));
        }
    }
    const first = com((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromText("qq"),
        program.first
    ]));
    const rest = com((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromText("qq"),
        program.rest
    ]));
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $69b3f00f8a7733d7$export$2542912e97e68f4e)),
        first,
        rest
    ]);
}
function $6edfc72fb8768007$export$10e4a0f3245dd758(_args, macroLookup, _symbolTable, _runProgram) {
    return (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(macroLookup);
}
function $6edfc72fb8768007$export$11b536640056999f(_args, _macroLookup, symbolTable, _runProgram) {
    return (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(symbolTable);
}
const $6edfc72fb8768007$export$77f1bb37b4f1d5ec = {
    qq: $6edfc72fb8768007$export$4f014e0e2f9a3439,
    macros: $6edfc72fb8768007$export$10e4a0f3245dd758,
    symbols: $6edfc72fb8768007$export$11b536640056999f,
    lambda: (0, $d81bf0ff4dbe2d6e$export$19b97198b397b1c4),
    mod: (0, $d81bf0ff4dbe2d6e$export$19b97198b397b1c4)
};
function $6edfc72fb8768007$export$1e276181c3bc016e(program, _macroLookup, _symbolTable, _runProgram) {
    if (program.isAtom) return program;
    else if (program.first.isAtom && program.first.toText() === "quote") {
        if (!program.rest.rest.isNull) throw new Error(`Compilation error while compiling ${program}. Quote takes exactly one argument${program.positionSuffix}.`);
        return (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)($6edfc72fb8768007$export$1e276181c3bc016e(program.rest.first));
    } else return (0, $9636c8954d640602$export$b6c59b989905b650).cons($6edfc72fb8768007$export$1e276181c3bc016e(program.first), $6edfc72fb8768007$export$1e276181c3bc016e(program.rest));
}
function $6edfc72fb8768007$export$6469419774d99a46(program, macroLookup, symbolTable, runProgram) {
    program = $6edfc72fb8768007$export$1e276181c3bc016e(program, macroLookup, symbolTable, runProgram);
    if (!program.isCons) {
        const atom = program.toText();
        if (atom === "@") return (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).top.asPath());
        for (const pair of symbolTable.toList()){
            const symbol = pair.first;
            const value = pair.rest.first;
            if (symbol.isAtom && symbol.toText() === atom) return value;
        }
        return (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(program);
    }
    const operator = program.first;
    if (operator.isCons) {
        const inner = (0, $ec4be0719743fcdf$export$57e68749c88bb462)((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
            (0, $9636c8954d640602$export$b6c59b989905b650).fromText("com"),
            (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(operator),
            (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(macroLookup),
            (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(symbolTable)
        ]), (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).top.asPath()));
        return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
            inner
        ]);
    }
    const atom = operator.toText();
    for (const macroPair of macroLookup.toList())if (macroPair.first.isAtom && macroPair.first.toText() === atom) {
        const macroCode = macroPair.rest.first;
        const postProgram = (0, $ec4be0719743fcdf$export$9692bc1ad98955fc)(macroCode, program.rest);
        const result = (0, $ec4be0719743fcdf$export$57e68749c88bb462)((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
            (0, $9636c8954d640602$export$b6c59b989905b650).fromText("com"),
            postProgram,
            (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(macroLookup),
            (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(symbolTable)
        ]), (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).top.asPath()));
        return result;
    }
    if (atom in $6edfc72fb8768007$export$77f1bb37b4f1d5ec) {
        const compiler = $6edfc72fb8768007$export$77f1bb37b4f1d5ec[atom];
        const postProgram = compiler(program.rest, macroLookup, symbolTable, runProgram);
        return (0, $ec4be0719743fcdf$export$57e68749c88bb462)((0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(postProgram), (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).top.asPath()));
    }
    if ((0, $fpZC2$chiabls.bytesEqual)(operator.atom, (0, $69b3f00f8a7733d7$export$2ede34752a982e57))) return program;
    const compiledArgs = program.rest.toList().map((item)=>$6edfc72fb8768007$export$6469419774d99a46(item, macroLookup, symbolTable, runProgram));
    let result = (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
        operator,
        ...compiledArgs
    ]);
    if ($6edfc72fb8768007$var$passThroughOperators.has((0, $fpZC2$chiabls.toHex)(new TextEncoder().encode(atom))) || atom.startsWith("_")) return result;
    for (const item of symbolTable.toList()){
        const [symbol, value] = item.toList();
        if (!symbol.isAtom) continue;
        const symbolText = symbol.toText();
        if (symbolText === "*") return result;
        else if (symbolText === atom) {
            const newArgs = (0, $ec4be0719743fcdf$export$57e68749c88bb462)((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                (0, $9636c8954d640602$export$b6c59b989905b650).fromText("opt"),
                (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                    (0, $9636c8954d640602$export$b6c59b989905b650).fromText("com"),
                    (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)((0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                        (0, $9636c8954d640602$export$b6c59b989905b650).fromText("list"),
                        ...program.rest.toList()
                    ])),
                    (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(macroLookup),
                    (0, $ec4be0719743fcdf$export$15d71aa2e69a0c29)(symbolTable)
                ])
            ]), (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).top.asPath()));
            return (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $69b3f00f8a7733d7$export$688e2fe60354a4fd)),
                value,
                (0, $9636c8954d640602$export$b6c59b989905b650).fromList([
                    (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $69b3f00f8a7733d7$export$2542912e97e68f4e)),
                    (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $3f2125465f2f6884$export$119c224dc5fdfaa6).left.asPath()),
                    newArgs
                ])
            ]);
        }
    }
    throw new Error(`Can't compile unknown operator ${program}${program.positionSuffix}.`);
}
function $6edfc72fb8768007$export$5af009c3dc40b1bc(runProgram) {
    return (sexp)=>{
        const prog = sexp.first;
        let symbolTable = (0, $9636c8954d640602$export$b6c59b989905b650).nil;
        let macroLookup;
        if (!sexp.rest.isNull) {
            macroLookup = sexp.rest.first;
            if (!sexp.rest.rest.isNull) symbolTable = sexp.rest.rest.first;
        } else macroLookup = (0, $c1f25f83b21fbca5$export$35ac38cd538ce3a4)(runProgram);
        return {
            value: $6edfc72fb8768007$export$6469419774d99a46(prog, macroLookup, symbolTable, runProgram),
            cost: 1n
        };
    };
}




const $50d1f9204136c73a$export$5fe13095c61781e4 = {
    if: 33n,
    cons: 50n,
    first: 30n,
    rest: 30n,
    listp: 19n,
    mallocPerByte: 10n,
    arithBase: 99n,
    arithPerByte: 3n,
    arithPerArg: 320n,
    logBase: 100n,
    logPerByte: 3n,
    logPerArg: 264n,
    grsBase: 117n,
    grsPerByte: 1n,
    eqBase: 117n,
    eqPerByte: 1n,
    grBase: 498n,
    grPerByte: 2n,
    divmodBase: 1116n,
    divmodPerByte: 6n,
    divBase: 988n,
    divPerByte: 4n,
    sha256Base: 87n,
    sha256PerByte: 2n,
    sha256PerArg: 134n,
    pointAddBase: 101094n,
    pointAddPerArg: 1343980n,
    pubkeyBase: 1325730n,
    pubkeyPerByte: 38n,
    mulBase: 92n,
    mulPerOp: 885n,
    mulLinearPerByte: 6n,
    mulSquarePerByteDivider: 128n,
    strlenBase: 173n,
    strlenPerByte: 1n,
    pathLookupBase: 40n,
    pathLookupPerLeg: 4n,
    pathLookupPerZeroByte: 4n,
    concatBase: 142n,
    concatPerByte: 3n,
    concatPerArg: 135n,
    boolBase: 200n,
    boolPerArg: 300n,
    ashiftBase: 596n,
    ashiftPerByte: 3n,
    lshiftBase: 277n,
    lshiftPerByte: 3n,
    lognotBase: 331n,
    lognotPerByte: 3n,
    apply: 90n,
    quote: 20n
};





function $b45cfe84191f72e9$export$2370125adba2cb1e(byte) {
    byte |= byte >> 1;
    byte |= byte >> 2;
    byte |= byte >> 4;
    return byte + 1 >> 1;
}
function $b45cfe84191f72e9$export$520469ab96a2a022(value, environment) {
    let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).pathLookupBase + (0, $50d1f9204136c73a$export$5fe13095c61781e4).pathLookupPerLeg;
    if (value.isNull) return {
        value: (0, $9636c8954d640602$export$b6c59b989905b650).nil,
        cost: cost
    };
    let endByteCursor = 0;
    const atom = value.atom;
    while(endByteCursor < atom.length && atom[endByteCursor] === 0)endByteCursor++;
    cost += BigInt(endByteCursor) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).pathLookupPerZeroByte;
    if (endByteCursor === atom.length) return {
        value: (0, $9636c8954d640602$export$b6c59b989905b650).nil,
        cost: cost
    };
    const endBitMask = $b45cfe84191f72e9$export$2370125adba2cb1e(atom[endByteCursor]);
    let byteCursor = atom.length - 1;
    let bitMask = 0x01;
    while(byteCursor > endByteCursor || bitMask < endBitMask){
        if (environment.isAtom) throw new Error(`Cannot traverse into ${environment}${environment.positionSuffix}.`);
        if ((atom[byteCursor] & bitMask) !== 0) environment = environment.rest;
        else environment = environment.first;
        cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).pathLookupPerLeg;
        bitMask <<= 1;
        if (bitMask === 0x100) {
            byteCursor--;
            bitMask = 0x01;
        }
    }
    return {
        value: environment,
        cost: cost
    };
}






const $ee0ce775d2fb3caf$export$ccbce4efa7f8029b = {
    i: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "i", 3);
        return {
            value: list[0].isNull ? list[2] : list[1],
            cost: (0, $50d1f9204136c73a$export$5fe13095c61781e4).if
        };
    },
    c: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "c", 2);
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).cons(list[0], list[1]),
            cost: (0, $50d1f9204136c73a$export$5fe13095c61781e4).cons
        };
    },
    f: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "f", 1, "cons");
        return {
            value: list[0].first,
            cost: (0, $50d1f9204136c73a$export$5fe13095c61781e4).first
        };
    },
    r: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "r", 1, "cons");
        return {
            value: list[0].rest,
            cost: (0, $50d1f9204136c73a$export$5fe13095c61781e4).rest
        };
    },
    l: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "l", 1);
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBool(list[0].isCons),
            cost: (0, $50d1f9204136c73a$export$5fe13095c61781e4).listp
        };
    },
    x: (args)=>{
        throw new Error(`The error ${args} was raised${args.positionSuffix}.`);
    },
    "=": (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "=", 2, "atom");
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBool((0, $fpZC2$chiabls.bytesEqual)(list[0].atom, list[1].atom)),
            cost: (0, $50d1f9204136c73a$export$5fe13095c61781e4).eqBase + (BigInt(list[0].atom.length) + BigInt(list[1].atom.length)) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).eqPerByte
        };
    },
    sha256: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "sha256", undefined, "atom");
        let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).sha256Base;
        let argLength = 0;
        const bytes = [];
        for (const item of list){
            for (const byte of item.atom)bytes.push(byte);
            argLength += item.atom.length;
            cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).sha256PerArg;
        }
        cost += BigInt(argLength) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).sha256PerByte;
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes((0, $fpZC2$chiabls.hash256)(Uint8Array.from(bytes))),
            cost: cost
        });
    },
    "+": (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "+", undefined, "atom");
        let total = 0n;
        let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).arithBase;
        let argSize = 0;
        for (const item of list){
            total += item.toBigInt();
            argSize += item.atom.length;
            cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).arithPerArg;
        }
        cost += BigInt(argSize) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).arithPerByte;
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(total),
            cost: cost
        });
    },
    "-": (args)=>{
        let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).arithBase;
        if (args.isNull) return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).nil,
            cost: cost
        };
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "-", undefined, "atom");
        let total = 0n;
        let sign = 1n;
        let argSize = 0;
        for (const item of list){
            total += sign * item.toBigInt();
            sign = -1n;
            argSize += item.atom.length;
            cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).arithPerArg;
        }
        cost += BigInt(argSize) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).arithPerByte;
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(total),
            cost: cost
        });
    },
    "*": (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "*", undefined, "atom");
        let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).mulBase;
        if (!list.length) return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).true,
            cost: cost
        });
        let value = list[0].toBigInt();
        let size = list[0].atom.length;
        for (const item of list.slice(1)){
            cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).mulPerOp + (BigInt(item.atom.length) + BigInt(size)) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).mulLinearPerByte + BigInt(item.atom.length) * BigInt(size) / (0, $50d1f9204136c73a$export$5fe13095c61781e4).mulSquarePerByteDivider;
            value *= item.toBigInt();
            size = $ee0ce775d2fb3caf$export$2f0301b329918c24(value);
        }
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(value),
            cost: cost
        });
    },
    divmod: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "divmod", 2, "atom");
        let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).divmodBase;
        const numerator = list[0].toBigInt();
        const denominator = list[1].toBigInt();
        if (denominator === 0n) throw new Error(`Cannot divide by zero in "divmod" operator${args.positionSuffix}.`);
        cost += (BigInt(list[0].atom.length) + BigInt(list[1].atom.length)) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).divmodPerByte;
        let quotientValue = numerator / denominator;
        const remainderValue = (0, $fpZC2$chiabls.mod)(numerator, denominator);
        if (numerator < 0n !== denominator < 0n && remainderValue !== 0n) quotientValue -= 1n;
        const quotient = (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(quotientValue);
        const remainder = (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(remainderValue);
        cost += (BigInt(quotient.atom.length) + BigInt(remainder.atom.length)) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).mallocPerByte;
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).cons(quotient, remainder),
            cost: cost
        };
    },
    "/": (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "/", 2, "atom");
        let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).divBase;
        const numerator = list[0].toBigInt();
        const denominator = list[1].toBigInt();
        if (denominator === 0n) throw new Error(`Cannot divide by zero in "/" operator${args.positionSuffix}.`);
        cost += (BigInt(list[0].atom.length) + BigInt(list[1].atom.length)) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).divPerByte;
        let quotientValue = numerator / denominator;
        const remainderValue = (0, $fpZC2$chiabls.mod)(numerator, denominator);
        if (numerator < 0n !== denominator < 0n && quotientValue < 0n) quotientValue -= 1n;
        const quotient = (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(quotientValue);
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: quotient,
            cost: cost
        });
    },
    ">": (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, ">", 2, "atom");
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).grBase + (BigInt(list[0].atom.length) + BigInt(list[1].atom.length)) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).grPerByte;
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBool(list[0].toBigInt() > list[1].toBigInt()),
            cost: cost
        };
    },
    ">s": (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, ">s", 2, "atom");
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).grsBase + (BigInt(list[0].atom.length) + BigInt(list[1].atom.length)) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).grsPerByte;
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBool(list[0].toHex().localeCompare(list[1].toHex()) === 1),
            cost: cost
        };
    },
    pubkey_for_exp: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "pubkey_for_exp", 1, "atom");
        const value = (0, $fpZC2$chiabls.mod)(list[0].toBigInt(), (0, $fpZC2$chiabls.defaultEc).n);
        const exponent = (0, $fpZC2$chiabls.PrivateKey).fromBytes((0, $fpZC2$chiabls.bigIntToBytes)(value, 32, "big"));
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).pubkeyBase + BigInt(list[0].atom.length) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).pubkeyPerByte;
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(exponent.getG1().toBytes()),
            cost: cost
        });
    },
    point_add: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "point_add", undefined, "atom");
        let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).pointAddBase;
        let point = (0, $fpZC2$chiabls.JacobianPoint).infinityG1();
        for (const item of list){
            point = point.add((0, $fpZC2$chiabls.JacobianPoint).fromBytes(item.atom, false));
            cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).pointAddPerArg;
        }
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(point.toBytes()),
            cost: cost
        });
    },
    strlen: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "strlen", 1, "atom");
        const size = list[0].atom.length;
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).strlenBase + BigInt(size) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).strlenPerByte;
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromInt(size),
            cost: cost
        });
    },
    substr: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "substr", [
            2,
            3
        ], "atom");
        const value = list[0].atom;
        if (list[1].atom.length > 4 || list.length === 3 && list[2].atom.length > 4) throw new Error(`Expected 4 byte indices in "substr" operator${args.positionSuffix}.`);
        const from = list[1].toInt();
        const to = list.length === 3 ? list[2].toInt() : value.length;
        if (to > value.length || to < from || to < 0 || from < 0) throw new Error(`Invalid indices in "substr" operator${args.positionSuffix}.`);
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(value.slice(from, to)),
            cost: 1n
        };
    },
    concat: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "concat", undefined, "atom");
        let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).concatBase;
        const bytes = [];
        for (const item of list){
            for (const byte of item.atom)bytes.push(byte);
            cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).concatPerArg;
        }
        cost += BigInt(bytes.length) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).concatPerByte;
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(Uint8Array.from(bytes)),
            cost: cost
        });
    },
    ash: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "ash", 2, "atom");
        if (list[1].atom.length > 4) throw new Error(`Shift must be 32 bits in "ash" operator${args.positionSuffix}.`);
        const shift = list[1].toBigInt();
        if ((shift < 0n ? -shift : shift) > 65535n) throw new Error(`Shift too large in "ash" operator${args.positionSuffix}.`);
        let value = list[0].toBigInt();
        if (shift >= 0) value <<= shift;
        else value >>= -shift;
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).ashiftBase + (BigInt(list[0].atom.length) + BigInt($ee0ce775d2fb3caf$export$2f0301b329918c24(value))) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).ashiftPerByte;
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(value),
            cost: cost
        });
    },
    lsh: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "lsh", 2, "atom");
        if (list[1].atom.length > 4) throw new Error(`Shift must be 32 bits in "lsh" operator${args.positionSuffix}.`);
        const shift = list[1].toBigInt();
        if ((shift < 0n ? -shift : shift) > 65535n) throw new Error(`Shift too large in "lsh" operator${args.positionSuffix}.`);
        let value = (0, $fpZC2$chiabls.bytesToBigInt)(list[0].atom, "big", false);
        if (value < 0n) value = -value;
        if (shift >= 0) value <<= shift;
        else value >>= -shift;
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).lshiftBase + (BigInt(list[0].atom.length) + BigInt($ee0ce775d2fb3caf$export$2f0301b329918c24(value))) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).lshiftPerByte;
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(value),
            cost: cost
        });
    },
    logand: (args)=>$ee0ce775d2fb3caf$export$a0a039066bddd5e0("logand", -1n, args, (a, b)=>a & b),
    logior: (args)=>$ee0ce775d2fb3caf$export$a0a039066bddd5e0("logior", 0n, args, (a, b)=>a | b),
    logxor: (args)=>$ee0ce775d2fb3caf$export$a0a039066bddd5e0("logxor", 0n, args, (a, b)=>a ^ b),
    lognot: (args)=>{
        const items = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "lognot", 1, "atom");
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).lognotBase + BigInt(items[0].atom.length) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).lognotPerByte;
        return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(~items[0].toBigInt()),
            cost: cost
        });
    },
    not: (args)=>{
        const items = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "not", 1);
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).boolBase;
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBool(items[0].isNull),
            cost: cost
        };
    },
    any: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "any");
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).boolBase + BigInt(list.length) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).boolPerArg;
        let result = false;
        for (const item of list)if (!item.isNull) {
            result = true;
            break;
        }
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBool(result),
            cost: cost
        };
    },
    all: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "all");
        const cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).boolBase + BigInt(list.length) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).boolPerArg;
        let result = true;
        for (const item of list)if (item.isNull) {
            result = false;
            break;
        }
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBool(result),
            cost: cost
        };
    },
    softfork: (args)=>{
        const list = $ee0ce775d2fb3caf$export$effcdbd76139450(args, "softfork", [
            1,
            Infinity
        ]);
        if (!list[0].isAtom) throw new Error(`Expected atom argument in "softfork" operator at ${list[0].positionSuffix}.`);
        const cost = list[0].toBigInt();
        if (cost < 1n) throw new Error(`Cost must be greater than zero in "softfork" operator${args.positionSuffix}.`);
        return {
            value: (0, $9636c8954d640602$export$b6c59b989905b650).false,
            cost: cost
        };
    }
};
const $ee0ce775d2fb3caf$export$391b7405552d5e99 = {
    operators: $ee0ce775d2fb3caf$export$ccbce4efa7f8029b,
    unknown: $ee0ce775d2fb3caf$export$2d0c81c03591c44,
    quote: "q",
    apply: "a"
};
function $ee0ce775d2fb3caf$export$46a92a3441911620() {
    return {
        ...$ee0ce775d2fb3caf$export$391b7405552d5e99,
        operators: {
            ...$ee0ce775d2fb3caf$export$391b7405552d5e99.operators
        }
    };
}
function $ee0ce775d2fb3caf$export$effcdbd76139450(program, name, length, type) {
    const list = program.toList();
    if (typeof length === "number" && list.length !== length) throw new Error(`Expected ${length} arguments in ${JSON.stringify(name)} operator${program.positionSuffix}.`);
    else if (Array.isArray(length) && (list.length < length[0] || list.length > length[1])) throw new Error(`Expected ${length[1] === Infinity ? `at least ${length[0]}` : `between ${length[0]} and ${length[1]}`} arguments in ${JSON.stringify(name)} operator${program.positionSuffix}.`);
    if (type !== undefined) list.forEach((item)=>{
        if (type === "atom" && !item.isAtom || type === "cons" && !item.isCons) throw new Error(`Expected ${type} argument in ${JSON.stringify(name)} operator${item.positionSuffix}.`);
    });
    return list;
}
function $ee0ce775d2fb3caf$export$2f0301b329918c24(value) {
    let length = value === 0n ? 0 : (value < 0n ? -value : value).toString(2).length;
    if (value < 0n) length++;
    return length + 7 >> 3;
}
function $ee0ce775d2fb3caf$export$c85cac6a8d81208f(output) {
    return {
        value: output.value,
        cost: output.cost + BigInt(output.value.atom.length) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).mallocPerByte
    };
}
function $ee0ce775d2fb3caf$export$a0a039066bddd5e0(opName, initialValue, args, opFunction) {
    let total = initialValue;
    let argSize = 0;
    let cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).logBase;
    for (const item of args.toList().map((item)=>{
        if (!item.isAtom) throw new Error(`Expected atom argument in ${JSON.stringify(opName)} operator${item.positionSuffix}.`);
        return item;
    })){
        total = opFunction(total, item.toBigInt());
        argSize += item.atom.length;
        cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).logPerArg;
    }
    cost += BigInt(argSize) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).logPerByte;
    return $ee0ce775d2fb3caf$export$c85cac6a8d81208f({
        value: (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(total),
        cost: cost
    });
}
function $ee0ce775d2fb3caf$export$2d0c81c03591c44(op, args) {
    if (!op.atom.length || (0, $fpZC2$chiabls.bytesEqual)(op.atom.slice(0, 2), Uint8Array.from([
        0xff,
        0xff
    ]))) throw new Error(`Reserved operator${op.positionSuffix}.`);
    if (op.atom.length > 5) throw new Error(`Invalid operator${op.positionSuffix}.`);
    const costFunction = (op.atom[op.atom.length - 1] & 0xc0) >> 6;
    const costMultiplier = (0, $fpZC2$chiabls.bytesToInt)(op.atom.slice(0, op.atom.length - 1), "big") + 1;
    let cost;
    if (costFunction === 0) cost = 1n;
    else if (costFunction === 1) {
        cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).arithBase;
        let argSize = 0;
        for (const item of args.toList()){
            if (!item.isAtom) throw new Error(`Expected atom argument${item.positionSuffix}.`);
            argSize += item.atom.length;
            cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).arithPerArg;
        }
        cost += BigInt(argSize) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).arithPerByte;
    } else if (costFunction === 2) {
        cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).mulBase;
        const argList = args.toList();
        if (argList.length) {
            const first = argList[0];
            if (!first.isAtom) throw new Error(`Expected atom argument${first.positionSuffix}.`);
            let current = first.atom.length;
            for (const item of argList.slice(1)){
                if (!item.isAtom) throw new Error(`Expected atom argument${item.positionSuffix}.`);
                cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).mulPerOp + (BigInt(item.atom.length) + BigInt(current)) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).mulLinearPerByte + BigInt(item.atom.length) * BigInt(current) / (0, $50d1f9204136c73a$export$5fe13095c61781e4).mulSquarePerByteDivider;
                current += item.atom.length;
            }
        }
    } else if (costFunction === 3) {
        cost = (0, $50d1f9204136c73a$export$5fe13095c61781e4).concatBase;
        let length = 0;
        for (const item of args.toList()){
            if (!item.isAtom) throw new Error(`Expected atom argument${item.positionSuffix}.`);
            cost += (0, $50d1f9204136c73a$export$5fe13095c61781e4).concatPerArg;
            length += item.atom.length;
        }
        cost += BigInt(length) * (0, $50d1f9204136c73a$export$5fe13095c61781e4).concatPerByte;
    } else throw new Error(`Unknown cost function${op.positionSuffix}.`);
    cost *= BigInt(costMultiplier);
    if (cost >= 2n ** 32n) throw new Error(`Invalid operator${op.positionSuffix}.`);
    return {
        value: (0, $9636c8954d640602$export$b6c59b989905b650).nil,
        cost: cost
    };
}
function $ee0ce775d2fb3caf$export$664a4a7902029a5b(op, args, options) {
    const symbol = op.toBigInt();
    const keyword = Object.entries((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)).find((entry)=>entry[1] === symbol)?.[0] ?? op.toText();
    if (keyword in options.operators.operators) {
        const result = options.operators.operators[keyword](args);
        return result;
    } else return options.operators.unknown(op, args);
}


const $bd56f675ad0fd6d4$export$21ba78b50397401d = {
    swap: (_instructionStack, stack, _options)=>{
        const second = stack.pop();
        const first = stack.pop();
        stack.push(second, first);
        return 0n;
    },
    cons: (_instructionStack, stack, _options)=>{
        const first = stack.pop();
        const second = stack.pop();
        stack.push((0, $9636c8954d640602$export$b6c59b989905b650).cons(first, second));
        return 0n;
    },
    eval: (instructionStack, stack, _options)=>{
        const pair = stack.pop();
        const program = pair.first;
        const args = pair.rest;
        if (program.isAtom) {
            const output = (0, $b45cfe84191f72e9$export$520469ab96a2a022)(program, args);
            stack.push(output.value);
            return output.cost;
        }
        const op = program.first;
        if (op.isCons) {
            const [newOperator, mustBeNil] = op.cons;
            if (newOperator.isCons || !mustBeNil.isNull) throw new Error(`Operators that are lists must contain a single atom${op.positionSuffix}.`);
            const newOperandList = program.rest;
            stack.push(newOperator, newOperandList);
            instructionStack.push($bd56f675ad0fd6d4$export$21ba78b50397401d.apply);
            return (0, $50d1f9204136c73a$export$5fe13095c61781e4).apply;
        }
        let operandList = program.rest;
        if ((0, $fpZC2$chiabls.bytesEqual)(op.atom, (0, $69b3f00f8a7733d7$export$2ede34752a982e57))) {
            stack.push(operandList);
            return (0, $50d1f9204136c73a$export$5fe13095c61781e4).quote;
        }
        instructionStack.push($bd56f675ad0fd6d4$export$21ba78b50397401d.apply);
        stack.push(op);
        while(!operandList.isNull){
            stack.push((0, $9636c8954d640602$export$b6c59b989905b650).cons(operandList.first, args));
            instructionStack.push($bd56f675ad0fd6d4$export$21ba78b50397401d.cons, $bd56f675ad0fd6d4$export$21ba78b50397401d.eval, $bd56f675ad0fd6d4$export$21ba78b50397401d.swap);
            operandList = operandList.rest;
        }
        stack.push((0, $9636c8954d640602$export$b6c59b989905b650).nil);
        return 1n;
    },
    apply: (instructionStack, stack, options)=>{
        const operandList = stack.pop();
        const op = stack.pop();
        if (op.isCons) throw new Error(`An internal error occurred${op.positionSuffix}.`);
        if ((0, $fpZC2$chiabls.bytesEqual)(op.atom, (0, $69b3f00f8a7733d7$export$688e2fe60354a4fd))) {
            const args = operandList.toList();
            if (args.length !== 2) throw new Error(`Expected 2 arguments in "a" operator${operandList.positionSuffix}.`);
            stack.push((0, $9636c8954d640602$export$b6c59b989905b650).cons(args[0], args[1]));
            instructionStack.push($bd56f675ad0fd6d4$export$21ba78b50397401d.eval);
            return (0, $50d1f9204136c73a$export$5fe13095c61781e4).apply;
        }
        const output = (0, $ee0ce775d2fb3caf$export$664a4a7902029a5b)(op, operandList, options);
        stack.push(output.value);
        return output.cost;
    }
};





function $ecfc887e9c4d9ec4$export$efcd34ab6248d3cd(program) {
    const sizeBytes = [];
    if (program[0] <= 0x7f) return (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(Uint8Array.from([
        program[0]
    ]));
    else if (program[0] <= 0xbf) sizeBytes.push(program[0] & 0x3f);
    else if (program[0] <= 0xdf) {
        sizeBytes.push(program[0] & 0x1f);
        program.shift();
        if (!program.length) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Expected next byte in source.");
        sizeBytes.push(program[0]);
    } else if (program[0] <= 0xef) {
        sizeBytes.push(program[0] & 0x0f);
        for(let i = 0; i < 2; i++){
            program.shift();
            if (!program.length) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Expected next byte in source.");
            sizeBytes.push(program[0]);
        }
    } else if (program[0] <= 0xf7) {
        sizeBytes.push(program[0] & 0x07);
        for(let i = 0; i < 3; i++){
            program.shift();
            if (!program.length) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Expected next byte in source.");
            sizeBytes.push(program[0]);
        }
    } else if (program[0] <= 0xfb) {
        sizeBytes.push(program[0] & 0x03);
        for(let i = 0; i < 4; i++){
            program.shift();
            if (!program.length) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Expected next byte in source.");
            sizeBytes.push(program[0]);
        }
    } else if (program[0] === 0xff) {
        program.shift();
        if (!program.length) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Expected next byte in source.");
        const first = $ecfc887e9c4d9ec4$export$efcd34ab6248d3cd(program);
        program.shift();
        if (!program.length) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Expected next byte in source.");
        const rest = $ecfc887e9c4d9ec4$export$efcd34ab6248d3cd(program);
        return (0, $9636c8954d640602$export$b6c59b989905b650).cons(first, rest);
    } else throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Invalid encoding.");
    const size = (0, $fpZC2$chiabls.decodeInt)(Uint8Array.from(sizeBytes));
    let bytes = [];
    for(let i = 0; i < size; i++){
        program.shift();
        if (!program.length) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Expected next byte in atom.");
        bytes.push(program[0]);
    }
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(Uint8Array.from(bytes));
}







class $2795eb571c1ed5e7$export$13807d9ee5a34a42 {
    line;
    column;
    constructor(source, index){
        source = source.replaceAll("\r\n", "\n");
        let line = 1;
        let column = 1;
        for(let i = 0; i < index; i++)if (source[i] === "\n") {
            line++;
            column = 1;
        } else column++;
        this.line = line;
        this.column = column;
    }
    toString() {
        return `${this.line}:${this.column}`;
    }
}



function $bdb42fba8f5f461a$export$48cfd1e771a65c4f(tokens) {
    tokens.shift();
    return tokens[0];
}
function $bdb42fba8f5f461a$export$3570f33b1a1f3329(source, tokens) {
    const token = tokens[0];
    if (!$bdb42fba8f5f461a$export$48cfd1e771a65c4f(tokens)) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)(`Unexpected end of source at ${new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, token.index)}.`);
}
function $bdb42fba8f5f461a$export$1d5ccafae59b4926(char) {
    return /^[\u0020\u202F\u205F\u2028\u2029\u3000\u0085\u1680\u00A0\u2000-\u200A\u0009-\u000D\u001C-\u001F]$/.test(char);
}
function $bdb42fba8f5f461a$export$ab7f5d67832a6850(text, index) {
    while(true){
        while(index < text.length && $bdb42fba8f5f461a$export$1d5ccafae59b4926(text[index]))index++;
        if (index >= text.length || text[index] !== ";") break;
        while(index < text.length && !"\n\r".includes(text[index]))index++;
    }
    return index;
}
function $bdb42fba8f5f461a$export$92d34793dd37ac50(text, index) {
    const start = index;
    while(index < text.length && !$bdb42fba8f5f461a$export$1d5ccafae59b4926(text[index]) && text[index] !== ")")index++;
    return {
        text: text.slice(start, index),
        index: index
    };
}
function $bdb42fba8f5f461a$export$4e9e188b3a3b0cbf(source, tokens) {
    let token = tokens[0];
    if (token.text === ")") return (0, $9636c8954d640602$export$b6c59b989905b650).fromBytes(Uint8Array.from([])).at(new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, token.index));
    const consStart = token.index;
    const first = $bdb42fba8f5f461a$export$cd60724007a613c1(source, tokens);
    $bdb42fba8f5f461a$export$3570f33b1a1f3329(source, tokens);
    token = tokens[0];
    let rest;
    if (token.text === ".") {
        const dotStart = token.index;
        $bdb42fba8f5f461a$export$3570f33b1a1f3329(source, tokens);
        token = tokens[0];
        rest = $bdb42fba8f5f461a$export$cd60724007a613c1(source, tokens);
        $bdb42fba8f5f461a$export$3570f33b1a1f3329(source, tokens);
        token = tokens[0];
        if (token.text !== ")") throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)(`Illegal dot expression at ${new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, dotStart)}.`);
    } else rest = $bdb42fba8f5f461a$export$4e9e188b3a3b0cbf(source, tokens);
    return (0, $9636c8954d640602$export$b6c59b989905b650).cons(first, rest).at(new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, consStart));
}
function $bdb42fba8f5f461a$export$cbe5a625b098a663(source, token) {
    return /^[+\-]?[0-9]+(?:_[0-9]+)*$/.test(token.text) ? (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(BigInt(token.text.replaceAll("_", ""))).at(new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, token.index)) : null;
}
function $bdb42fba8f5f461a$export$c553c4a3641f57a2(source, token) {
    if (token.text.length >= 2 && token.text.slice(0, 2).toLowerCase() === "0x") {
        let hex = token.text.slice(2);
        if (hex.length % 2 === 1) hex = `0${hex}`;
        try {
            return (0, $9636c8954d640602$export$b6c59b989905b650).fromHex(hex).at(new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, token.index));
        } catch (e) {
            throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)(`Invalid hex ${JSON.stringify(token.text)} at ${new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, token.index)}.`);
        }
    } else return null;
}
function $bdb42fba8f5f461a$export$efc939cd3ec83299(source, token) {
    if (token.text.length < 2) return null;
    const quote = token.text[0];
    if (!"\"'".includes(quote)) return null;
    if (token.text[token.text.length - 1] !== quote) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)(`Unterminated string ${JSON.stringify(token.text)} at ${new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, token.index)}.`);
    return (0, $9636c8954d640602$export$b6c59b989905b650).fromText(token.text.slice(1, token.text.length - 1)).at(new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, token.index));
}
function $bdb42fba8f5f461a$export$52faefa73a5cb81b(source, token) {
    let text = token.text;
    if (text.startsWith("#")) text = text.slice(1);
    const keyword = (0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)[text];
    return (keyword === undefined ? (0, $9636c8954d640602$export$b6c59b989905b650).fromText(text) : (0, $9636c8954d640602$export$b6c59b989905b650).fromBigInt(keyword)).at(new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, token.index));
}
function $bdb42fba8f5f461a$export$cd60724007a613c1(source, tokens) {
    const token = tokens[0];
    if (token.text === "(") {
        $bdb42fba8f5f461a$export$3570f33b1a1f3329(source, tokens);
        return $bdb42fba8f5f461a$export$4e9e188b3a3b0cbf(source, tokens);
    }
    const result = $bdb42fba8f5f461a$export$cbe5a625b098a663(source, token) ?? $bdb42fba8f5f461a$export$c553c4a3641f57a2(source, token) ?? $bdb42fba8f5f461a$export$efc939cd3ec83299(source, token) ?? $bdb42fba8f5f461a$export$52faefa73a5cb81b(source, token);
    if (!result) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)(`Invalid expression ${JSON.stringify(token.text)} at ${new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, token.index)}.`);
    return result;
}
function* $bdb42fba8f5f461a$export$f3f15647e54e234d(source) {
    let index = 0;
    while(index < source.length){
        index = $bdb42fba8f5f461a$export$ab7f5d67832a6850(source, index);
        if (index >= source.length) break;
        const char = source[index];
        if ("(.)".includes(char)) {
            yield {
                text: char,
                index: index
            };
            index++;
            continue;
        }
        if ("\"'".includes(char)) {
            const start = index;
            const quote = source[index];
            index++;
            while(index < source.length && source[index] !== quote)index++;
            if (index < source.length) {
                yield {
                    text: source.slice(start, index + 1),
                    index: start
                };
                index++;
                continue;
            } else throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)(`Unterminated string at ${new (0, $2795eb571c1ed5e7$export$13807d9ee5a34a42)(source, index)}.`);
        }
        const token = $bdb42fba8f5f461a$export$92d34793dd37ac50(source, index);
        yield {
            text: token.text,
            index: index
        };
        index = token.index;
    }
}



class $9636c8954d640602$export$b6c59b989905b650 {
    static cost = 11000000000;
    static true = $9636c8954d640602$export$b6c59b989905b650.fromBytes(Uint8Array.from([
        1
    ]));
    static false = $9636c8954d640602$export$b6c59b989905b650.fromBytes(Uint8Array.from([]));
    static nil = $9636c8954d640602$export$b6c59b989905b650.false;
    value;
    position;
    get atom() {
        if (!this.isAtom) throw new Error(`Expected atom${this.positionSuffix}.`);
        return this.value;
    }
    get cons() {
        if (!this.isCons) throw new Error(`Expected cons${this.positionSuffix}.`);
        return this.value;
    }
    get first() {
        return this.cons[0];
    }
    get rest() {
        return this.cons[1];
    }
    get isAtom() {
        return this.value instanceof Uint8Array;
    }
    get isCons() {
        return Array.isArray(this.value);
    }
    get isNull() {
        return this.isAtom && this.value.length === 0;
    }
    static cons(first, rest) {
        return new $9636c8954d640602$export$b6c59b989905b650([
            first,
            rest
        ]);
    }
    static fromBytes(bytes) {
        return new $9636c8954d640602$export$b6c59b989905b650(bytes);
    }
    static fromJacobianPoint(jacobianPoint) {
        return new $9636c8954d640602$export$b6c59b989905b650(jacobianPoint.toBytes());
    }
    static fromPrivateKey(privateKey) {
        return new $9636c8954d640602$export$b6c59b989905b650(privateKey.toBytes());
    }
    static fromHex(hex) {
        return new $9636c8954d640602$export$b6c59b989905b650((0, $fpZC2$chiabls.fromHex)(hex));
    }
    static fromBool(value) {
        return value ? $9636c8954d640602$export$b6c59b989905b650.true : $9636c8954d640602$export$b6c59b989905b650.false;
    }
    static fromInt(value) {
        return new $9636c8954d640602$export$b6c59b989905b650((0, $fpZC2$chiabls.encodeInt)(value));
    }
    static fromBigInt(value) {
        return new $9636c8954d640602$export$b6c59b989905b650((0, $fpZC2$chiabls.encodeBigInt)(value));
    }
    static fromText(text) {
        return new $9636c8954d640602$export$b6c59b989905b650(new TextEncoder().encode(text));
    }
    static fromSource(source) {
        const stream = (0, $bdb42fba8f5f461a$export$f3f15647e54e234d)(source);
        const tokens = [
            ...stream
        ];
        if (tokens.length) return (0, $bdb42fba8f5f461a$export$cd60724007a613c1)(source, tokens);
        else throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Unexpected end of source.");
    }
    static fromList(programs) {
        let result = $9636c8954d640602$export$b6c59b989905b650.nil;
        for (const program of programs.reverse())result = $9636c8954d640602$export$b6c59b989905b650.cons(program, result);
        return result;
    }
    static deserialize(bytes) {
        const program = [
            ...bytes
        ];
        if (!program.length) throw new (0, $a550084cece3e4e0$export$d125cf0331bff9a9)("Unexpected end of source.");
        return (0, $ecfc887e9c4d9ec4$export$efcd34ab6248d3cd)(program);
    }
    static deserializeHex(hex) {
        return $9636c8954d640602$export$b6c59b989905b650.deserialize((0, $fpZC2$chiabls.fromHex)(hex));
    }
    constructor(value){
        this.value = value;
    }
    get positionSuffix() {
        return this.position ? ` at ${this.position}` : "";
    }
    at(position) {
        this.position = position;
        return this;
    }
    curry(args) {
        return $9636c8954d640602$export$b6c59b989905b650.fromSource("(a (q #a 4 (c 2 (c 5 (c 7 0)))) (c (q (c (q . 2) (c (c (q . 1) 5) (c (a 6 (c 2 (c 11 (q 1)))) 0))) #a (i 5 (q 4 (q . 4) (c (c (q . 1) 9) (c (a 6 (c 2 (c 13 (c 11 0)))) 0))) (q . 11)) 1) 1))").run($9636c8954d640602$export$b6c59b989905b650.cons(this, $9636c8954d640602$export$b6c59b989905b650.fromList(args))).value;
    }
    uncurry() {
        const uncurryPatternFunction = $9636c8954d640602$export$b6c59b989905b650.fromSource("(a (q . (: . function)) (: . core))");
        const uncurryPatternCore = $9636c8954d640602$export$b6c59b989905b650.fromSource("(c (q . (: . parm)) (: . core))");
        let result = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)(uncurryPatternFunction, this);
        if (!result) return null;
        const fn = result.function;
        let core = result.core;
        const args = [];
        while(true){
            result = (0, $b28f999d37dccebe$export$4659b591c19bdf3d)(uncurryPatternCore, core);
            if (!result) break;
            args.push(result.parm);
            core = result.core;
        }
        if (core.isAtom && core.toBigInt() === 1n) return [
            fn,
            args
        ];
        return null;
    }
    hash() {
        return this.isAtom ? (0, $fpZC2$chiabls.hash256)((0, $fpZC2$chiabls.concatBytes)(Uint8Array.from([
            1
        ]), this.atom)) : (0, $fpZC2$chiabls.hash256)((0, $fpZC2$chiabls.concatBytes)(Uint8Array.from([
            2
        ]), this.first.hash(), this.rest.hash()));
    }
    hashHex() {
        return (0, $fpZC2$chiabls.toHex)(this.hash());
    }
    define(program) {
        let result = this;
        if (this.isAtom || this.first.isCons || this.first.toText() !== "mod") result = $9636c8954d640602$export$b6c59b989905b650.fromList([
            $9636c8954d640602$export$b6c59b989905b650.fromText("mod"),
            $9636c8954d640602$export$b6c59b989905b650.nil,
            this
        ]);
        const items = result.toList();
        items.splice(2, 0, program);
        return $9636c8954d640602$export$b6c59b989905b650.fromList(items);
    }
    defineAll(programs) {
        let result = this;
        for (const program of programs.reverse())result = result.define(program);
        return result;
    }
    compile(options = {}) {
        const fullOptions = {
            strict: false,
            operators: (0, $ee0ce775d2fb3caf$export$46a92a3441911620)(),
            includeFilePaths: {},
            ...options
        };
        if (fullOptions.strict) fullOptions.operators.unknown = (_operator, args)=>{
            throw new Error(`Unimplemented operator${args.positionSuffix}.`);
        };
        function doFullPathForName(args) {
            const fileName = args.first.toText();
            for (const [path, files] of Object.entries(fullOptions.includeFilePaths)){
                if (fileName in files) return {
                    value: $9636c8954d640602$export$b6c59b989905b650.fromText(`${path}/${fileName}`),
                    cost: 1n
                };
            }
            throw new Error(`Can't open ${fileName}${args.positionSuffix}.`);
        }
        function doRead(args) {
            const fileName = args.first.toText();
            let source = null;
            for (const [path, files] of Object.entries(fullOptions.includeFilePaths)){
                for (const [file, content] of Object.entries(files))if (fileName === `${path}/${file}`) source = content;
            }
            if (source === null) throw new Error(`Can't open ${fileName}${args.positionSuffix}.`);
            return {
                value: $9636c8954d640602$export$b6c59b989905b650.fromSource(source),
                cost: 1n
            };
        }
        // Not functional, due to browser support. May reimplement later.
        function doWrite(_args) {
            return {
                value: $9636c8954d640602$export$b6c59b989905b650.nil,
                cost: 1n
            };
        }
        function runProgram(program, args) {
            return program.run(args, fullOptions);
        }
        const bindings = {
            com: (0, $6edfc72fb8768007$export$5af009c3dc40b1bc)(runProgram),
            opt: (0, $a985f73a592474fb$export$f47d6a487cee0a73)(runProgram),
            _full_path_for_name: doFullPathForName,
            _read: doRead,
            _write: doWrite
        };
        Object.assign(fullOptions.operators.operators, bindings);
        return runProgram($9636c8954d640602$export$b6c59b989905b650.fromSource("(a (opt (com 2)) 3)"), $9636c8954d640602$export$b6c59b989905b650.fromList([
            this
        ]));
    }
    run(environment, options = {}) {
        const fullOptions = {
            strict: false,
            operators: (0, $ee0ce775d2fb3caf$export$46a92a3441911620)(),
            ...options
        };
        if (fullOptions.strict) fullOptions.operators.unknown = (_operator, args)=>{
            throw new Error(`Unimplemented operator${args.positionSuffix}.`);
        };
        const instructionStack = [
            (0, $bd56f675ad0fd6d4$export$21ba78b50397401d).eval
        ];
        const stack = [
            $9636c8954d640602$export$b6c59b989905b650.cons(this, environment)
        ];
        let cost = 0n;
        while(instructionStack.length){
            const instruction = instructionStack.pop();
            cost += instruction(instructionStack, stack, fullOptions);
            if (fullOptions.maxCost !== undefined && cost > fullOptions.maxCost) throw new Error(`Exceeded cost of ${fullOptions.maxCost}${stack[stack.length - 1].positionSuffix}.`);
        }
        return {
            value: stack[stack.length - 1],
            cost: cost
        };
    }
    toBytes() {
        if (this.isCons) throw new Error(`Cannot convert ${this.toString()} to hex${this.positionSuffix}.`);
        return this.atom;
    }
    toJacobianPoint() {
        if (this.isCons || this.atom.length !== 48 && this.atom.length !== 96) throw new Error(`Cannot convert ${this.toString()} to JacobianPoint${this.positionSuffix}.`);
        return this.atom.length === 48 ? (0, $fpZC2$chiabls.JacobianPoint).fromBytesG1(this.atom) : (0, $fpZC2$chiabls.JacobianPoint).fromBytesG2(this.atom);
    }
    toPrivateKey() {
        if (this.isCons) throw new Error(`Cannot convert ${this.toString()} to private key${this.positionSuffix}.`);
        return (0, $fpZC2$chiabls.PrivateKey).fromBytes(this.atom);
    }
    toHex() {
        if (this.isCons) throw new Error(`Cannot convert ${this.toString()} to hex${this.positionSuffix}.`);
        return (0, $fpZC2$chiabls.toHex)(this.atom);
    }
    toBool() {
        if (this.isCons) throw new Error(`Cannot convert ${this.toString()} to bool${this.positionSuffix}.`);
        return !this.isNull;
    }
    toInt() {
        if (this.isCons) throw new Error(`Cannot convert ${this.toString()} to int${this.positionSuffix}.`);
        return (0, $fpZC2$chiabls.decodeInt)(this.atom);
    }
    toBigInt() {
        if (this.isCons) throw new Error(`Cannot convert ${this.toString()} to bigint${this.positionSuffix}.`);
        return (0, $fpZC2$chiabls.decodeBigInt)(this.atom);
    }
    toText() {
        if (this.isCons) throw new Error(`Cannot convert ${this.toString()} to text${this.positionSuffix}.`);
        return new TextDecoder().decode(this.atom);
    }
    toSource(showKeywords = true) {
        if (this.isAtom) {
            if (this.isNull) return "()";
            else if (this.value.length > 2) try {
                const string = this.toText();
                for(let i = 0; i < string.length; i++){
                    if (!(0, $1382d0708deed0de$export$b81a09a7187d4786).includes(string[i])) return `0x${this.toHex()}`;
                }
                if (string.includes('"') && string.includes("'")) return `0x${this.toHex()}`;
                const quote = string.includes('"') ? "'" : '"';
                return quote + string + quote;
            } catch  {
                return `0x${this.toHex()}`;
            }
            else if ((0, $fpZC2$chiabls.bytesEqual)((0, $fpZC2$chiabls.encodeInt)((0, $fpZC2$chiabls.decodeInt)(this.atom)), this.atom)) return (0, $fpZC2$chiabls.decodeInt)(this.atom).toString();
            else return `0x${this.toHex()}`;
        } else {
            let result = "(";
            if (showKeywords && this.first.isAtom) {
                const value = this.first.toBigInt();
                const keyword = Object.keys((0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)).find((keyword)=>(0, $94ca46fd7d128ba2$export$eebaaf2b24d91f63)[keyword] === value);
                result += keyword ? keyword : this.first.toSource(showKeywords);
            } else result += this.first.toSource(showKeywords);
            let current = this.cons[1];
            while(current.isCons){
                result += ` ${current.first.toSource(showKeywords)}`;
                current = current.cons[1];
            }
            result += (current.isNull ? "" : ` . ${current.toSource(showKeywords)}`) + ")";
            return result;
        }
    }
    toList(strict = false) {
        const result = [];
        let current = this;
        while(current.isCons){
            const item = current.first;
            result.push(item);
            current = current.rest;
        }
        if (!current.isNull && strict) throw new Error(`Expected strict list${this.positionSuffix}.`);
        return result;
    }
    serialize() {
        if (this.isAtom) {
            if (this.isNull) return Uint8Array.from([
                0x80
            ]);
            else if (this.atom.length === 1 && this.atom[0] <= 0x7f) return this.atom;
            else {
                const size = this.atom.length;
                const result = [];
                if (size < 0x40) result.push(0x80 | size);
                else if (size < 0x2000) {
                    result.push(0xc0 | size >> 8);
                    result.push(size >> 0 & 0xff);
                } else if (size < 0x100000) {
                    result.push(0xe0 | size >> 16);
                    result.push(size >> 8 & 0xff);
                    result.push(size >> 0 & 0xff);
                } else if (size < 0x8000000) {
                    result.push(0xf0 | size >> 24);
                    result.push(size >> 16 & 0xff);
                    result.push(size >> 8 & 0xff);
                    result.push(size >> 0 & 0xff);
                } else if (size < 0x400000000) {
                    result.push(0xf8 | size >> 32);
                    result.push(size >> 24 & 0xff);
                    result.push(size >> 16 & 0xff);
                    result.push(size >> 8 & 0xff);
                    result.push(size >> 0 & 0xff);
                } else throw new RangeError(`Cannot serialize ${this.toString()} as it is 17,179,869,184 or more bytes in size${this.positionSuffix}.`);
                for (const byte of this.atom)result.push(byte);
                return Uint8Array.from(result);
            }
        } else {
            const result = [
                0xff
            ];
            for (const byte of this.first.serialize())result.push(byte);
            for (const byte of this.rest.serialize())result.push(byte);
            return Uint8Array.from(result);
        }
    }
    serializeHex() {
        return (0, $fpZC2$chiabls.toHex)(this.serialize());
    }
    equals(value) {
        return this.isAtom === value.isAtom && (this.isAtom ? (0, $fpZC2$chiabls.bytesEqual)(this.atom, value.atom) : this.first.equals(value.first) && this.rest.equals(value.rest));
    }
    toString() {
        return this.toSource();
    }
}


$parcel$exportWildcard(module.exports, $a550084cece3e4e0$exports);


//# sourceMappingURL=index.js.map
