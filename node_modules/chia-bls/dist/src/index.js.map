{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;ACIO,MAAe;AAmCtB;;CDnCC;;;;;AEYM,MAAe,kDAAqC,CAAA,GAAA,yCAAI;;IAGpD,SAAc;IACd,UAAa;IAEpB,YAAY,AAAO,CAAS,EAAE,QAAa,CAAE;QACzC,KAAK;aADU,IAAA;QAEf,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,EAAE;IAChC;IAIO,kBAAkB,CAAS,EAAE,QAAa,EAAQ;QACrD,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,UAAU,QAAQ,CAAC,IAAI,CAAC,IAAI;IACzD;IAEO,SAAS,IAAO,EAAQ;QAC3B,IAAI,CAAC,IAAI,GAAG;QACZ,OAAO,IAAI;IACf;IAEO,UAAU,CAAS,EAAE,KAAiB,EAAQ;QACjD,MAAM,SAAS,IAAI,CAAC,SAAS,GAAG;QAChC,IAAI,MAAM,MAAM,KAAK,QACjB,MAAM,IAAI,WAAW,CAAC,SAAS,EAAE,OAAO,OAAO,CAAC;QAEpD,MAAM,eAAe,KAAM,CAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,AAAD;QAC/D,MAAM,WAA8B,EAAE;QACtC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IACtC,SAAS,IAAI,CACT,MAAM,KAAK,CAAC,IAAI,cAAc,AAAC,CAAA,IAAI,CAAA,IAAK;QAGhD,OAAO,IAAK,IAAI,CAAC,WAAW,CACxB,MACG,SACE,OAAO,GACP,GAAG,CAAC,CAAC,QAAU,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG;IAExD;IAEO,QAAQ,CAAS,EAAE,GAAW,EAAQ;QACzC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAA,GAAA,yCAAM,EAAE;IACrC;IAEO,OAAO,CAAS,EAAE,EAAM,EAAQ;QACnC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG;QACnC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;QAC9B,MAAM,WAAqB,EAAE;QAC7B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IACtC,SAAS,IAAI,CAAC,MAAM,IAAI,IAAI;QAChC,MAAM,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG;QACjC,IAAI,IAAI,YAAY,CAAA,GAAA,yCAAE,GAAG,OAAO,IAAI,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,EAAE;aAC/C,IAAI,IAAI,YAAY,CAAA,GAAA,yCAAE,GACvB,OAAO,IAAI,GAAG,IAAI,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,GAAG,CAAC;aAClD,IAAI,IAAI,YAAY,CAAA,GAAA,yCAAG,GACxB,OAAO,IAAI,GAAG,IAAI,CAAA,GAAA,yCAAE,EAChB,GACA,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,IAAI,CAAC,IACb,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,GAAG,CAAC,IACZ,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,IAAI,CAAC;QAErB,OAAO;IACX;IAEO,KAAK,CAAS,EAAQ;QACzB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,EAAE;IACtC;IAEO,IAAI,CAAS,EAAQ;QACxB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,EAAE;IACtC;IAEO,QAAc;QACjB,OAAO,IAAI,CAAC,iBAAiB,CACzB,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAY,QAAQ,KAAK;IAEpD;IAEO,UAAsB;QACzB,MAAM,QAAuB,EAAE;QAC/B,IAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,KAAK,GAAG,IAC3C,MAAM,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO;QAE1C,OAAO,WAAW,IAAI,CAAC;IAC3B;IAEO,SAAkB;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,UAAY,CAAC,QAAQ,MAAM,QAAQ;IACvE;IAEO,QAAgB;QACnB,OAAO,CAAA,GAAA,yCAAI,EAAE,IAAI,CAAC,OAAO;IAC7B;IAEO,WAAmB;QACtB,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7D;IAEO,SAAe;QAClB,OAAO,IAAI,CAAC,iBAAiB,CACzB,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAY,QAAQ,MAAM;IAErD;IAEO,QAAQ,CAAS,EAAQ;QAC5B,IAAI,IAAI,CAAC,CAAC,IAAI,CAAA,GAAA,yCAAA,GAAG,MAAM,IAAI,CAAA,GAAA,yCAAY,EAAE;QACzC,IAAI,CAAA,GAAA,yCAAQ,EAAE,GAAG,IAAI,CAAC,SAAS;QAC/B,IAAI,MAAM,GAAG,OAAO,IAAI;QACxB,OAAO,IAAI,CAAC,iBAAiB,CACzB,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,SAAS,QACxB,UAAU,IACJ,QAAQ,OAAO,CAAC,KAChB,QACK,OAAO,CAAC,GACR,QAAQ,CAAC,CAAA,GAAA,yCAAW,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG;IAGhE;IAEO,IAAI,QAAgB,EAAQ;QAC/B,CAAA,GAAA,yCAAK,EAAE,YAAY,EAAE;QACrB,IAAI,SAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI;QAChD,IAAI,OAAoB,IAAI;QAC5B,MAAO,YAAY,EAAE,CAAE;YACnB,IAAI,WAAW,EAAE,EAAE,SAAS,OAAO,QAAQ,CAAC;YAC5C,OAAO,KAAK,QAAQ,CAAC;YACrB,aAAa,EAAE;QACnB;QACA,OAAO;IACX;IAEO,MAAM,KAAwB,EAAQ;QACzC,IAAI;QACJ,IAAI,iBAAiB,6CAAY,iBAAiB,IAAI,CAAC,WAAW,EAC9D,WAAW,MAAM,QAAQ;aACtB;YACH,IAAI,OAAO,UAAU,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAC7D,MAAM,IAAI,CAAA,GAAA,yCAAY,EAClB;YAER,WAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7D,QAAQ,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC;QAClC;QACA,OAAO,IAAI,CAAC,iBAAiB,CACzB,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,SAAS,IAAM,QAAQ,GAAG,CAAC,QAAQ,CAAC,EAAE;IAEjE;IAEO,aAAa,KAAwB,EAAQ;QAChD,IAAI,OAAO,UAAU,UACjB,OAAO,IAAI,CAAC,iBAAiB,CACzB,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAY,QAAQ,QAAQ,CAAC;aAEjD,IAAI,IAAI,CAAC,SAAS,GAAG,MAAM,SAAS,EACvC,MAAM,IAAI,CAAA,GAAA,yCAAY,EAAE;QAC5B,MAAM,WAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAI;YAC1C,IACI,iBAAiB,6CACjB,MAAM,SAAS,KAAK,IAAI,CAAC,SAAS,EACpC;gBACE,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,MAAM,QAAQ,CAAC,OAAO,GACvC,IAAI,EAAE,MAAM,MAAM,EAAE,MAAM,IAAI;oBAC1B,MAAM,QAAQ,CAAA,GAAA,yCAAQ,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM;oBACnD,IAAI,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EAC7B,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CACjC,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI;yBAGpC,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CACjC,EAAE,QAAQ,CAAC;gBAGvB;YAER,OAAO,IAAI,EAAE,MAAM,IAAI,QAAQ,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC;QACpD;QACA,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE;IAC1C;IAEO,SAAS,KAAwB,EAAsB;QAC1D,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,UAAU,WAAW,CAAC,QAAQ,MAAM,MAAM;IACrE;IAEO,OAAO,KAAwB,EAAsB;QACxD,OAAO,IAAI,CAAC,QAAQ,CAChB,OAAO,UAAU,WAAW,CAAC,QAAQ,MAAM,OAAO;IAE1D;IAEO,QAAQ,KAAwB,EAAW;QAC9C,IAAI,CAAE,CAAA,iBAAiB,6CAAY,iBAAiB,IAAI,CAAC,WAAW,AAAD,GAAI;YACnE,IACI,OAAO,UAAU,YAChB,iBAAiB,6CAAY,IAAI,CAAC,SAAS,GAAG,MAAM,SAAS,EAChE;gBACE,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAK;oBAC3C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAC9C,OAAO;gBACf;gBACA,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;YACnC;YACA,MAAM,IAAI,CAAA,GAAA,yCAAY,EAAE;QAC5B,OACI,OACI,IAAI,CAAC,QAAQ,CAAC,SAAS,CACnB,CAAC,SAAS,IAAM,CAAC,QAAQ,MAAM,CAAC,MAAM,QAAQ,CAAC,EAAE,OAC/C,MAAM,IAAI,CAAC,CAAC,KAAK,MAAM,CAAC;IAE1C;IAEO,GAAG,KAAW,EAAW;QAC5B,IAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,KAAK,GAAG,IAAK;YAChD,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC1B,MAAM,IAAI,MAAM,QAAQ,CAAC,EAAE;YAC3B,IAAI,EAAE,EAAE,CAAC,IAAI,OAAO;iBACf,IAAI,EAAE,EAAE,CAAC,IAAI,OAAO;QAC7B;QACA,OAAO;IACX;IAEO,GAAG,KAAW,EAAW;QAC5B,IAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,KAAK,GAAG,IAAK;YAChD,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC1B,MAAM,IAAI,MAAM,QAAQ,CAAC,EAAE;YAC3B,IAAI,EAAE,EAAE,CAAC,IAAI,OAAO;iBACf,IAAI,EAAE,EAAE,CAAC,IAAI,OAAO;QAC7B;QACA,OAAO;IACX;IAEO,KAAK,KAAW,EAAW;QAC9B,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC;IACzC;IAEO,KAAK,KAAW,EAAW;QAC9B,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC;IACzC;IAEO,IAAI,KAAwB,EAAsB;QACrD,IAAI;YACA,OAAO,IAAI,CAAC,KAAK,CAAC;QACtB,EAAE,OAAO,OAAO;YACZ,IAAI,CAAE,CAAA,iBAAiB,CAAA,GAAA,yCAAY,CAAA,KAAM,OAAO,UAAU,UACtD,MAAM;YACV,OAAO,MAAM,KAAK,CAAC,IAAI;QAC3B;IACJ;IAEO,SAAS,KAAwB,EAAsB;QAC1D,IAAI;YACA,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,EAAE,OAAO,OAAO;YACZ,IAAI,CAAE,CAAA,iBAAiB,CAAA,GAAA,yCAAY,CAAA,KAAM,OAAO,UAAU,UACtD,MAAM;YACV,OAAO,MAAM,YAAY,CAAC,IAAI;QAClC;IACJ;IAEO,OAAO,KAAwB,EAAW;QAC7C,IAAI;YACA,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,EAAE,OAAO,OAAO;YACZ,IAAI,CAAE,CAAA,iBAAiB,CAAA,GAAA,yCAAY,CAAA,GAAI,MAAM;YAC7C,OAAO,OAAO,UAAU,WAAW,QAAQ,MAAM,OAAO,CAAC,IAAI;QACjE;IACJ;AACJ;;;;;;;ACvRO,MAAM,kDAAW,CAAA,GAAA,yCAAI;;IACxB,OAAc,MAAM,IAAI,0CAAG,EAAE,EAAE,EAAE,EAAE;IAE5B,UAAc;IACd,MAAc;IAErB,YAAY,AAAO,CAAS,EAAE,KAAa,CAAE;QACzC,KAAK;aADU,IAAA;aAHZ,YAAY;QAKf,IAAI,CAAC,KAAK,GAAG,CAAA,GAAA,yCAAE,EAAE,OAAO;IAC5B;IAEO,UAAU,CAAS,EAAE,KAAiB,EAAQ;QACjD,IAAI,MAAM,MAAM,KAAK,IAAI,MAAM,IAAI,WAAW;QAC9C,OAAO,IAAI,0CAAG,GAAG,CAAA,GAAA,yCAAY,EAAE,OAAO;IAC1C;IAEO,QAAQ,CAAS,EAAE,GAAW,EAAQ;QACzC,OAAO,0CAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAA,GAAA,yCAAM,EAAE;IACvC;IAEO,OAAO,EAAU,EAAE,EAAQ,EAAQ;QACtC,OAAO;IACX;IAEO,KAAK,CAAS,EAAQ;QACzB,OAAO,IAAI,0CAAG,GAAG,EAAE;IACvB;IAEO,IAAI,CAAS,EAAQ;QACxB,OAAO,IAAI,0CAAG,GAAG,EAAE;IACvB;IAEO,QAAc;QACjB,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK;IACpC;IAEO,UAAsB;QACzB,OAAO,CAAA,GAAA,yCAAY,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI;IACzC;IAEO,SAAkB;QACrB,OAAO;IACX;IAEO,QAAgB;QACnB,OAAO,CAAA,GAAA,yCAAI,EAAE,IAAI,CAAC,OAAO;IAC7B;IAEO,WAAmB;QACtB,MAAM,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAChC,OAAO,CAAC,KAAK,EACT,IAAI,MAAM,GAAG,KACP,CAAC,EAAE,IAAI,KAAK,CAAC,GAAG,GAAG,EAAE,EAAE,IAAI,KAAK,CAAC,IAAI,MAAM,GAAG,GAAG,CAAC,GAClD,IACT,CAAC,CAAC;IACP;IAEO,SAAe;QAClB,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK;IACrC;IAEO,UAAgB;QACnB,IAAI,KAAK,EAAE,EACP,KAAK,EAAE,EACP,KAAK,EAAE,EACP,KAAK,EAAE;QACX,IAAI,IAAI,IAAI,CAAC,CAAC;QACd,IAAI,IAAI,IAAI,CAAC,KAAK;QAClB,MAAO,KAAK,EAAE,CAAE;YACZ,MAAM,IAAI,IAAI;YACd,MAAM,QAAQ;YACd,IAAI;YACJ,IAAI,CAAA,GAAA,yCAAE,EAAE,OAAO;YACf,MAAM,UAAU;YAChB,KAAK;YACL,KAAK,UAAU,IAAI;YACnB,MAAM,UAAU;YAChB,KAAK;YACL,KAAK,UAAU,IAAI;QACvB;QACA,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE;IAC1B;IAEO,QAAQ,EAAU,EAAQ;QAC7B,OAAO,IAAI;IACf;IAEO,IAAI,QAAgB,EAAQ;QAC/B,OACI,aAAa,EAAE,GACT,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,EAAE,IACjB,aAAa,EAAE,GACf,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,IACzB,CAAA,GAAA,yCAAE,EAAE,UAAU,EAAE,MAAM,EAAE,GACxB,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,WAAW,EAAE,IACzD,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EACjC,GAAG,CAAC,WAAW,EAAE,EACjB,QAAQ,CAAC,IAAI;IAEhC;IAEO,MAAM,KAAwB,EAAQ;QACzC,IAAI,OAAO,UAAU,UACjB,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG;aAClC,IAAI,iBAAiB,2CACtB,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;aAC7C,MAAM,IAAI,CAAA,GAAA,yCAAY,EAAE;IACjC;IAEO,aAAa,KAAwB,EAAQ;QAChD,IAAI,OAAO,UAAU,UACjB,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG;aAClC,IAAI,iBAAiB,2CACtB,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;aAE9C,MAAM,IAAI,CAAA,GAAA,yCAAY,EAClB;IAEZ;IAEO,SAAS,KAAwB,EAAQ;QAC5C,OAAO,IAAI,CAAC,GAAG,CACX,OAAO,UAAU,WAAW,CAAC,QAAQ,MAAM,MAAM;IAEzD;IAEO,OAAO,KAAwB,EAAQ;QAC1C,OAAO,IAAI,CAAC,QAAQ,CAChB,AAAC,CAAA,OAAO,UAAU,WACZ,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,SACf,KAAI,EACR,OAAO;IAEjB;IAEO,QAAQ,KAAwB,EAAW;QAC9C,OACI,iBAAiB,6CACjB,IAAI,CAAC,KAAK,KAAK,MAAM,KAAK,IAC1B,IAAI,CAAC,CAAC,KAAK,MAAM,CAAC;IAE1B;IAEO,GAAG,KAAS,EAAW;QAC1B,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;IACnC;IAEO,GAAG,KAAS,EAAW;QAC1B,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;IACnC;IAEO,KAAK,KAAS,EAAW;QAC5B,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC;IACzC;IAEO,KAAK,KAAS,EAAW;QAC5B,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC;IACzC;IAEO,UAAc;QACjB,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,EACjB,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,EAAE;aACrB,IAAI,CAAA,GAAA,wCAAK,EAAE,IAAI,CAAC,KAAK,EAAE,AAAC,CAAA,IAAI,CAAC,CAAC,GAAG,EAAE,AAAD,IAAK,EAAE,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,EAC3D,MAAM,IAAI,MAAM;aACb,IAAI,CAAA,GAAA,yCAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,EAC7B,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,EACN,CAAA,GAAA,wCAAK,EAAE,IAAI,CAAC,KAAK,EAAE,AAAC,CAAA,IAAI,CAAC,CAAC,GAAG,EAAE,AAAD,IAAK,EAAE,EAAE,IAAI,CAAC,CAAC;aAE9C,IAAI,CAAA,GAAA,yCAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,EAC7B,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,EACN,CAAA,GAAA,wCAAK,EAAE,IAAI,CAAC,KAAK,EAAE,AAAC,CAAA,IAAI,CAAC,CAAC,GAAG,EAAE,AAAD,IAAK,EAAE,EAAE,IAAI,CAAC,CAAC;QAGrD,IAAI,IAAI,EAAE;QACV,IAAI,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE;QACnB,MAAO,CAAA,GAAA,yCAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAE;YACtB,KAAK,EAAE;YACP;QACJ;QACA,IAAI,IAAI,EAAE;QACV,IAAK,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAE;YAClC,MAAM,QAAQ,CAAA,GAAA,wCAAK,EAAE,GAAG,AAAC,CAAA,IAAI,CAAC,CAAC,GAAG,EAAE,AAAD,IAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YAClD,IAAI,UAAU,CAAA,GAAA,yCAAE,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,GAAG;gBAC5B,IAAI;gBACJ;YACJ;QACJ;QACA,IAAI,IAAI;QACR,IAAI,IAAI,CAAA,GAAA,wCAAK,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;QAC3B,IAAI,IAAI,CAAA,GAAA,wCAAK,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;QACpC,IAAI,IAAI,CAAA,GAAA,wCAAK,EAAE,IAAI,CAAC,KAAK,EAAE,AAAC,CAAA,IAAI,EAAE,AAAD,IAAK,EAAE,EAAE,IAAI,CAAC,CAAC;QAChD,MAAO,KAAM;YACT,IAAI,MAAM,EAAE,EAAE,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE,EAAE;iBACjC,IAAI,MAAM,EAAE,EAAE,OAAO,IAAI,0CAAG,IAAI,CAAC,CAAC,EAAE;YACzC,IAAI,IAAI,EAAE;YACV,IAAI,IAAI;YACR,MAAO,KAAK,EAAE,CAAE;gBACZ,IAAI,CAAA,GAAA,yCAAE,EAAE,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;gBACvB;YACJ;YACA,MAAM,IAAI,CAAA,GAAA,wCAAK,EAAE,GAAG,CAAA,GAAA,wCAAK,EAAE,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YAC1D,IAAI;YACJ,IAAI,CAAA,GAAA,yCAAE,EAAE,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YACvB,IAAI,CAAA,GAAA,yCAAE,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC;YACrB,IAAI,CAAA,GAAA,yCAAE,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC;QACzB;IACJ;IAEO,IAAI,KAAwB,EAAY;QAC3C,IAAI;YACA,OAAO,IAAI,CAAC,KAAK,CAAC;QACtB,EAAE,OAAO,OAAO;YACZ,IAAI,CAAE,CAAA,iBAAiB,CAAA,GAAA,yCAAY,CAAA,KAAM,OAAO,UAAU,UACtD,MAAM;YACV,OAAO,MAAM,KAAK,CAAC,IAAI;QAC3B;IACJ;IAEO,SAAS,KAAwB,EAAY;QAChD,IAAI;YACA,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,EAAE,OAAO,OAAO;YACZ,IAAI,CAAE,CAAA,iBAAiB,CAAA,GAAA,yCAAY,CAAA,KAAM,OAAO,UAAU,UACtD,MAAM;YACV,OAAO,MAAM,YAAY,CAAC,IAAI;QAClC;IACJ;IAEO,OAAO,KAAwB,EAAW;QAC7C,IAAI;YACA,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,EAAE,OAAO,OAAO;YACZ,IAAI,CAAE,CAAA,iBAAiB,CAAA,GAAA,yCAAY,CAAA,GAAI,MAAM;YAC7C,OAAO,OAAO,UAAU,WAAW,QAAQ,MAAM,OAAO,CAAC,IAAI;QACjE;IACJ;AACJ;;;;;;;ACxPO,MAAM,kDAAY,CAAA,GAAA,yCAAO;IAC5B,OAAc,MAAM,IAAI,0CAAI,EAAE,EAAE,CAAA,GAAA,yCAAC,EAAE,GAAG,EAAE,CAAA,GAAA,yCAAC,EAAE,GAAG,EAAE;IAEzC,YAAY,EAAE;IACd,KAAS;IAEhB,YAAY,CAAS,EAAE,CAAK,EAAE,CAAK,CAAE;QACjC,KAAK,CAAC,GAAG;YAAC;YAAG;SAAE;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,EAAE;IAC7B;IAEO,UAAU,CAAS,EAAE,QAAc,EAAQ;QAC9C,OAAO,IAAI,0CAAI,GAAG,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE;IAC9C;IAEO,UAAgB;QACnB,MAAM,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;QAC5B,MAAM,SAAS,EAAE,QAAQ,CAAC,GAAG,GAAG,CAAC,EAAE,QAAQ,CAAC,IAAI,OAAO;QACvD,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,EACN,EAAE,QAAQ,CAAC,SACX,EAAE,MAAM,GAAG,QAAQ,CAAC;IAE5B;IAEO,kBAAwB;QAC3B,MAAM,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;QAC5B,OAAO,IAAI,0CAAI,IAAI,CAAC,CAAC,EAAE,EAAE,QAAQ,CAAC,IAAU,EAAE,GAAG,CAAC;IACtD;IAEO,UAAgB;QACnB,MAAM,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ;QAC9B,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IACnC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,OAAO;QACzC,IAAI,QAAQ,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE;QACpC,IAAI,QAAQ,MAAM,GAAG,CAAC,AAAC,CAAA,IAAI,CAAC,CAAC,GAAG,EAAE,AAAD,IAAK,EAAE;QACxC,IAAI,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC,QAC3B,MAAM,IAAI,MAAM;QACpB,QAAQ,MAAM,OAAO;QACrB,IAAI,QAAQ,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO;QAC7D,QAAQ,MAAM,GAAG,CAAC,AAAC,CAAA,IAAI,CAAC,CAAC,GAAG,EAAE,AAAD,IAAK,EAAE;QACpC,IAAI,MAAM,MAAM,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAC/B,QAAQ,GACH,QAAQ,CAAC,OACT,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO;QAC5C,MAAM,KAAK,MAAM,OAAO;QACxB,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,IAAI,OAAO;QAC9D,OAAO,IAAI,0CAAI,IAAI,CAAC,CAAC,EAAE,IAAI;IAC/B;AACJ;;;;;;;ACjDO,MAAM,kDAAY,CAAA,GAAA,yCAAO;IAC5B,OAAc,MAAM,IAAI,0CAAI,EAAE,EAAE,CAAA,GAAA,yCAAE,EAAE,GAAG,EAAE,CAAA,GAAA,yCAAE,EAAE,GAAG,EAAE,CAAA,GAAA,yCAAE,EAAE,GAAG,EAAE;IAEpD,YAAY,EAAE;IACd,KAAU;IAEjB,YAAY,CAAS,EAAE,CAAM,EAAE,CAAM,EAAE,CAAM,CAAE;QAC3C,KAAK,CAAC,GAAG;YAAC;YAAG;YAAG;SAAE;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,GAAG,CAAC;IACrD;IAEO,UAAU,CAAS,EAAE,QAAe,EAAQ;QAC/C,OAAO,IAAI,0CAAI,GAAG,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE;IAC3D;IAEO,UAAgB;QACnB,MAAM,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;QAC/B,MAAM,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,EAAE,QAAQ,CAAC,EAAE,eAAe;QAC9D,MAAM,KAAK,AAAC,EAAE,QAAQ,CAAC,GAClB,eAAe,GACf,QAAQ,CAAC,EAAE,QAAQ,CAAC;QACzB,MAAM,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,EAAE,QAAQ,CAAC;QAC7C,MAAM,SAAS,GACV,QAAQ,CAAC,GACT,GAAG,CAAC,AAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC,IAAY,eAAe,IAC/D,OAAO;QACZ,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,EACN,GAAG,QAAQ,CAAC,SACZ,GAAG,QAAQ,CAAC,SACZ,GAAG,QAAQ,CAAC;IAEpB;IAEO,kBAAwB;QAC3B,MAAM,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;QAC/B,OAAO,IAAI,0CAAI,IAAI,CAAC,CAAC,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,GAAU,GAAG;IAC5D;AACJ;;;;;;;ACtCO,MAAM,kDAAa,CAAA,GAAA,yCAAO;IAC7B,OAAc,MAAM,IAAI,0CAAK,EAAE,EAAE,CAAA,GAAA,yCAAE,EAAE,GAAG,EAAE,CAAA,GAAA,yCAAE,EAAE,GAAG,EAAE;IAE5C,YAAY,GAAG;IACf,KAAU;IAEjB,YAAY,CAAS,EAAE,CAAM,EAAE,CAAM,CAAE;QACnC,KAAK,CAAC,GAAG;YAAC;YAAG;SAAE;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA,GAAA,yCAAE,EACd,GACA,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,IAAI,CAAC,IACb,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,GAAG,CAAC,IACZ,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,IAAI,CAAC;IAErB;IAEO,UAAU,CAAS,EAAE,QAAe,EAAQ;QAC/C,OAAO,IAAI,0CAAK,GAAG,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE;IAC/C;IAEO,UAAgB;QACnB,MAAM,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;QAC5B,MAAM,SAAS,EACV,QAAQ,CAAC,GACT,QAAQ,CAAC,AAAC,EAAE,QAAQ,CAAC,GAAW,eAAe,IAC/C,OAAO;QACZ,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,EACN,EAAE,QAAQ,CAAC,SACX,EAAE,MAAM,GAAG,QAAQ,CAAC;IAE5B;AACJ;;;;;;;;;;;;;;;;;;;;;;;;AChCO,MAAM,4CAAI,CAAC,mBAAmB;AAC9B,MAAM,4CACT,mGAAmG;AAChG,MAAM,4CAAI,IAAI,CAAA,GAAA,yCAAC,EAAE,2CAAG,EAAE;AACtB,MAAM,4CAAI,IAAI,CAAA,GAAA,yCAAC,EAAE,2CAAG,EAAE;AACtB,MAAM,4CAAS,IAAI,CAAA,GAAA,yCAAE,EAAE,2CAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,2CAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,2CAAG,EAAE;AACrD,MAAM,4CAAS,IAAI,CAAA,GAAA,yCAAE,EAAE,2CAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,2CAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,2CAAG,EAAE;AAErD,MAAM,4CAAK,IAAI,CAAA,GAAA,yCAAC,EACnB,2CACA,mGAAmG;AAGhG,MAAM,4CAAK,IAAI,CAAA,GAAA,yCAAC,EACnB,2CACA,mGAAmG;AAGhG,MAAM,4CAAM,IAAI,CAAA,GAAA,yCAAE,EACrB,2CACA,IAAI,CAAA,GAAA,yCAAC,EACD,2CACA,mHAAmH,GAEvH,IAAI,CAAA,GAAA,yCAAC,EACD,2CACA,oHAAoH;AAIrH,MAAM,4CAAM,IAAI,CAAA,GAAA,yCAAE,EACrB,2CACA,IAAI,CAAA,GAAA,yCAAC,EACD,2CACA,oHAAoH,GAExH,IAAI,CAAA,GAAA,yCAAC,EACD,2CACA,mHAAmH;AAIpH,MAAM,4CACT,mEAAmE;AAChE,MAAM,4CAAI,mCAAmC;AAC7C,MAAM,4CACT,kKAAkK;AAC/J,MAAM,4CAAI,GAAG;AACb,MAAM,4CACT,kGAAkG;AAC/F,MAAM,4CACT,iGAAiG;AAE9F,MAAM,4CAAgB;OACzB;OACA;OACA;QACA;QACA;SACA;SACA;OACA;OACA;OACA;OACA;YACA;gBACA;AACJ;AAEO,MAAM,4CAAqB;OAC9B;IACA,GAAG;IACH,GAAG;QACH;QACA;SACA;SACA;OACA;IACA,GAAG;OACH;OACA;YACA;gBACA;AACJ;;;;;;;;ACnFO,MAAM,4CAAgE;IACzE,SAAS,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,CAAC,EAAE;IACtB,SAAS,IAAI,CAAA,GAAA,yCAAE,EACX,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GACZ,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG;IAG3G,SAAS,IAAI,CAAA,GAAA,yCAAE,EACX,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAEhB,SAAS,IAAI,CAAA,GAAA,yCAAE,EACX,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mFAAmF,GAEvF,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAEhB,SAAS,IAAI,CAAA,GAAA,yCAAE,EACX,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAEhB,SAAS,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAC/C,SAAS,IAAI,CAAA,GAAA,yCAAE,EACX,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAEhB,SAAS,IAAI,CAAA,GAAA,yCAAE,EACX,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAEhB,SAAS,IAAI,CAAA,GAAA,yCAAE,EACX,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mFAAmF,GAEvF,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAEhB,SAAS,IAAI,CAAA,GAAA,yCAAE,EACX,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GACZ,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mFAAmF;IAG3F,SAAS,IAAI,CAAA,GAAA,yCAAE,EACX,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mFAAmF,GAEvF,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAEhB,UAAU,IAAI,CAAA,GAAA,yCAAE,EACZ,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,iGAAiG,IAGzG,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,UAAU,IAAI,CAAA,GAAA,yCAAE,EACZ,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mFAAmF,GAEvF,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IAEhB,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,UAAU,IAAI,CAAA,GAAA,yCAAE,EACZ,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,kGAAkG,IAG1G,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,UAAU,IAAI,CAAA,GAAA,yCAAE,EACZ,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mFAAmF,GAEvF,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IAEhB,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,UAAU,IAAI,CAAA,GAAA,yCAAE,EACZ,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,kGAAkG,IAG1G,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,UAAU,IAAI,CAAA,GAAA,yCAAE,EACZ,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IAEhB,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,UAAU,IAAI,CAAA,GAAA,yCAAE,EACZ,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,iGAAiG,GAErG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,IAG3G,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,UAAU,IAAI,CAAA,GAAA,yCAAE,EACZ,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IAEhB,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,UAAU,IAAI,CAAA,GAAA,yCAAE,EACZ,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,kGAAkG,GAEtG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,IAG3G,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,WAAW,IAAI,CAAA,GAAA,yCAAE,EACb,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IAEhB,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAE1C,WAAW,IAAI,CAAA,GAAA,yCAAE,EACb,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,kGAAkG,GAEtG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,IAG3G,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;AAE9C;AAEO,SAAS,0CACZ,SAAiB,EACjB,CAAS,EACT,KAAa;IAEb,OAAO,yCAAU,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;AACnD;;;;;;;;ACnPO,MAAM,4CAAmB;IAC5B,UAAU;IACV,WAAW;IACX,SAAS,CAAC;QACN,MAAM,OAAO,IAAI,CAAA,GAAA,sCAAE,EAAE,WAAW;QAChC,KAAK,MAAM,CAAC;QACZ,OAAO,KAAK,OAAO,CAAC;IACxB;AACJ;AAEO,MAAM,4CAAmB;IAC5B,UAAU;IACV,WAAW;IACX,SAAS,CAAC;QACN,MAAM,OAAO,IAAI,CAAA,GAAA,sCAAE,EAAE,WAAW;QAChC,KAAK,MAAM,CAAC;QACZ,OAAO,KAAK,OAAO,CAAC;IACxB;AACJ;;;;;;;;;;ACnBO,MAAM,2CAAO;IAChB,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,kGAAkG,GAEtG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,kGAAkG;IAG1G,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GACZ,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG;IAG3G,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,kGAAkG;IAG1G,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;CAEnB;AAEM,MAAM,4CAAO;IAChB,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GACZ,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG;IAG3G,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,GACd,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG;IAG3G,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;CACzC;AAEM,MAAM,4CAAO;IAChB,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG;IAG3G,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GACZ,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,kGAAkG;IAG1G,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,kGAAkG;IAG1G,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;CAEnB;AAEM,MAAM,4CAAO;IAChB,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG,GAEvG,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG;IAG3G,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GACZ,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG;IAG3G,IAAI,CAAA,GAAA,yCAAE,EACF,CAAA,GAAA,yCAAA,GACA,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,KAAK,GACf,IAAI,CAAA,GAAA,yCAAC,EACD,CAAA,GAAA,yCAAA,GACA,mGAAmG;IAG3G,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;CACzC;;;;;;;;;;;;;;ACnIM,MAAM,4CAAO,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,CAAC,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,CAAC,EAAE;AACrD,MAAM,4CAAU,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI;AACxD,MAAM,4CAAU,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,KAAK,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,KAAK;AAC5D,MAAM,4CACT,kGAAkG;AAC/F,MAAM,4CACT,kGAAkG;AAC/F,MAAM,4CACT,kGAAkG;AAC/F,MAAM,4CACT,kGAAkG;AAC/F,MAAM,4CAAO;IAChB,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,4CAAM,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG;IACrC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,CAAA,GAAA,yCAAA,IAAI,4CAAM,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG;IACzC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,4CAAM,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG;IACrC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,CAAA,GAAA,yCAAA,IAAI,4CAAM,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG;CAC5C;;;;;;;;AChBM,MAAM,4CACT,kGAAkG;AAE/F,MAAM,4CAAe;IACxB,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IACtC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,4CAAM,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG;IACrC,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,4CAAM,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,CAAA,GAAA,yCAAA,IAAI;CAC5C;;;;;;;;;ACVM,MAAM,4CAAiB,IAAI,cAAc,MAAM,CAClD;AAEG,MAAM,4CAAe,IAAI,cAAc,MAAM,CAChD;AAEG,MAAM,4CAAe,IAAI,cAAc,MAAM,CAChD;AAEG,MAAM,4CAAkB,IAAI,cAAc,MAAM,CACnD;;;;;;;ACEG,MAAM;;;;;IACT,YACI,AAAO,CAAW,EAClB,AAAO,CAAW,EAClB,AAAO,UAAmB,EAC1B,AAAO,KAAS,CAAA,GAAA,yCAAQ,CAAC,CAC3B;aAJS,IAAA;aACA,IAAA;aACA,aAAA;aACA,KAAA;QAEP,CAAA,GAAA,yCAAK,EAAE,aAAa,EAAE,WAAW;IACrC;IAEO,YAAqB;QACxB,OACI,IAAI,CAAC,UAAU,IACf,IAAI,CAAC,CAAC,CACD,QAAQ,CAAC,IAAI,CAAC,CAAC,EACf,MAAM,CACH,IAAI,CAAC,CAAC,CACD,QAAQ,CAAC,IAAI,CAAC,CAAC,EACf,QAAQ,CAAC,IAAI,CAAC,CAAC,EACf,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAC7B,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAGlC;IAEO,aAA4B;QAC/B,OAAO,IAAI,CAAA,GAAA,yCAAY,EACnB,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GACpB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,EAAE;IAEf;IAEO,QAAqB;QACxB,MAAM,IAAI,CAAA,GAAA,yCAAG,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChC,MAAM,MAAM,IAAI,CAAA,GAAA,yCAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9D,MAAM,MAAM,IAAI,CAAA,GAAA,yCAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI;QAC/D,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAChB,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAChB,OACA,IAAI,CAAC,EAAE;IAEf;IAEO,UAAuB;QAC1B,MAAM,IAAI,CAAA,GAAA,yCAAG,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChC,MAAM,MAAM,IAAI,CAAA,GAAA,yCAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9D,MAAM,MAAM,IAAI,CAAA,GAAA,yCAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAA,GAAA,yCAAE,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI;QAC/D,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MACd,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MACd,OACA,IAAI,CAAC,EAAE;IAEf;IAEO,SAAsB;QACzB,MAAM,OAAO,IAAI,CAAC,CAAC,CACd,QAAQ,CAAC,IAAI,CAAC,CAAC,EACf,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,GAC7B,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAClB,MAAM,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;QAC1D,MAAM,OAAO,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3D,MAAM,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC9D,OAAO,IAAI,0CACP,MACA,MACA,OACA,IAAI,CAAC,EAAE;IAEf;IAEO,IAAI,KAAkB,EAAe;QACxC,CAAA,GAAA,yCAAK,EAAE,IAAI,CAAC,SAAS;QACrB,CAAA,GAAA,yCAAK,EAAE,MAAM,SAAS;QACtB,IAAI,IAAI,CAAC,UAAU,EAAE,OAAO;aACvB,IAAI,MAAM,UAAU,EAAE,OAAO,IAAI;aACjC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,OAAO,IAAI,CAAC,MAAM;QAC/C,MAAM,IAAI,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjE,MAAM,OAAO,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC;QAC5D,MAAM,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC9D,OAAO,IAAI,0CACP,MACA,MACA,OACA,IAAI,CAAC,EAAE;IAEf;IAEO,SAAS,KAAkB,EAAe;QAC7C,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,MAAM;IAChC;IAEO,SAAS,KAAkB,EAAe;QAC7C,OAAO,CAAA,GAAA,yCAAiB,EAAE,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,EAAE,EAAE,QAAQ;IACzE;IAEO,SAAsB;QACzB,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,CAAC,CAAC,MAAM,IACb,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,EAAE;IAEf;IAEO,OAAO,KAAkB,EAAW;QACvC,OACI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KACrB,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KACrB,IAAI,CAAC,UAAU,KAAK,MAAM,UAAU;IAE5C;IAEO,QAAqB;QACxB,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,CAAC,KAAK,IACZ,IAAI,CAAC,CAAC,CAAC,KAAK,IACZ,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,EAAE;IAEf;IAEO,WAAmB;QACtB,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IACxE;AACJ;;;;;;;;;;AE3HO,MAAM;;;;;;IACT,OAAc,UACV,KAAiB,EACjB,WAAoB,EACpB,KAAS,CAAA,GAAA,yCAAQ,CAAC,EACL;QACb,MAAM,WAAW,cAAc,CAAA,GAAA,yCAAE,IAAI,CAAA,GAAA,yCAAC;QACtC,IAAI,aAAa;YACb,IAAI,MAAM,MAAM,KAAK,IAAI,MAAM,IAAI,MAAM;QAC7C,OAAO;YACH,IAAI,MAAM,MAAM,KAAK,IAAI,MAAM,IAAI,MAAM;QAC7C;QACA,MAAM,QAAQ,KAAK,CAAC,EAAE,GAAG;QACzB,IAAI;YAAC;YAAM;YAAM;SAAK,CAAC,QAAQ,CAAC,QAC5B,MAAM,IAAI,MAAM;QACpB,MAAM,aAAa,AAAC,CAAA,QAAQ,IAAG,MAAO;QACtC,MAAM,WAAW,AAAC,CAAA,QAAQ,IAAG,MAAO;QACpC,MAAM,SAAS,AAAC,CAAA,QAAQ,IAAG,MAAO;QAClC,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM;QACjC,KAAK,CAAC,EAAE,IAAI;QACZ,IAAI,UAAU;YACV,KAAK,MAAM,QAAQ,MAAO;gBACtB,IAAI,SAAS,GACT,MAAM,IAAI,MACN;YAEZ;YACA,OAAO,IAAI,CAAA,GAAA,yCAAU,EACjB,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GACtB,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GACtB,MACA,IACF,UAAU;QAChB;QACA,MAAM,IAAI,AAAC,CAAA,cAAc,CAAA,GAAA,yCAAE,IAAI,CAAA,GAAA,yCAAC,CAAA,EAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;QACvD,MAAM,SAAS,CAAA,GAAA,yCAAI,EAAE,GAAG;QACxB,MAAM,OAAO,cACP,CAAA,GAAA,yCAAM,EAAE,QAAe,MACvB,CAAA,GAAA,yCAAK,EAAE,QAAc;QAC3B,MAAM,IAAK,SAAS,SAAS,SAAS,OAAO,MAAM;QACnD,OAAO,IAAI,CAAA,GAAA,yCAAU,EAAE,GAAG,GAAG,OAAO,IAAI,UAAU;IACtD;IAEA,OAAc,QACV,GAAW,EACX,WAAoB,EACpB,KAAS,CAAA,GAAA,yCAAQ,CAAC,EACL;QACb,OAAO,0CAAc,SAAS,CAAC,CAAA,GAAA,yCAAM,EAAE,MAAM,aAAa;IAC9D;IAEA,OAAc,aAA4B;QACtC,OAAO,IAAI,CAAA,GAAA,yCAAU,EACjB,CAAA,GAAA,yCAAQ,EAAE,EAAE,EACZ,CAAA,GAAA,yCAAQ,EAAE,EAAE,EACZ,OACA,CAAA,GAAA,yCAAQ,GACV,UAAU;IAChB;IAEA,OAAc,aAA4B;QACtC,OAAO,IAAI,CAAA,GAAA,yCAAU,EACjB,CAAA,GAAA,yCAAa,EAAE,GAAG,EAClB,CAAA,GAAA,yCAAa,EAAE,GAAG,EAClB,OACA,CAAA,GAAA,yCAAa,GACf,UAAU;IAChB;IAEA,OAAc,WAAW,cAAuB,KAAK,EAAiB;QAClE,MAAM,WAAW,cAAc,CAAA,GAAA,yCAAE,IAAI,CAAA,GAAA,yCAAC;QACtC,OAAO,IAAI,0CACP,SAAS,GAAG,CAAC,IAAI,CAAC,CAAA,GAAA,yCAAQ,EAAE,CAAC,GAC7B,SAAS,GAAG,CAAC,IAAI,CAAC,CAAA,GAAA,yCAAQ,EAAE,CAAC,GAC7B,SAAS,GAAG,CAAC,IAAI,CAAC,CAAA,GAAA,yCAAQ,EAAE,CAAC,GAC7B,MACA,CAAA,GAAA,yCAAQ;IAEhB;IAEA,OAAc,WAAW,cAAuB,IAAI,EAAiB;QACjE,MAAM,WAAW,cAAc,CAAA,GAAA,yCAAE,IAAI,CAAA,GAAA,yCAAC;QACtC,OAAO,IAAI,0CACP,SAAS,GAAG,CAAC,IAAI,CAAC,CAAA,GAAA,yCAAa,EAAE,CAAC,GAClC,SAAS,GAAG,CAAC,IAAI,CAAC,CAAA,GAAA,yCAAa,EAAE,CAAC,GAClC,SAAS,GAAG,CAAC,IAAI,CAAC,CAAA,GAAA,yCAAa,EAAE,CAAC,GAClC,MACA,CAAA,GAAA,yCAAa;IAErB;IAEA,OAAc,YACV,KAAiB,EACjB,cAAuB,KAAK,EACf;QACb,OAAO,0CAAc,SAAS,CAAC,OAAO,aAAa,CAAA,GAAA,yCAAQ;IAC/D;IAEA,OAAc,YACV,KAAiB,EACjB,cAAuB,IAAI,EACd;QACb,OAAO,0CAAc,SAAS,CAAC,OAAO,aAAa,CAAA,GAAA,yCAAa;IACpE;IAEA,OAAc,UACV,GAAW,EACX,cAAuB,KAAK,EACf;QACb,OAAO,0CAAc,WAAW,CAAC,CAAA,GAAA,yCAAM,EAAE,MAAM;IACnD;IAEA,OAAc,UACV,GAAW,EACX,cAAuB,IAAI,EACd;QACb,OAAO,0CAAc,WAAW,CAAC,CAAA,GAAA,yCAAM,EAAE,MAAM;IACnD;IAEA,YACI,AAAO,CAAW,EAClB,AAAO,CAAW,EAClB,AAAO,CAAW,EAClB,AAAO,UAAmB,EAC1B,AAAO,KAAS,CAAA,GAAA,yCAAQ,CAAC,CAC3B;aALS,IAAA;aACA,IAAA;aACA,IAAA;aACA,aAAA;aACA,KAAA;QAEP,CAAA,GAAA,yCAAK,EAAE,aAAa,EAAE,WAAW;QACjC,CAAA,GAAA,yCAAK,EAAE,aAAa,EAAE,WAAW;IACrC;IAEO,YAAqB;QACxB,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,GAAG,SAAS;IACvD;IAEO,UAAmB;QACtB,OACI,IAAI,CAAC,SAAS,MACd,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAC3B,IAAI,CAAC,CAAC,YAAY,CAAA,GAAA,yCAAC,IACb,0CAAc,UAAU,KACxB,0CAAc,UAAU;IAG1C;IAEO,iBAAyB;QAC5B,MAAM,QAAQ,IAAI,CAAC,OAAO;QAC1B,OAAO,CAAA,GAAA,yCAAS,EAAE,CAAA,GAAA,yCAAM,EAAE,OAAO,KAAK,CAAC,GAAG,IAAI;IAClD;IAEO,WAAwB;QAC3B,OAAO,IAAI,CAAC,UAAU,GAChB,IAAI,CAAA,GAAA,yCAAU,EACV,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GACrB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GACrB,MACA,IAAI,CAAC,EAAE,IAEX,IAAI,CAAA,GAAA,yCAAU,EACV,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAC3B,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAC3B,OACA,IAAI,CAAC,EAAE;IAErB;IAEO,UAAsB;QACzB,MAAM,QAAQ,IAAI,CAAC,QAAQ;QAC3B,MAAM,SAAS,MAAM,CAAC,CAAC,OAAO;QAC9B,IAAI,MAAM,UAAU,EAAE;YAClB,MAAM,QAAQ;gBAAC;aAAK;YACpB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,GAAG,GAAG,IAAK,MAAM,IAAI,CAAC;YACvD,OAAO,WAAW,IAAI,CAAC;QAC3B;QACA,MAAM,OACF,MAAM,CAAC,YAAY,CAAA,GAAA,yCAAE,IACf,CAAA,GAAA,yCAAM,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE,IACxB,CAAA,GAAA,yCAAK,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE;QACjC,MAAM,CAAC,EAAE,IAAI,OAAO,OAAO;QAC3B,OAAO;IACX;IAEO,QAAgB;QACnB,OAAO,CAAA,GAAA,yCAAI,EAAE,IAAI,CAAC,OAAO;IAC7B;IAEO,WAAmB;QACtB,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IACvF;IAEO,SAAwB;QAC3B,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IACtD,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GACpB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GACpB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GACrB,MACA,IAAI,CAAC,EAAE;QAEf,MAAM,IAAI,IAAI,CAAC,CAAC,CACX,QAAQ,CAAC,IAAI,CAAC,CAAC,EACf,QAAQ,CAAC,IAAI,CAAC,CAAC,EACf,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;QAClC,MAAM,OAAO,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,QAAQ,KAAK,QAAQ,CAAC;QAC5B,MAAM,OAAO,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,QAAQ,KAAK,QAAQ,CAAC;QAC5B,MAAM,IAAI,IAAI,CAAC,CAAC,CACX,QAAQ,CAAC,IAAI,CAAC,CAAC,EACf,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,GAC7B,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC5B,MAAM,MAAM,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;QAClE,MAAM,MAAM,EAAE,QAAQ,CAAC,EAAE,QAAQ,CAAC,MAAM,QAAQ,CAC5C,MAAM,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;QAEvC,MAAM,MAAM,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;QACjE,OAAO,IAAI,0CACP,KACA,KACA,KACA,OACA,IAAI,CAAC,EAAE;IAEf;IAEO,SAAwB;QAC3B,OAAO,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,UAAU;IAC9C;IAEO,IAAI,KAAoB,EAAiB;QAC5C,IAAI,IAAI,CAAC,UAAU,EAAE,OAAO;aACvB,IAAI,MAAM,UAAU,EAAE,OAAO,IAAI;QACtC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE;QACzC,MAAM,KAAK,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;QACzC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE;QACzC,MAAM,KAAK,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;QACzC,IAAI,GAAG,MAAM,CAAC,KAAK;YACf,IAAI,CAAC,GAAG,MAAM,CAAC,KACX,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GACpB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GACpB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GACrB,MACA,IAAI,CAAC,EAAE;iBAER,OAAO,IAAI,CAAC,MAAM;QAC7B;QACA,MAAM,IAAI,GAAG,QAAQ,CAAC;QACtB,MAAM,IAAI,GAAG,QAAQ,CAAC;QACtB,MAAM,OAAO,EAAE,QAAQ,CAAC;QACxB,MAAM,OAAO,EAAE,QAAQ,CAAC;QACxB,MAAM,KAAK,EAAE,QAAQ,CAAC,GACjB,QAAQ,CAAC,MACT,QAAQ,CAAC,GAAG,QAAQ,CAAC,MAAM,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;QAC7D,MAAM,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,MAAM,QAAQ,CAAC,KAAK,QAAQ,CAC1D,GAAG,QAAQ,CAAC;QAEhB,MAAM,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC;QAC9C,OAAO,IAAI,0CACP,IACA,IACA,IACA,OACA,IAAI,CAAC,EAAE;IAEf;IAEO,SAAS,KAAkB,EAAiB;QAC/C,OAAO,CAAA,GAAA,yCAAiB,EAAE,OAAO,IAAI,EAAE,IAAI,CAAC,EAAE;IAClD;IAEO,OAAO,KAAoB,EAAW;QACzC,OAAO,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,QAAQ;IAChD;IAEO,QAAuB;QAC1B,OAAO,IAAI,0CACP,IAAI,CAAC,CAAC,CAAC,KAAK,IACZ,IAAI,CAAC,CAAC,CAAC,KAAK,IACZ,IAAI,CAAC,CAAC,CAAC,KAAK,IACZ,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,EAAE;IAEf;AACJ;;;;;;AC9SO,MAAM,kDAAsB;IAC/B,YAAY,OAAe,CAAE;QACzB,KAAK,CAAC;QACN,OAAO,cAAc,CAAC,IAAI,EAAE,0CAAc,SAAS;IACvD;AACJ;;;;;;;ACLO,MAAM,iDAAuB;IAChC,YAAY,OAAe,CAAE;QACzB,KAAK,CAAC;QACN,OAAO,cAAc,CAAC,IAAI,EAAE,yCAAe,SAAS;IACxD;AACJ;AAEO,SAAS,0CACZ,IAAa,EACb,UAAkB,mBAAmB;IAErC,IAAI,CAAC,MAAM,MAAM,IAAI,yCAAe;AACxC;;;;;;;;;;AEAO,MAAM;;IACT,OAAc,OAAO,GAAG;IAExB,OAAc,UAAU,KAAiB,EAAc;QACnD,OAAO,IAAI,0CAAW,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAY,EAAE,OAAO,QAAQ,CAAA,GAAA,yCAAQ,EAAE,CAAC;IACtE;IAEA,OAAc,QAAQ,GAAW,EAAc;QAC3C,OAAO,0CAAW,SAAS,CAAC,CAAA,GAAA,yCAAM,EAAE;IACxC;IAEA,OAAc,SAAS,IAAgB,EAAc;QACjD,MAAM,SAAS;QACf,MAAM,MAAM,CAAA,GAAA,yCAAY,EACpB,QACA,WAAW,IAAI,CAAC;eAAI;YAAM;SAAE,GAC5B,IAAI,cAAc,MAAM,CAAC,yBACzB,WAAW,IAAI,CAAC;YAAC;YAAG;SAAO;QAE/B,OAAO,IAAI,0CAAW,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAY,EAAE,KAAK,QAAQ,CAAA,GAAA,yCAAQ,EAAE,CAAC;IACpE;IAEA,OAAc,WAAW,KAAa,EAAc;QAChD,OAAO,IAAI,0CAAW,CAAA,GAAA,yCAAE,EAAE,OAAO,CAAA,GAAA,yCAAQ,EAAE,CAAC;IAChD;IAEA,OAAc,UAAU,WAAyB,EAAc;QAC3D,OAAO,IAAI,0CACP,CAAA,GAAA,yCAAE,EACE,YAAY,MAAM,CACd,CAAC,WAAW,aAAe,YAAY,WAAW,KAAK,EACvD,EAAE,GAEN,CAAA,GAAA,yCAAQ,EAAE,CAAC;IAGvB;IAEA,YAAY,AAAO,KAAa,CAAE;aAAf,QAAA;QACf,CAAA,GAAA,yCAAK,EAAE,QAAQ,CAAA,GAAA,yCAAQ,EAAE,CAAC;IAC9B;IAEO,QAAuB;QAC1B,OAAO,CAAA,GAAA,yCAAY,EAAE,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK;IACzD;IAEO,UAAsB;QACzB,OAAO,CAAA,GAAA,yCAAY,EAAE,IAAI,CAAC,KAAK,EAAE,0CAAW,IAAI,EAAE;IACtD;IAEO,QAAgB;QACnB,OAAO,CAAA,GAAA,yCAAI,EAAE,IAAI,CAAC,OAAO;IAC7B;IAEO,WAAmB;QACtB,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IAC1C;IAEO,OAAO,KAAiB,EAAW;QACtC,OAAO,IAAI,CAAC,KAAK,KAAK,MAAM,KAAK;IACrC;AACJ;;;;;;;AC3DO,MAAM;IACT,OAAc,OAAO,IAAgB,EAAc;QAC/C,OAAO,CAAA,GAAA,yCAAK,EAAE;IAClB;IAEA,OAAc,KACV,UAAsB,EACtB,OAAmB,EACN;QACb,MAAM,YAAY,WAAW,KAAK;QAClC,OAAO,CAAA,GAAA,yCAAU,EACb,YACA,WAAW,IAAI,CAAC;eAAI,UAAU,OAAO;eAAO;SAAQ,GACpD,CAAA,GAAA,yCAAW;IAEnB;IAEA,OAAc,aACV,UAAsB,EACtB,OAAmB,EACnB,gBAA+B,EAClB;QACb,OAAO,CAAA,GAAA,yCAAU,EACb,YACA,WAAW,IAAI,CAAC;eAAI,iBAAiB,OAAO;eAAO;SAAQ,GAC3D,CAAA,GAAA,yCAAW;IAEnB;IAEA,OAAc,OACV,SAAwB,EACxB,OAAmB,EACnB,SAAwB,EACjB;QACP,OAAO,CAAA,GAAA,yCAAY,EACf,WACA,WAAW,IAAI,CAAC;eAAI,UAAU,OAAO;eAAO;SAAQ,GACpD,WACA,CAAA,GAAA,yCAAW;IAEnB;IAEA,OAAc,UAAU,UAA2B,EAAiB;QAChE,OAAO,CAAA,GAAA,yCAAe,EAAE;IAC5B;IAEA,OAAc,gBACV,UAA2B,EAC3B,QAAsB,EACtB,SAAwB,EACjB;QACP,IAAI,WAAW,MAAM,KAAK,SAAS,MAAM,IAAI,CAAC,WAAW,MAAM,EAC3D,OAAO;QACX,MAAM,UAA6B,EAAE;QACrC,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IACnC,QAAQ,IAAI,CACR,WAAW,IAAI,CAAC;eAAI,UAAU,CAAC,EAAE,CAAC,OAAO;eAAO,QAAQ,CAAC,EAAE;SAAC;QAEpE,OAAO,CAAA,GAAA,yCAAkB,EACrB,YACA,SACA,WACA,CAAA,GAAA,yCAAW;IAEnB;IAEA,OAAc,cACV,UAAsB,EACtB,KAAa,EACH;QACV,OAAO,CAAA,GAAA,yCAAY,EAAE,YAAY;IACrC;IAEA,OAAc,wBACV,UAAsB,EACtB,KAAa,EACH;QACV,OAAO,CAAA,GAAA,yCAAsB,EAAE,YAAY;IAC/C;IAEA,OAAc,wBACV,SAAwB,EACxB,KAAa,EACA;QACb,OAAO,CAAA,GAAA,yCAAsB,EAAE,WAAW;IAC9C;AACJ;;;;;;;ACrFO,MAAM;IACT,OAAc,OAAO,IAAgB,EAAc;QAC/C,OAAO,CAAA,GAAA,yCAAK,EAAE;IAClB;IAEA,OAAc,KACV,UAAsB,EACtB,OAAmB,EACN;QACb,OAAO,CAAA,GAAA,yCAAU,EAAE,YAAY,SAAS,CAAA,GAAA,yCAAa;IACzD;IAEA,OAAc,OACV,SAAwB,EACxB,OAAmB,EACnB,SAAwB,EACjB;QACP,OAAO,CAAA,GAAA,yCAAY,EAAE,WAAW,SAAS,WAAW,CAAA,GAAA,yCAAa;IACrE;IAEA,OAAc,UAAU,UAA2B,EAAiB;QAChE,OAAO,CAAA,GAAA,yCAAe,EAAE;IAC5B;IAEA,OAAc,gBACV,UAA2B,EAC3B,QAAsB,EACtB,SAAwB,EACjB;QACP,IAAI,WAAW,MAAM,KAAK,SAAS,MAAM,IAAI,CAAC,WAAW,MAAM,EAC3D,OAAO;QACX,KAAK,MAAM,WAAW,SAClB,KAAK,MAAM,SAAS,SAAU;YAC1B,IAAI,YAAY,SAAS,CAAA,GAAA,yCAAS,EAAE,SAAS,QACzC,OAAO;QACf;QAEJ,OAAO,CAAA,GAAA,yCAAkB,EACrB,YACA,UACA,WACA,CAAA,GAAA,yCAAa;IAErB;IAEA,OAAc,cACV,UAAsB,EACtB,KAAa,EACH;QACV,OAAO,CAAA,GAAA,yCAAY,EAAE,YAAY;IACrC;IAEA,OAAc,wBACV,UAAsB,EACtB,KAAa,EACH;QACV,OAAO,CAAA,GAAA,yCAAsB,EAAE,YAAY;IAC/C;IAEA,OAAc,wBACV,SAAwB,EACxB,KAAa,EACA;QACb,OAAO,CAAA,GAAA,yCAAsB,EAAE,WAAW;IAC9C;AACJ;;;;;;;AC1DO,MAAM;IACT,OAAc,OAAO,IAAgB,EAAc;QAC/C,OAAO,CAAA,GAAA,yCAAK,EAAE;IAClB;IAEA,OAAc,KACV,UAAsB,EACtB,OAAmB,EACN;QACb,OAAO,CAAA,GAAA,yCAAU,EAAE,YAAY,SAAS,CAAA,GAAA,yCAAW;IACvD;IAEA,OAAc,OACV,SAAwB,EACxB,OAAmB,EACnB,SAAwB,EACjB;QACP,OAAO,CAAA,GAAA,yCAAY,EAAE,WAAW,SAAS,WAAW,CAAA,GAAA,yCAAW;IACnE;IAEA,OAAc,UAAU,UAA2B,EAAiB;QAChE,OAAO,CAAA,GAAA,yCAAe,EAAE;IAC5B;IAEA,OAAc,gBACV,UAA2B,EAC3B,QAAsB,EACtB,SAAwB,EACjB;QACP,IAAI,WAAW,MAAM,KAAK,SAAS,MAAM,IAAI,CAAC,WAAW,MAAM,EAC3D,OAAO;QACX,KAAK,MAAM,WAAW,SAClB,KAAK,MAAM,SAAS,SAAU;YAC1B,IAAI,YAAY,SAAS,CAAA,GAAA,yCAAS,EAAE,SAAS,QACzC,OAAO;QACf;QAEJ,OAAO,CAAA,GAAA,yCAAkB,EACrB,YACA,UACA,WACA,CAAA,GAAA,yCAAW;IAEnB;IAEA,OAAc,SAAS,UAAsB,EAAiB;QAC1D,MAAM,YAAY,WAAW,KAAK;QAClC,OAAO,CAAA,GAAA,yCAAI,EAAE,UAAU,OAAO,IAAI,CAAA,GAAA,yCAAc,GAAG,QAAQ,CACvD,WAAW,KAAK;IAExB;IAEA,OAAc,UACV,SAAwB,EACxB,KAAoB,EACb;QACP,IAAI;YACA,CAAA,GAAA,yCAAK,EAAE,MAAM,OAAO;YACpB,CAAA,GAAA,yCAAK,EAAE,UAAU,OAAO;YACxB,MAAM,IAAI,CAAA,GAAA,yCAAI,EAAE,UAAU,OAAO,IAAI,CAAA,GAAA,yCAAc;YACnD,MAAM,MAAM,CAAA,GAAA,yCAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAA,GAAA,yCAAQ,EAAE,CAAC;YACpC,MAAM,gBAAgB,CAAA,GAAA,yCAAc,EAChC;gBAAC;gBAAW,CAAA,GAAA,yCAAY,EAAE,UAAU,GAAG,MAAM;aAAG,EAChD;gBAAC;gBAAG;aAAM;YAEd,OAAO,cAAc,MAAM,CAAC;QAChC,EAAE,OAAO,GAAG;YACR,IAAI,aAAa,CAAA,GAAA,wCAAa,GAAG,OAAO;YACxC,MAAM;QACV;IACJ;IAEA,OAAc,oBACV,UAA2B,EAC3B,OAAmB,EACnB,SAAwB,EACjB;QACP,IAAI,CAAC,WAAW,MAAM,EAAE,OAAO;QAC/B,IAAI,YAAY,UAAU,CAAC,EAAE;QAC7B,KAAK,MAAM,aAAa,WAAW,KAAK,CAAC,GACrC,YAAY,UAAU,GAAG,CAAC;QAC9B,OAAO,CAAA,GAAA,yCAAY,EAAE,WAAW,SAAS,WAAW,CAAA,GAAA,yCAAW;IACnE;IAEA,OAAc,cACV,UAAsB,EACtB,KAAa,EACH;QACV,OAAO,CAAA,GAAA,yCAAY,EAAE,YAAY;IACrC;IAEA,OAAc,wBACV,UAAsB,EACtB,KAAa,EACH;QACV,OAAO,CAAA,GAAA,yCAAsB,EAAE,YAAY;IAC/C;IAEA,OAAc,wBACV,SAAwB,EACxB,KAAa,EACA;QACb,OAAO,CAAA,GAAA,yCAAsB,EAAE,WAAW;IAC9C;AACJ;;;;;;;;;;;;;;;;;;;;;;;AC1HO,SAAS,0CAAK,MAAc;IAC/B,OAAO,OAAO,OAAO,CAAC,SAAS,CAAC,QAAW,UAAU,MAAM,MAAM;AACrE;AAEO,SAAS,0CAAa,KAAa;IACtC,OAAO,KAAK,GAAG,CAAC,OAAO,QAAQ,CAAC,GAAG,MAAM;AAC7C;AAEO,SAAS,0CAAgB,KAAa;IACzC,OAAO,AAAC,CAAA,QAAQ,EAAE,GAAG,CAAC,QAAQ,KAAI,EAAG,QAAQ,CAAC,GAAG,MAAM;AAC3D;AAEO,SAAS,0CAAa,CAAS;IAClC,IAAI,IAAI,EAAE,EAAE,OAAO;QAAC;KAAE;IACtB,MAAM,OAAsB,EAAE;IAC9B,MAAO,MAAM,EAAE,CAAE;QACb,KAAK,IAAI,CAAC,OAAO,CAAA,GAAA,yCAAE,EAAE,GAAG,EAAE;QAC1B,KAAK,EAAE;IACX;IACA,OAAO,KAAK,OAAO;AACvB;AAEO,SAAS,0CAAU,CAAS;IAC/B,IAAI,IAAI,GAAG,OAAO;QAAC;KAAE;IACrB,MAAM,OAAsB,EAAE;IAC9B,MAAO,MAAM,EAAG;QACZ,KAAK,IAAI,CAAC,OAAO,CAAA,GAAA,yCAAQ,EAAE,GAAG;QAC9B,KAAK;IACT;IACA,OAAO,KAAK,OAAO;AACvB;AAEO,SAAS,0CACZ,KAAa,EACb,IAAY,EACZ,MAAc,EACd,SAAkB,KAAK;IAEvB,IAAI,QAAQ,KAAK,CAAC,QACd,MAAM,IAAI,MAAM;IACpB,IAAI,KAAK,KAAK,CAAC,WAAW,OACtB,MAAM,IAAI,MAAM;IACpB,IAAI,SAAS,KAAK,GAAG,CAAC,OACjB,QAAQ,CAAC,GACT,QAAQ,CAAC,OAAO,GAAG;IACxB,IAAI,QAAQ,GACR,SAAS,AAAC,CAAA,SAAS,0CAAK,SAAS,KAAK,CAAA,EACjC,QAAQ,CAAC,GACT,QAAQ,CAAC,OAAO,GAAG;IAE5B,IAAI,QAAQ,OAAO,KAAK,CAAC,YAAa,GAAG,CAAC,CAAC,QAAU,SAAS,OAAO;IACrE,IAAI,WAAW,UAAU,MAAM,OAAO;IACtC,OAAO,WAAW,IAAI,CAAC;AAC3B;AAEO,SAAS,0CACZ,KAAiB,EACjB,MAAc,EACd,SAAkB,KAAK;IAEvB,IAAI,MAAM,MAAM,KAAK,GAAG,OAAO;IAC/B,MAAM,OAAO,KAAK,CAAC,WAAW,WAAW,MAAM,MAAM,GAAG,IAAI,EAAE,CACzD,QAAQ,CAAC,GACT,QAAQ,CAAC,GAAG,IAAI,CAAC,EAAE;IACxB,MAAM,WAAW,WAAW,WAAW,MAAM,OAAO,KAAK;IACzD,IAAI,SAAS;IACb,KAAK,MAAM,QAAQ,SAAU,UAAU,KAAK,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG;IACpE,IAAI,SAAS,OAAO,QAChB,SAAS,AAAC,CAAA,SAAS,0CAAK,SAAS,KAAK,CAAA,EACjC,QAAQ,CAAC,GACT,QAAQ,CAAC,MAAM,MAAM,GAAG,GAAG;IAEpC,MAAM,SAAS,SAAS,QAAQ;IAChC,OAAO,SAAS,OAAO,SAAS,CAAC,SAAS;AAC9C;AAEO,SAAS,0CAAU,KAAa;IACnC,IAAI,UAAU,GAAG,OAAO,WAAW,IAAI,CAAC,EAAE;IAC1C,MAAM,SAAS,AAAC,0CAAa,SAAS,KAAM;IAC5C,IAAI,QAAQ,0CAAW,OAAO,QAAQ,OAAO;IAC7C,MACI,MAAM,MAAM,GAAG,KACf,KAAK,CAAC,EAAE,KAAM,CAAA,AAAC,CAAA,KAAK,CAAC,EAAE,GAAG,IAAG,MAAO,IAAI,OAAO,CAAA,EAE/C,QAAQ,MAAM,KAAK,CAAC;IACxB,OAAO;AACX;AAEO,SAAS,0CAAU,KAAiB;IACvC,OAAO,0CAAW,OAAO,OAAO;AACpC;AAEO,SAAS,0CACZ,KAAa,EACb,IAAY,EACZ,MAAc,EACd,SAAkB,KAAK;IAEvB,IAAI,QAAQ,EAAE,IAAI,CAAC,QACf,MAAM,IAAI,MAAM;IACpB,IAAI,SAAS,AAAC,CAAA,QAAQ,EAAE,GAAG,CAAC,QAAQ,KAAI,EACnC,QAAQ,CAAC,GACT,QAAQ,CAAC,OAAO,GAAG;IACxB,IAAI,QAAQ,GACR,SAAS,AAAC,CAAA,OAAO,OAAO,0CAAK,WAAW,EAAE,AAAD,EACpC,QAAQ,CAAC,GACT,QAAQ,CAAC,OAAO,GAAG;IAE5B,IAAI,QAAQ,OAAO,KAAK,CAAC,YAAa,GAAG,CAAC,CAAC,QAAU,SAAS,OAAO;IACrE,IAAI,WAAW,UAAU,MAAM,OAAO;IACtC,OAAO,WAAW,IAAI,CAAC;AAC3B;AAEO,SAAS,0CACZ,KAAiB,EACjB,MAAc,EACd,SAAkB,KAAK;IAEvB,IAAI,MAAM,MAAM,KAAK,GAAG,OAAO,EAAE;IACjC,MAAM,OAAO,KAAK,CAAC,WAAW,WAAW,MAAM,MAAM,GAAG,IAAI,EAAE,CACzD,QAAQ,CAAC,GACT,QAAQ,CAAC,GAAG,IAAI,CAAC,EAAE;IACxB,MAAM,WAAW,WAAW,WAAW,MAAM,OAAO,KAAK;IACzD,IAAI,SAAS;IACb,KAAK,MAAM,QAAQ,SAAU,UAAU,KAAK,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG;IACpE,IAAI,SAAS,OAAO,QAChB,SAAS,AAAC,CAAA,OAAO,OAAO,0CAAK,WAAW,EAAE,AAAD,EACpC,QAAQ,CAAC,GACT,QAAQ,CAAC,MAAM,MAAM,GAAG,GAAG;IAEpC,MAAM,SAAS,OAAO,OAAO;IAC7B,OAAO,SAAS,OAAO,SAAS,CAAC,SAAS;AAC9C;AAEO,SAAS,0CAAa,KAAa;IACtC,IAAI,UAAU,EAAE,EAAE,OAAO,WAAW,IAAI,CAAC,EAAE;IAC3C,MAAM,SAAS,AAAC,0CAAgB,SAAS,KAAM;IAC/C,IAAI,QAAQ,0CAAc,OAAO,QAAQ,OAAO;IAChD,MACI,MAAM,MAAM,GAAG,KACf,KAAK,CAAC,EAAE,KAAM,CAAA,AAAC,CAAA,KAAK,CAAC,EAAE,GAAG,IAAG,MAAO,IAAI,OAAO,CAAA,EAE/C,QAAQ,MAAM,KAAK,CAAC;IACxB,OAAO;AACX;AAEO,SAAS,0CAAa,KAAiB;IAC1C,OAAO,0CAAc,OAAO,OAAO;AACvC;AAEO,SAAS,0CAAY,GAAG,KAAmB;IAC9C,MAAM,QAAuB,EAAE;IAC/B,KAAK,MAAM,QAAQ,MACf,KAAK,MAAM,QAAQ,KAAM,MAAM,IAAI,CAAC;IAExC,OAAO,WAAW,IAAI,CAAC;AAC3B;AAEO,SAAS,0CAAW,CAAa,EAAE,CAAa;IACnD,OACI,EAAE,MAAM,KAAK,EAAE,MAAM,IAAI,EAAE,SAAS,CAAC,CAAC,MAAM,IAAM,CAAC,CAAC,EAAE,KAAK,UAAU;AAE7E;AAEA,MAAM,oCAAc;AACpB,MAAM,gCAAkC;IACpC,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;AACP;AAEO,SAAS,0CAAM,KAAiB;IACnC,OAAO,MAAM,IAAI,CAAC,OACb,GAAG,CAAC,CAAC,IAAM,iCAAW,CAAC,KAAK,EAAE,GAAG,iCAAW,CAAC,IAAI,GAAG,EACpD,IAAI,CAAC;AACd;AAEO,SAAS,0CAAQ,GAAW;IAC/B,MAAM,QAAQ,IAAI,WAAW,KAAK,KAAK,CAAC,IAAI,MAAM,GAAG;IACrD,IAAI;IACJ,IAAK,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QAC/B,MAAM,IAAI,6BAAO,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAC7B,MAAM,IAAI,6BAAO,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;QACjC,IAAI,MAAM,aAAa,MAAM,WACzB;QAEJ,KAAK,CAAC,EAAE,GAAG,AAAC,KAAK,IAAK;IAC1B;IACA,OAAO,MAAM,MAAM,MAAM,GAAG,QAAQ,MAAM,KAAK,CAAC,GAAG;AACvD;;;;;;;;;;;ACxMO,SAAS,0CAAM,CAAW,EAAE,KAAS,CAAA,GAAA,yCAAQ,CAAC;IACjD,MAAM,IAAI,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC;IAGlE,MAAM,IAAI,EAAE,OAAO;IACnB,IAAI,EAAE,MAAM,CAAC,EAAE,KAAK,CAAC,IAAI,CAAA,GAAA,yCAAU,EAAE,GAAG,GAAG,OAAO,IAAI,SAAS,IAC3D,MAAM,IAAI,MAAM;IACpB,OAAO;AACX;AAEO,SAAS,0CACZ,KAAkB,EAClB,KAAoB,EACpB,KAAS,CAAA,GAAA,yCAAQ,CAAC;IAElB,IAAI,iBAAiB,CAAA,GAAA,yCAAC,GAAG,QAAQ,MAAM,KAAK;IAC5C,IAAI,SAAS,IAAI,CAAA,GAAA,yCAAY,EACzB,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAChB,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAChB,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GACjB,MACA;IAEJ,IAAI,MAAM,UAAU,IAAI,CAAA,GAAA,yCAAE,EAAE,OAAO,GAAG,CAAC,MAAM,EAAE,EAAE,OAAO;IACxD,IAAI,SAAS;IACb,MAAO,QAAQ,EAAE,CAAE;QACf,IAAI,QAAQ,EAAE,EAAE,SAAS,OAAO,GAAG,CAAC;QACpC,SAAS,OAAO,GAAG,CAAC;QACpB,UAAU,EAAE;IAChB;IACA,OAAO;AACX;AAEO,SAAS,0CACZ,CAAgB,EAChB,SAAkB,EAClB,EAAM;IAEN,MAAM,KAAE,CAAC,KAAE,CAAC,KAAE,CAAC,EAAE,GAAG;IACpB,MAAM,YAA+B;QAAC;QAAM;QAAM;QAAM;KAAK;IAC7D,IAAI,SAAS,SAAS,CAAC,EAAE,CAAC,MAAM;IAChC,KAAK,MAAM,UAAU,UAAU,KAAK,CAAC,GACjC,SAAS,KAAK,GAAG,CAAC,QAAQ,OAAO,MAAM;IAC3C,MAAM,QAA2B,EAAE;IACnC,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,IAAK,MAAM,IAAI,CAAC;IAC5C,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE;IACnB,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE;IACnB,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACnC,CAAA,GAAA,yCAAK,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK;QACxB,CAAA,GAAA,yCAAK,EAAE,KAAK,CAAC,EAAE,KAAK;QACpB,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,IAAI,EAAE,EAAE,SAAS,KAAK,CAAC,EAAE;IAC9C;IACA,KAAK,MAAM,CAAC,GAAG,KAAK,IAAI,UAAU,OAAO,GAAI;QACzC,MAAM,UAAU,KACX,KAAK,GACL,OAAO,GACP,GAAG,CAAC,CAAC,MAAM,IAAM,KAAK,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC5C,IAAI,OAAO,OAAO,CAAC,EAAE;QACrB,KAAK,MAAM,SAAS,QAAQ,KAAK,CAAC,GAAI;YAClC,OAAO,KAAK,QAAQ,CAAC;YACrB,OAAO,KAAK,GAAG,CAAC;QACpB;QACA,SAAS,CAAC,EAAE,GAAG;IACnB;IACA,CAAA,GAAA,yCAAK,EAAE,SAAS,CAAC,EAAE,CAAC,MAAM,GAAG,MAAM,SAAS,CAAC,EAAE,CAAC,MAAM;IACtD,CAAA,GAAA,yCAAK,EAAE,KAAK,CAAC,EAAE,KAAK;IACpB,CAAA,GAAA,yCAAK,EAAE,SAAS,CAAC,EAAE,KAAK;IACxB,SAAS,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE,EAAE,SAAS,KAAK,CAAC,EAAE;IAC9C,CAAA,GAAA,yCAAK,EAAE,SAAS,CAAC,EAAE,KAAK;IACxB,CAAA,GAAA,yCAAK,EAAE,SAAS,CAAC,EAAE,KAAK;IACxB,SAAS,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE,CAAE,QAAQ,CAAC;IACtC,SAAS,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE,CAAE,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE;IAC9C,MAAM,IAAI,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;IAC5C,MAAM,IAAI,SAAS,CAAC,EAAE,CAAE,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,QAAQ,CAAC;IACxD,MAAM,IAAI,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC;IACnE,OAAO,IAAI,CAAA,GAAA,yCAAY,EACnB,GACA,GACA,GACA,EAAE,UAAU,EACZ;AAER;AAEO,SAAS,0CAAO,OAAW,EAAE,KAAS,CAAA,GAAA,yCAAQ,CAAC;IAClD,OAAO,QAAQ,EAAE,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,EAAE,AAAC,CAAA,GAAG,CAAC,GAAG,EAAE,AAAD,IAAK,EAAE;AACnD;AAEO,SAAS,0CAAQ,OAAY,EAAE,KAAS,CAAA,GAAA,yCAAa,CAAC;IACzD,IAAI,QAAQ,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,EAAE,EAAE,IAC1C,OAAO,0CAAO,QAAQ,QAAQ,CAAC,EAAE;IACrC,OAAO,QAAQ,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,EAAE,AAAC,CAAA,GAAG,CAAC,GAAG,EAAE,AAAD,IAAK,EAAE;AAC/D;;;;;;;;;;;;;;AC7FO,SAAS,0CAAM,KAAa,EAAE,MAAc;IAC/C,IAAI,QAAQ,EAAE,IAAI,SAAS,EAAE,IAAK,EAAE,GAAG,OAAO,SAC1C,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,MAAM,SAAS,EAAE,OAAO,CAAC,CAAC;IACvE,MAAM,QAAuB,EAAE;IAC/B,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,IAAK,MAAM,IAAI,CAAC;IAC5C,IAAI,YAAY;IAChB,IAAK,IAAI,IAAI,SAAS,GAAG,KAAK,GAAG,IAAK;QAClC,KAAK,CAAC,EAAE,GAAG,OAAO,YAAY,KAAK;QACnC,cAAc,EAAE;IACpB;IACA,MAAM,SAAS,WAAW,IAAI,CAAC;IAC/B,MAAM,eAAe,CAAA,GAAA,yCAAY,EAAE,OAAO,QAAQ;IAClD,CAAA,GAAA,yCAAK,EAAE,CAAA,GAAA,yCAAS,EAAE,QAAQ;IAC1B,OAAO;AACX;AAEO,SAAS,0CAAM,MAAkB;IACpC,IAAI,SAAS,EAAE;IACf,KAAK,MAAM,SAAS,OAAQ;QACxB,WAAW,EAAE;QACb,UAAU,OAAO;IACrB;IACA,CAAA,GAAA,yCAAK,EAAE,WAAW,CAAA,GAAA,yCAAY,EAAE,QAAQ;IACxC,OAAO;AACX;AAEO,SAAS,0CAAS,CAAa,EAAE,CAAa;IACjD,OAAO,WAAW,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,SAAS,IAAM,UAAU,CAAC,CAAC,EAAE;AAC/D;AAEO,SAAS,0CACZ,OAAmB,EACnB,GAAe,EACf,MAAc,EACd,IAAc;IAEd,MAAM,MAAM,KAAK,KAAK,CAAC,AAAC,CAAA,SAAS,KAAK,QAAQ,GAAG,CAAA,IAAK,KAAK,QAAQ;IACnE,IAAI,MAAM,KACN,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,IAAI,cAAc,CAAC;IACzE,MAAM,YAAY;WAAI;WAAQ,0CAAM,OAAO,IAAI,MAAM,GAAG;KAAG;IAC3D,MAAM,QAAQ,0CAAM,EAAE,EAAE,KAAK,SAAS;IACtC,MAAM,UAAU,0CAAM,OAAO,SAAS;IACtC,MAAM,MAAM,KAAK,OAAO,CACpB,WAAW,IAAI,CAAC;WACT;WACA;WACA;WACA,0CAAM,EAAE,EAAE;WACV;KACN;IAEL,MAAM,UAA6B,EAAE;IACrC,QAAQ,IAAI,CACR,KAAK,OAAO,CAAC,WAAW,IAAI,CAAC;WAAI;WAAQ,0CAAM,EAAE,EAAE;WAAO;KAAU;IAExE,IAAK,IAAI,IAAI,GAAG,KAAK,KAAK,IACtB,QAAQ,IAAI,CACR,KAAK,OAAO,CACR,WAAW,IAAI,CAAC;WACT,0CAAS,KAAK,OAAO,CAAC,IAAI,EAAE;WAC5B,0CAAM,OAAO,IAAI,IAAI;WACrB;KACN;IAIb,MAAM,oBAAmC,EAAE;IAC3C,KAAK,MAAM,QAAQ,QAAS,kBAAkB,IAAI,IAAI;IACtD,OAAO,WAAW,IAAI,CAAC,kBAAkB,KAAK,CAAC,GAAG;AACtD;AAEO,SAAS,0CACZ,OAAmB,EACnB,GAAe,EACf,MAAc,EACd,IAAc;IAEd,MAAM,YAAY;WAAI;WAAQ,0CAAM,OAAO,IAAI,MAAM,GAAG;KAAG;IAC3D,MAAM,gBAAgB;WACf;WACA,0CAAM,OAAO,SAAS;WACtB;KACN;IACD,OAAO,KAAK,OAAO,CAAC,WAAW,IAAI,CAAC,gBAAgB,KAAK,CAAC,GAAG;AACjE;AAEO,SAAS,0CACZ,OAAmB,EACnB,KAAa,EACb,GAAe,EACf,OAAe,EACf,MAAc,EACd,UAAkB,EAClB,MAKe,EACf,IAAc;IAEd,MAAM,gBAAgB,QAAQ,SAAS;IACvC,MAAM,oBAAoB,OAAO,SAAS,KAAK,eAAe;IAC9D,MAAM,UAAgC,EAAE;IACxC,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;QAC5B,MAAM,UAAyB,EAAE;QACjC,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,IAAK;YAC7B,MAAM,YAAY,aAAc,CAAA,IAAI,IAAI,MAAK;YAC7C,MAAM,KAAK,kBAAkB,KAAK,CAC9B,WACA,YAAY;YAEhB,QAAQ,IAAI,CAAC,CAAA,GAAA,yCAAE,EAAE,0CAAM,KAAK;QAChC;QACA,QAAQ,IAAI,CAAC;IACjB;IACA,OAAO;AACX;AAEO,SAAS,0CACZ,OAAmB,EACnB,KAAa,EACb,GAAe;IAEf,OAAO,0CAAY,SAAS,OAAO,KAAK,CAAA,GAAA,yCAAA,GAAG,GAAG,IAAI,2CAAkB,CAAA,GAAA,yCAAK;AAC7E;AAEO,SAAS,0CACZ,OAAmB,EACnB,KAAa,EACb,GAAe;IAEf,OAAO,0CAAY,SAAS,OAAO,KAAK,CAAA,GAAA,yCAAA,GAAG,GAAG,IAAI,2CAAkB,CAAA,GAAA,yCAAK;AAC7E;;;;;;;;;;;;;ACrIO,SAAS,0CAAO,IAAgB;IACnC,MAAM,SAAS;IACf,MAAM,MAAM,CAAA,GAAA,yCAAY,EACpB,QACA,WAAW,IAAI,CAAC;WAAI;QAAM;KAAE,GAC5B,IAAI,cAAc,MAAM,CAAC,yBACzB,WAAW,IAAI,CAAC;QAAC;QAAG;KAAO;IAE/B,OAAO,IAAI,CAAA,GAAA,yCAAS,EAAE,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAY,EAAE,KAAK,QAAQ,CAAA,GAAA,yCAAQ,EAAE,CAAC;AACpE;AAEO,SAAS,0CAAe,GAAe,EAAE,IAAgB;IAC5D,OAAO,CAAA,GAAA,yCAAY,EAAE,MAAU,KAAK,MAAM,WAAW,IAAI,CAAC,EAAE;AAChE;AAEO,SAAS,0CACZ,QAAoB,EACpB,KAAa;IAEb,MAAM,OAAO,CAAA,GAAA,yCAAS,EAAE,OAAO,GAAG;IAClC,MAAM,MAAM,SAAS,OAAO;IAC5B,MAAM,SAAS,WAAW,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAM,IAAI;IAClD,MAAM,WAAW,0CAAe,KAAK;IACrC,MAAM,WAAW,0CAAe,QAAQ;IACxC,MAAM,YAA2B,EAAE;IACnC,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IACrB,UAAU,IAAI,IAAI,CAAA,GAAA,yCAAM,EAAE,SAAS,KAAK,CAAC,IAAI,IAAI,AAAC,CAAA,IAAI,CAAA,IAAK;IAC/D,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IACrB,UAAU,IAAI,IAAI,CAAA,GAAA,yCAAM,EAAE,SAAS,KAAK,CAAC,IAAI,IAAI,AAAC,CAAA,IAAI,CAAA,IAAK;IAC/D,OAAO,CAAA,GAAA,yCAAM,EAAE,WAAW,IAAI,CAAC;AACnC;AAEO,SAAS,0CAAc,QAAoB,EAAE,KAAa;IAC7D,OAAO,0CAAO,0CAAoB,UAAU;AAChD;AAEO,SAAS,0CACZ,QAAoB,EACpB,KAAa;IAEb,MAAM,OAAO,CAAA,GAAA,yCAAM,EACf,WAAW,IAAI,CAAC;WACT,SAAS,KAAK,GAAG,OAAO;WACxB,CAAA,GAAA,yCAAS,EAAE,OAAO,GAAG;KAC3B;IAEL,OAAO,CAAA,GAAA,yCAAS,EAAE,SAAS,CAAC;QAAC,CAAA,GAAA,yCAAS,EAAE,SAAS,CAAC;QAAO;KAAS;AACtE;AAEO,SAAS,0CACZ,QAAuB,EACvB,KAAa;IAEb,MAAM,OAAO,CAAA,GAAA,yCAAM,EACf,WAAW,IAAI,CAAC;WAAI,SAAS,OAAO;WAAO,CAAA,GAAA,yCAAS,EAAE,OAAO,GAAG;KAAO;IAE3E,OAAO,SAAS,GAAG,CACf,CAAA,GAAA,yCAAY,EAAE,UAAU,GAAG,QAAQ,CAAC,CAAA,GAAA,yCAAS,EAAE,SAAS,CAAC,MAAM,KAAK;AAE5E;AAEO,SAAS,0CACZ,QAAuB,EACvB,KAAa;IAEb,MAAM,OAAO,CAAA,GAAA,yCAAM,EACf,WAAW,IAAI,CAAC;WAAI,SAAS,OAAO;WAAO,CAAA,GAAA,yCAAS,EAAE,OAAO,GAAG;KAAO;IAE3E,OAAO,SAAS,GAAG,CACf,CAAA,GAAA,yCAAY,EAAE,UAAU,GAAG,QAAQ,CAAC,CAAA,GAAA,yCAAS,EAAE,SAAS,CAAC,MAAM,KAAK;AAE5E;;;;;;;;;;;AC/EO,MAAM,4CAAY;AAElB,SAAS,0CAAQ,IAAgB,EAAE,GAAe;IACrD,MAAM,OAAO,IAAI,CAAA,GAAA,sCAAE,EAAE,WAAW,cAAc;QAC1C,SAAS;YAAE,QAAQ;YAAc,OAAO;QAAK;IACjD;IACA,KAAK,MAAM,CAAC;IACZ,OAAO,KAAK,OAAO,CAAC;AACxB;AAEO,SAAS,0CACZ,MAAc,EACd,GAAe,EACf,IAAgB;IAEhB,MAAM,SAAS,KAAK,IAAI,CAAC,SAAS;IAClC,IAAI,eAAe;IACnB,MAAM,MAAqB,EAAE;IAC7B,IAAI,OAAO,WAAW,IAAI,CAAC,EAAE;IAC7B,IAAK,IAAI,IAAI,GAAG,KAAK,QAAQ,IAAK;QAC9B,OAAO,0CACH,KACA,WAAW,IAAI,CAAC,MAAM,IAAI;eAAI;YAAM;SAAE,GAAG;eAAI;eAAS;YAAM;SAAE;QAElE,IAAI,UAAU,SAAS;QACvB,IAAI,UAAU,2CAAW,UAAU;QACnC,IAAI,IAAI,IAAI,KAAK,KAAK,CAAC,GAAG;QAC1B,gBAAgB;IACpB;IACA,CAAA,GAAA,yCAAK,EAAE,iBAAiB;IACxB,OAAO,WAAW,IAAI,CAAC;AAC3B;AAEO,SAAS,0CACZ,MAAc,EACd,GAAe,EACf,IAAgB,EAChB,IAAgB;IAEhB,OAAO,0CAAO,QAAQ,0CAAQ,MAAM,MAAM;AAC9C;;;;;;;;;;AC1CO,MAAM,4CAAgB;AAEtB,SAAS,0CAAQ,OAAmB;IACvC,MAAM,OAAO,IAAI,CAAA,GAAA,sCAAE,EAAE,WAAW;IAChC,KAAK,MAAM,CAAC;IACZ,OAAO,KAAK,OAAO,CAAC;AACxB;AAEO,SAAS,0CAAQ,OAAmB;IACvC,OAAO,WAAW,IAAI,CAAC;WAChB,0CAAQ,WAAW,IAAI,CAAC;eAAI;YAAS;SAAE;WACvC,0CAAQ,WAAW,IAAI,CAAC;eAAI;YAAS;SAAE;KAC7C;AACL;AAEO,SAAS,0CAAQ,OAAmB,EAAE,CAAa;IACtD,IAAI,EAAE,MAAM,GAAG,2CAAe,IAAI,0CAAQ;IAC1C,MAAO,EAAE,MAAM,GAAG,0CAAe,IAAI,WAAW,IAAI,CAAC;WAAI;QAAG;KAAE;IAC9D,MAAM,QAAuB,EAAE;IAC/B,IAAK,IAAI,IAAI,GAAG,IAAI,2CAAe,IAAK,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG;IAC1D,MAAM,QAAuB,EAAE;IAC/B,IAAK,IAAI,IAAI,GAAG,IAAI,2CAAe,IAAK,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG;IAC1D,OAAO,0CACH,WAAW,IAAI,CAAC;WACT;WACA,0CAAQ,WAAW,IAAI,CAAC;eAAI;eAAU;SAAQ;KACpD;AAET;;;;;;;;AC7BO,SAAS,yCAAO,IAAY,EAAE,QAAgB,EAAE,MAAc;IACjE,IAAI,WAAW,EAAE,EAAE,OAAO,EAAE;SACvB,IAAI,OAAO,EAAE,IAAI,OAAO,QAAQ,OAAO,0CAAI,MAAM;IACtD,IAAI,SAAS,EAAE;IACf,MAAO,WAAW,EAAE,CAAE;QAClB,IAAI,AAAC,CAAA,WAAW,EAAE,AAAD,IAAK,EAAE,EAAE,SAAS,0CAAI,SAAS,MAAM;QACtD,aAAa,EAAE;QACf,OAAO,0CAAI,OAAO,MAAM;IAC5B;IACA,OAAO;AACX;AAEO,SAAS,0CAAI,KAAa,EAAE,OAAe;IAC9C,OAAO,AAAC,CAAA,AAAC,QAAQ,UAAW,OAAM,IAAK;AAC3C;AAEO,SAAS,0CAAU,KAAa,EAAE,OAAe;IACpD,OAAO,AAAC,CAAA,AAAC,QAAQ,UAAW,OAAM,IAAK;AAC3C;;;;;;;;;;;ACIO,SAAS,0CAAK,CAAM;IACvB,MAAM,QAAQ,CAAA,GAAA,yCAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE;IACjD,MAAM,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,KAAK,EAAE;IACxC,MAAM,QAAQ,CAAA,GAAA,yCAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE;IACjD,OAAO,SAAU,SAAS,QAAS,EAAE,GAAG,EAAE;AAC9C;AAEO,SAAS,0CAAW,CAAM;IAC7B,MAAM,eAAe,CAAA,GAAA,yCAAG,EACnB,GAAG,CAAC,EAAE,EACN,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE,GACjB,GAAG,CAAC,CAAA,GAAA,yCAAG,EAAE,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE;IAC/B,MAAM,SAAS,CAAA,GAAA,yCAAM,EAAE,QAAQ,CAAC,aAAa,GAAG,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG,EAAE;IAC7D,IAAI,SAAS,CAAA,GAAA,yCAAM,EAAE,MAAM,GAAG,QAAQ,CAAC;IACvC,SAAS,OAAO,MAAM,CAAC,EAAE,IAAI,CAAA,GAAA,yCAAM,EAAE,QAAQ,CAAC,CAAA,GAAA,yCAAG,KAAK;IACtD,MAAM,UAAU,OAAO,GAAG,CAAC,EAAE;IAC7B,MAAM,UAAU,CAAA,GAAA,yCAAM,EAAE,QAAQ,CAAC,SAC5B,GAAG,CAAC,CAAA,GAAA,yCAAM,EAAE,QAAQ,CAAC,QAAQ,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE,IACnD,GAAG,CAAC,OAAO,GAAG,CAAC,EAAE;IACtB,IAAI,QAAQ,QAAQ,GAAG,CAAC,EAAE;IAC1B,MAAM,QAAQ,QAAQ,QAAQ,CAAC;IAC/B,QAAQ,MAAM,QAAQ,CAAC,OAAO,QAAQ,CAAC;IACvC,IAAI,gBAAgB,MAAM,QAAQ,CAAC,MAAM,GAAG,CAAC,AAAC,CAAA,CAAA,GAAA,yCAAA,KAAK,EAAE,GAAG,EAAE,AAAD,IAAK,GAAG;IACjE,KAAK,MAAM,QAAQ,CAAA,GAAA,yCAAW,EAAG;QAC7B,IAAI,KAAK,cAAc,QAAQ,CAAC;QAChC,IAAI,GAAG,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,SAAS,MAAM,CAAC,UAAU;YAC9C,IAAI,0CAAK,QAAQ,0CAAK,IAAI,KAAK,GAAG,MAAM;YACxC,CAAA,GAAA,yCAAK,EAAE,0CAAK,QAAQ,0CAAK;YACzB,OAAO,IAAI,CAAA,GAAA,yCAAY,EACnB,OAAO,QAAQ,CAAC,SAChB,GAAG,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE,IACzB,QACA,OACA,CAAA,GAAA,yCAAa;QAErB;IACJ;IACA,MAAM,SAAS,CAAA,GAAA,yCAAG,EAAE,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,QAAQ,CAAC;IACjD,MAAM,SAAS;IACf,MAAM,UAAU,CAAA,GAAA,yCAAG,EAAE,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,QAAQ,CAAC;IAC1D,MAAM,UAAU;IAChB,gBAAgB,cAAc,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE;IAC/C,KAAK,MAAM,OAAO,CAAA,GAAA,yCAAG,EAAG;QACpB,IAAI,KAAK,IAAI,QAAQ,CAAC;QACtB,IAAI,GAAG,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,SAAS,MAAM,CAAC,UAAU;YAC9C,IAAI,0CAAK,QAAQ,0CAAK,IAAI,KAAK,GAAG,MAAM;YACxC,CAAA,GAAA,yCAAK,EAAE,0CAAK,QAAQ,0CAAK;YACzB,OAAO,IAAI,CAAA,GAAA,yCAAY,EACnB,OAAO,QAAQ,CAAC,SAChB,GAAG,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE,IACzB,QACA,OACA,CAAA,GAAA,yCAAa;QAErB;IACJ;IACA,MAAM,IAAI,MAAM;AACpB;AAEO,SAAS,0CAAK,CAAgB;IACjC,OAAO,CAAA,GAAA,yCAAM,EAAE,GAAG;QAAC,CAAA,GAAA,wCAAG;QAAG,CAAA,GAAA,yCAAG;QAAG,CAAA,GAAA,yCAAG;QAAG,CAAA,GAAA,yCAAG;KAAE,EAAE,CAAA,GAAA,yCAAa;AAC7D;AAEO,SAAS,0CAAW,CAAM,EAAE,EAAQ;IACvC,IAAI,KAAK,0CAAK,0CAAW;IACzB,IAAI,IAAI;QACJ,MAAM,MAAM,0CAAK,0CAAW;QAC5B,KAAK,GAAG,GAAG,CAAC;IAChB;IACA,OAAO,GAAG,QAAQ,CAAC,CAAA,GAAA,yCAAG;AAC1B;AAEO,SAAS,0CAAM,KAAiB,EAAE,GAAe;IACpD,MAAM,WAAW,CAAA,GAAA,yCAAE,EAAE,OAAO,GAAG,KAAK,GAAG,CAAC,CAAC;QACrC,MAAM,QAAQ,GAAG,GAAG,CAAC,CAAC,QAAU,IAAI,CAAA,GAAA,yCAAC,EAAE,CAAA,GAAA,yCAAA,GAAG;QAC1C,OAAO,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAA,GAAG,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE;IACxC;IACA,OAAO,0CAAW,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE;AAC9C;;;;;;;;;;;;ACzFO,SAAS,yCACZ,CAAc,EACd,CAAc,EACd,KAAS,CAAA,GAAA,yCAAQ,CAAC;IAElB,MAAM,MAAM,EAAE,OAAO;IACrB,MAAM,QAAQ,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,EAAE,EAAE,EACxB,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,GAC/B,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,EAAE,EAAE;IAC1C,MAAM,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;IACxC,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,QAAQ,CAAC;AACtD;AAEO,SAAS,0CACZ,CAAc,EACd,CAAc,EACd,CAAc;IAEd,MAAM,MAAM,EAAE,OAAO;IACrB,MAAM,MAAM,EAAE,OAAO;IACrB,IAAI,IAAI,MAAM,CAAC,IAAI,MAAM,KAAK,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;IACvD,MAAM,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC/D,MAAM,IAAI,IAAI,CAAC,CACV,QAAQ,CAAC,IAAI,CAAC,EACd,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,GAC7B,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;IAChC,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,QAAQ,CAAC;AACtD;AAEO,SAAS,0CACZ,CAAS,EACT,CAAc,EACd,CAAc,EACd,KAAS,CAAA,GAAA,yCAAQ,CAAC;IAElB,MAAM,SAAS,CAAA,GAAA,yCAAW,EAAE;IAC5B,IAAI,IAAI;IACR,IAAI,IAAI,CAAA,GAAA,yCAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACzB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;QACpC,MAAM,MAAM,yCAAe,GAAG,GAAG;QACjC,IAAI,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC;QAC3B,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAA,GAAA,yCAAC,EAAE,GAAG,CAAC,EAAE,EAAE;QAC9B,IAAI,MAAM,CAAC,EAAE,KAAK,GAAG;YACjB,MAAM,MAAM,0CAAY,GAAG,GAAG;YAC9B,IAAI,EAAE,QAAQ,CAAC;YACf,IAAI,EAAE,GAAG,CAAC;QACd;IACJ;IACA,OAAO;AACX;AAEO,SAAS,0CAAoB,OAAa,EAAE,KAAS,CAAA,GAAA,yCAAQ,CAAC;IACjE,IAAI,GAAG,CAAC,KAAK,GAAG,EAAE;QACd,IAAI,MAAM,QAAQ,GAAG,CAAC,AAAC,CAAA,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,AAAD,IAAK,GAAG,CAAC;QAC3D,MAAM,IAAI,OAAO,CAAC,GAAG,QAAQ,CAAC;QAC9B,MAAM,IAAI,OAAO,CAAC,GAAG,MAAM,CAAC;QAC5B,OAAO;IACX,OAAO,OAAO,QAAQ,GAAG,CAAC,AAAC,CAAA,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,AAAD,IAAK,GAAG,CAAC;AACxD;AAEO,SAAS,0CACZ,CAAgB,EAChB,CAAgB,EAChB,KAAS,CAAA,GAAA,yCAAQ,CAAC;IAElB,MAAM,IAAI,CAAA,GAAA,yCAAQ,EAAE,CAAC,GAAG,EAAE;IAC1B,IAAI,IAAI,IAAI,EAAE;IACd,IAAI,IAAI,EAAE,GAAG,CAAC,IAAI;IAClB,OAAO,0CAAoB,0CAAW,GAAG,EAAE,QAAQ,IAAI,EAAE,QAAQ,KAAK;AAC1E;AAEO,SAAS,0CACZ,EAAmB,EACnB,EAAmB,EACnB,KAAS,CAAA,GAAA,yCAAQ,CAAC;IAElB,MAAM,IAAI,CAAA,GAAA,yCAAQ,EAAE,CAAC,GAAG,EAAE;IAC1B,IAAI,IAAI,IAAI,EAAE;IACd,IAAI,IAAI,EAAE,GAAG,CAAC,IAAI;IAClB,IAAI,OAAO,CAAA,GAAA,yCAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAC5B,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAC3B,OAAO,KAAK,QAAQ,CAChB,0CAAW,GAAG,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI;IAG1D,OAAO,0CAAoB,MAAM;AACrC;;;;;;;;;;ACvFO,SAAS,0CACZ,EAAc,EACd,OAAmB,EACnB,GAAe;IAEf,OAAO,CAAA,GAAA,yCAAI,EAAE,SAAS,KAAK,QAAQ,CAAC,GAAG,KAAK;AAChD;AAEO,SAAS,0CACZ,EAAiB,EACjB,OAAmB,EACnB,SAAwB,EACxB,GAAe;IAEf,IAAI,CAAC,UAAU,OAAO,MAAM,CAAC,GAAG,OAAO,IAAI,OAAO;IAClD,MAAM,IAAI,CAAA,GAAA,yCAAI,EAAE,SAAS;IACzB,MAAM,MAAM,CAAA,GAAA,yCAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAA,GAAA,yCAAQ,EAAE,CAAC;IACpC,MAAM,gBAAgB,CAAA,GAAA,yCAAc,EAChC;QAAC;QAAI,CAAA,GAAA,yCAAY,EAAE,UAAU,GAAG,MAAM;KAAG,EACzC;QAAC;QAAG;KAAU;IAElB,OAAO,cAAc,MAAM,CAAC;AAChC;AAEO,SAAS,0CAAiB,UAA2B;IACxD,IAAI,CAAC,WAAW,MAAM,EAClB,MAAM,IAAI,MAAM;IACpB,IAAI,YAAY,UAAU,CAAC,EAAE;IAC7B,CAAA,GAAA,yCAAK,EAAE,UAAU,OAAO;IACxB,KAAK,MAAM,aAAa,WAAW,KAAK,CAAC,GAAI;QACzC,CAAA,GAAA,yCAAK,EAAE,UAAU,OAAO;QACxB,YAAY,UAAU,GAAG,CAAC;IAC9B;IACA,OAAO;AACX;AAEO,SAAS,0CACZ,GAAoB,EACpB,EAAgB,EAChB,SAAwB,EACxB,GAAe;IAEf,IAAI,IAAI,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,MAAM,EAAE,OAAO;IACpD,IAAI,CAAC,UAAU,OAAO,IAAI,OAAO;IACjC,MAAM,KAAK;QAAC;KAAU;IACtB,MAAM,KAAK;QAAC,CAAA,GAAA,yCAAY,EAAE,UAAU,GAAG,MAAM;KAAG;IAChD,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;QACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,IAAI,OAAO;QAC9B,GAAG,IAAI,CAAC,CAAA,GAAA,yCAAI,EAAE,EAAE,CAAC,EAAE,EAAE;QACrB,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE;IAClB;IACA,OAAO,CAAA,GAAA,yCAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAA,GAAA,yCAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAA,GAAA,yCAAc,EAAE,IAAI;AAChE;;","sources":["src/index.ts","src/internal.ts","src/types/field/Field.ts","src/types/field/FieldExt.ts","src/types/field/Fq.ts","src/types/field/Fq2.ts","src/types/field/Fq6.ts","src/types/field/Fq12.ts","src/constants/ec.ts","src/constants/frob_coeffs.ts","src/constants/hash_info.ts","src/constants/iso.ts","src/constants/op_swu_g2.ts","src/constants/roots_of_unity.ts","src/constants/schemes.ts","src/types/ec/AffinePoint.ts","src/types/ec/EC.ts","src/types/ec/JacobianPoint.ts","src/types/errors/OperatorError.ts","src/types/errors/AssertionError.ts","src/types/HashInfo.ts","src/types/PrivateKey.ts","src/types/schemes/AugSchemeMPL.ts","src/types/schemes/BasicSchemeMPL.ts","src/types/schemes/PopSchemeMPL.ts","src/utils/bytes.ts","src/utils/crypto/ec.ts","src/utils/crypto/hash_to_field.ts","src/utils/crypto/hd_keys.ts","src/utils/crypto/hkdf.ts","src/utils/crypto/hmac.ts","src/utils/math.ts","src/utils/crypto/op_swu_g2.ts","src/utils/crypto/pairing.ts","src/utils/crypto/signing.ts"],"sourcesContent":["export * from './internal';\n","/**\n * Do not reorder the exports in this file.\n * It is ordered this way to prevent circular dependencies.\n * If modified, save without organizing imports to prevent breaking the order.\n */\n\nexport * from './types/field/Field';\nexport * from './types/field/FieldExt';\nexport * from './types/field/Fq';\nexport * from './types/field/Fq2';\nexport * from './types/field/Fq6';\nexport * from './types/field/Fq12';\nexport * from './constants/ec';\nexport * from './constants/frob_coeffs';\nexport * from './constants/hash_info';\nexport * from './constants/iso';\nexport * from './constants/op_swu_g2';\nexport * from './constants/roots_of_unity';\nexport * from './constants/schemes';\nexport * from './types/ec/AffinePoint';\nexport * from './types/ec/EC';\nexport * from './types/ec/JacobianPoint';\nexport * from './types/errors/OperatorError';\nexport * from './types/errors/AssertionError';\nexport * from './types/HashInfo';\nexport * from './types/PrivateKey';\nexport * from './types/schemes/AugSchemeMPL';\nexport * from './types/schemes/BasicSchemeMPL';\nexport * from './types/schemes/PopSchemeMPL';\nexport * from './utils/bytes';\nexport * from './utils/crypto/ec';\nexport * from './utils/crypto/hash_to_field';\nexport * from './utils/crypto/hd_keys';\nexport * from './utils/crypto/hkdf';\nexport * from './utils/crypto/hmac';\nexport * from './utils/math';\nexport * from './utils/crypto/op_swu_g2';\nexport * from './utils/crypto/pairing';\nexport * from './utils/crypto/signing';\n","import { Fq } from '../../internal';\n\nexport type AnyField = Field<AnyField>;\n\nexport abstract class Field<T extends Field<T>> {\n    public abstract Q: bigint;\n    public abstract extension: number;\n\n    public abstract zero(Q: bigint): this;\n    public abstract one(Q: bigint): this;\n    public abstract fromBytes(Q: bigint, bytes: Uint8Array): this;\n    public abstract fromHex(Q: bigint, hex: string): this;\n    public abstract fromFq(Q: bigint, fq: Fq): this;\n\n    public abstract clone(): this;\n    public abstract toBytes(): Uint8Array;\n    public abstract toBool(): boolean;\n    public abstract toHex(): string;\n    public abstract toString(): string;\n\n    public abstract negate(): this;\n    public abstract inverse(): this;\n    public abstract qiPower(i: number): this;\n    public abstract pow(exponent: bigint): this;\n\n    public abstract addTo(value: AnyField | bigint): this;\n    public abstract multiplyWith(value: AnyField | bigint): this;\n\n    public abstract add(value: AnyField | bigint): AnyField;\n    public abstract subtract(value: AnyField | bigint): AnyField;\n    public abstract multiply(value: AnyField | bigint): AnyField;\n    public abstract divide(value: AnyField | bigint): AnyField;\n\n    public abstract equalTo(value: AnyField | bigint): boolean;\n    public abstract equals(value: AnyField | bigint): boolean;\n    public abstract lt(value: this): boolean;\n    public abstract gt(value: this): boolean;\n    public abstract lteq(value: this): boolean;\n    public abstract gteq(value: this): boolean;\n}\n","import {\n    AnyField,\n    assert,\n    Field,\n    Fq,\n    Fq12,\n    Fq2,\n    Fq6,\n    fromHex,\n    getFrobCoeff,\n    modNumber,\n    OperatorError,\n    q,\n    toHex,\n} from '../../internal';\n\nexport abstract class FieldExt<T extends Field<T>> extends Field<FieldExt<T>> {\n    public abstract root: T;\n\n    public elements: T[];\n    public basefield: T;\n\n    constructor(public Q: bigint, elements: T[]) {\n        super();\n        this.elements = elements;\n        this.basefield = elements[0];\n    }\n\n    public abstract construct(Q: bigint, elements: T[]): this;\n\n    public constructWithRoot(Q: bigint, elements: T[]): this {\n        return this.construct(Q, elements).withRoot(this.root);\n    }\n\n    public withRoot(root: T): this {\n        this.root = root;\n        return this;\n    }\n\n    public fromBytes(Q: bigint, bytes: Uint8Array): this {\n        const length = this.extension * 48;\n        if (bytes.length !== length) {\n            throw new RangeError(`Expected ${length} bytes.`);\n        }\n        const embeddedSize = 48 * (this.extension / this.elements.length);\n        const elements: Array<Uint8Array> = [];\n        for (let i = 0; i < this.elements.length; i++) {\n            elements.push(\n                bytes.slice(i * embeddedSize, (i + 1) * embeddedSize)\n            );\n        }\n        return new (this.constructor as any)(\n            Q,\n            ...elements\n                .reverse()\n                .map((bytes) => this.basefield.fromBytes(Q, bytes))\n        );\n    }\n\n    public fromHex(Q: bigint, hex: string): this {\n        return this.fromBytes(Q, fromHex(hex));\n    }\n\n    public fromFq(Q: bigint, fq: Fq): this {\n        const y = this.basefield.fromFq(Q, fq);\n        const z = this.basefield.zero(Q);\n        const elements: Array<T> = [];\n        for (let i = 0; i < this.elements.length; i++)\n            elements.push(i === 0 ? y : z);\n        const result = this.construct(Q, elements);\n        if (this instanceof Fq2) result.root = new Fq(Q, -1n) as any;\n        else if (this instanceof Fq6)\n            result.root = new Fq2(Q, Fq.nil.one(Q), Fq.nil.one(Q)) as any;\n        else if (this instanceof Fq12)\n            result.root = new Fq6(\n                Q,\n                Fq2.nil.zero(Q),\n                Fq2.nil.one(Q),\n                Fq2.nil.zero(Q)\n            ) as any;\n        return result;\n    }\n\n    public zero(Q: bigint): this {\n        return this.fromFq(Q, new Fq(Q, 0n));\n    }\n\n    public one(Q: bigint): this {\n        return this.fromFq(Q, new Fq(Q, 1n));\n    }\n\n    public clone(): this {\n        return this.constructWithRoot(\n            this.Q,\n            this.elements.map((element) => element.clone())\n        );\n    }\n\n    public toBytes(): Uint8Array {\n        const bytes: Array<number> = [];\n        for (let i = this.elements.length - 1; i >= 0; i--) {\n            bytes.push(...this.elements[i].toBytes());\n        }\n        return Uint8Array.from(bytes);\n    }\n\n    public toBool(): boolean {\n        return this.elements.findIndex((element) => !element.toBool()) === -1;\n    }\n\n    public toHex(): string {\n        return toHex(this.toBytes());\n    }\n\n    public toString(): string {\n        return `Fq${this.extension}(${this.elements.join(', ')})`;\n    }\n\n    public negate(): this {\n        return this.constructWithRoot(\n            this.Q,\n            this.elements.map((element) => element.negate())\n        );\n    }\n\n    public qiPower(i: number): this {\n        if (this.Q != q) throw new OperatorError('Invalid Q in qiPower.');\n        i = modNumber(i, this.extension);\n        if (i === 0) return this;\n        return this.constructWithRoot(\n            this.Q,\n            this.elements.map((element, index) =>\n                index === 0\n                    ? element.qiPower(i)\n                    : element\n                          .qiPower(i)\n                          .multiply(getFrobCoeff(this.extension, i, index)!)\n            ) as T[]\n        );\n    }\n\n    public pow(exponent: bigint): this {\n        assert(exponent >= 0n);\n        let result = this.one(this.Q).withRoot(this.root);\n        let base: FieldExt<T> = this;\n        while (exponent != 0n) {\n            if (exponent & 1n) result = result.multiply(base) as this;\n            base = base.multiply(base) as this;\n            exponent >>= 1n;\n        }\n        return result;\n    }\n\n    public addTo(value: AnyField | bigint): this {\n        let elements: AnyField[];\n        if (value instanceof FieldExt && value instanceof this.constructor) {\n            elements = value.elements;\n        } else {\n            if (typeof value !== 'bigint' && value.extension > this.extension)\n                throw new OperatorError(\n                    'Operand must be higher than extension.'\n                );\n            elements = this.elements.map(() => this.basefield.zero(this.Q));\n            elements[0] = elements[0].add(value);\n        }\n        return this.constructWithRoot(\n            this.Q,\n            this.elements.map((element, i) => element.add(elements[i])) as T[]\n        );\n    }\n\n    public multiplyWith(value: AnyField | bigint): this {\n        if (typeof value === 'bigint') {\n            return this.constructWithRoot(\n                this.Q,\n                this.elements.map((element) => element.multiply(value)) as T[]\n            );\n        } else if (this.extension < value.extension)\n            throw new OperatorError('Extension must be lower than operand.');\n        const elements = this.elements.map(() => this.basefield.zero(this.Q));\n        for (const [i, x] of this.elements.entries()) {\n            if (\n                value instanceof FieldExt &&\n                value.extension === this.extension\n            ) {\n                for (const [j, y] of value.elements.entries()) {\n                    if (x.toBool() && y.toBool()) {\n                        const index = modNumber(i + j, this.elements.length);\n                        if (i + j >= this.elements.length) {\n                            elements[index] = elements[index].add(\n                                x.multiply(y).multiply(this.root)\n                            ) as T;\n                        } else {\n                            elements[index] = elements[index].add(\n                                x.multiply(y)\n                            ) as T;\n                        }\n                    }\n                }\n            } else if (x.toBool()) elements[i] = x.multiply(value) as T;\n        }\n        return this.constructWithRoot(this.Q, elements);\n    }\n\n    public subtract(value: AnyField | bigint): FieldExt<AnyField> {\n        return this.add(typeof value === 'bigint' ? -value : value.negate());\n    }\n\n    public divide(value: AnyField | bigint): FieldExt<AnyField> {\n        return this.multiply(\n            typeof value === 'bigint' ? ~value : value.inverse()\n        );\n    }\n\n    public equalTo(value: AnyField | bigint): boolean {\n        if (!(value instanceof FieldExt && value instanceof this.constructor)) {\n            if (\n                typeof value === 'bigint' ||\n                (value instanceof FieldExt && this.extension > value.extension)\n            ) {\n                for (let i = 1; i < this.elements.length; i++) {\n                    if (!this.elements[i].equals(this.root.zero(this.Q)))\n                        return false;\n                }\n                return this.elements[0].equals(value);\n            }\n            throw new OperatorError('Invalid operand.');\n        } else\n            return (\n                this.elements.findIndex(\n                    (element, i) => !element.equals(value.elements[i])\n                ) === -1 && this.Q === value.Q\n            );\n    }\n\n    public lt(value: this): boolean {\n        for (let i = this.elements.length - 1; i >= 0; i--) {\n            const a = this.elements[i];\n            const b = value.elements[i];\n            if (a.lt(b)) return true;\n            else if (a.gt(b)) return false;\n        }\n        return false;\n    }\n\n    public gt(value: this): boolean {\n        for (let i = this.elements.length - 1; i >= 0; i--) {\n            const a = this.elements[i];\n            const b = value.elements[i];\n            if (a.gt(b)) return true;\n            else if (a.lt(b)) return false;\n        }\n        return false;\n    }\n\n    public lteq(value: this): boolean {\n        return this.lt(value) || this.equals(value);\n    }\n\n    public gteq(value: this): boolean {\n        return this.gt(value) || this.equals(value);\n    }\n\n    public add(value: AnyField | bigint): FieldExt<AnyField> {\n        try {\n            return this.addTo(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError) || typeof value === 'bigint')\n                throw error;\n            return value.addTo(this) as FieldExt<AnyField>;\n        }\n    }\n\n    public multiply(value: AnyField | bigint): FieldExt<AnyField> {\n        try {\n            return this.multiplyWith(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError) || typeof value === 'bigint')\n                throw error;\n            return value.multiplyWith(this) as FieldExt<AnyField>;\n        }\n    }\n\n    public equals(value: AnyField | bigint): boolean {\n        try {\n            return this.equalTo(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError)) throw error;\n            return typeof value === 'bigint' ? false : value.equalTo(this);\n        }\n    }\n}\n","import {\n    AnyField,\n    bigIntToBytes,\n    bytesToBigInt,\n    Field,\n    fromHex,\n    mod,\n    modPow,\n    OperatorError,\n    toHex,\n} from '../../internal';\n\nexport class Fq extends Field<Fq> {\n    public static nil = new Fq(1n, 0n);\n\n    public extension = 1;\n    public value: bigint;\n\n    constructor(public Q: bigint, value: bigint) {\n        super();\n        this.value = mod(value, Q);\n    }\n\n    public fromBytes(Q: bigint, bytes: Uint8Array): this {\n        if (bytes.length !== 48) throw new RangeError('Expected 48 bytes.');\n        return new Fq(Q, bytesToBigInt(bytes, 'big')) as this;\n    }\n\n    public fromHex(Q: bigint, hex: string): this {\n        return Fq.nil.fromBytes(Q, fromHex(hex)) as this;\n    }\n\n    public fromFq(_Q: bigint, fq: this): this {\n        return fq;\n    }\n\n    public zero(Q: bigint): this {\n        return new Fq(Q, 0n) as this;\n    }\n\n    public one(Q: bigint): this {\n        return new Fq(Q, 1n) as this;\n    }\n\n    public clone(): this {\n        return new Fq(this.Q, this.value) as this;\n    }\n\n    public toBytes(): Uint8Array {\n        return bigIntToBytes(this.value, 48, 'big');\n    }\n\n    public toBool(): boolean {\n        return true;\n    }\n\n    public toHex(): string {\n        return toHex(this.toBytes());\n    }\n\n    public toString(): string {\n        const hex = this.value.toString(16);\n        return `Fq(0x${\n            hex.length > 10\n                ? `${hex.slice(0, 5)}..${hex.slice(hex.length - 5)}`\n                : hex\n        })`;\n    }\n\n    public negate(): this {\n        return new Fq(this.Q, -this.value) as this;\n    }\n\n    public inverse(): this {\n        let x0 = 1n,\n            x1 = 0n,\n            y0 = 0n,\n            y1 = 1n;\n        let a = this.Q;\n        let b = this.value;\n        while (a != 0n) {\n            const q = b / a;\n            const tempB = b;\n            b = a;\n            a = mod(tempB, a);\n            const temp_x0 = x0;\n            x0 = x1;\n            x1 = temp_x0 - q * x1;\n            const temp_y0 = y0;\n            y0 = y1;\n            y1 = temp_y0 - q * y1;\n        }\n        return new Fq(this.Q, x0) as this;\n    }\n\n    public qiPower(_i: number): this {\n        return this;\n    }\n\n    public pow(exponent: bigint): this {\n        return (\n            exponent === 0n\n                ? new Fq(this.Q, 1n)\n                : exponent === 1n\n                ? new Fq(this.Q, this.value)\n                : mod(exponent, 2n) === 0n\n                ? new Fq(this.Q, this.value * this.value).pow(exponent / 2n)\n                : new Fq(this.Q, this.value * this.value)\n                      .pow(exponent / 2n)\n                      .multiply(this)\n        ) as this;\n    }\n\n    public addTo(value: AnyField | bigint): this {\n        if (typeof value === 'bigint')\n            return new Fq(this.Q, this.value + value) as this;\n        else if (value instanceof Fq)\n            return new Fq(this.Q, this.value + value.value) as this;\n        else throw new OperatorError('Can only add with Fq or bigint values.');\n    }\n\n    public multiplyWith(value: AnyField | bigint): this {\n        if (typeof value === 'bigint')\n            return new Fq(this.Q, this.value * value) as this;\n        else if (value instanceof Fq)\n            return new Fq(this.Q, this.value * value.value) as this;\n        else\n            throw new OperatorError(\n                'Can only multiply with Fq or bigint values.'\n            );\n    }\n\n    public subtract(value: AnyField | bigint): this {\n        return this.add(\n            typeof value === 'bigint' ? -value : value.negate()\n        ) as this;\n    }\n\n    public divide(value: AnyField | bigint): this {\n        return this.multiply(\n            (typeof value === 'bigint'\n                ? new Fq(this.Q, value)\n                : value\n            ).inverse()\n        ) as this;\n    }\n\n    public equalTo(value: AnyField | bigint): boolean {\n        return (\n            value instanceof Fq &&\n            this.value === value.value &&\n            this.Q === value.Q\n        );\n    }\n\n    public lt(value: Fq): boolean {\n        return this.value < value.value;\n    }\n\n    public gt(value: Fq): boolean {\n        return this.value > value.value;\n    }\n\n    public lteq(value: Fq): boolean {\n        return this.lt(value) || this.equals(value);\n    }\n\n    public gteq(value: Fq): boolean {\n        return this.gt(value) || this.equals(value);\n    }\n\n    public modSqrt(): Fq {\n        if (this.value === 0n) {\n            return new Fq(this.Q, 0n);\n        } else if (modPow(this.value, (this.Q - 1n) / 2n, this.Q) != 1n) {\n            throw new Error('No sqrt exists.');\n        } else if (mod(this.Q, 4n) === 3n) {\n            return new Fq(\n                this.Q,\n                modPow(this.value, (this.Q + 1n) / 4n, this.Q)\n            );\n        } else if (mod(this.Q, 8n) === 5n) {\n            return new Fq(\n                this.Q,\n                modPow(this.value, (this.Q + 3n) / 8n, this.Q)\n            );\n        }\n        let S = 0n;\n        let q = this.Q - 1n;\n        while (mod(q, 2n) === 0n) {\n            q /= 2n;\n            S++;\n        }\n        let z = 0n;\n        for (let i = 0n; i < this.Q; i += 1n) {\n            const euler = modPow(i, (this.Q - 1n) / 2n, this.Q);\n            if (euler === mod(-1n, this.Q)) {\n                z = i;\n                break;\n            }\n        }\n        let M = S;\n        let c = modPow(z, q, this.Q);\n        let t = modPow(this.value, q, this.Q);\n        let R = modPow(this.value, (q + 1n) / 2n, this.Q);\n        while (true) {\n            if (t === 0n) return new Fq(this.Q, 0n);\n            else if (t === 1n) return new Fq(this.Q, R);\n            let i = 0n;\n            let f = t;\n            while (f != 1n) {\n                f = mod(f ** 2n, this.Q);\n                i++;\n            }\n            const b = modPow(c, modPow(2n, M - i - 1n, this.Q), this.Q);\n            M = i;\n            c = mod(b ** 2n, this.Q);\n            t = mod(t * c, this.Q);\n            R = mod(R * b, this.Q);\n        }\n    }\n\n    public add(value: AnyField | bigint): AnyField {\n        try {\n            return this.addTo(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError) || typeof value === 'bigint')\n                throw error;\n            return value.addTo(this);\n        }\n    }\n\n    public multiply(value: AnyField | bigint): AnyField {\n        try {\n            return this.multiplyWith(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError) || typeof value === 'bigint')\n                throw error;\n            return value.multiplyWith(this);\n        }\n    }\n\n    public equals(value: AnyField | bigint): boolean {\n        try {\n            return this.equalTo(value);\n        } catch (error) {\n            if (!(error instanceof OperatorError)) throw error;\n            return typeof value === 'bigint' ? false : value.equalTo(this);\n        }\n    }\n}\n","import { FieldExt, Fq } from '../../internal';\n\nexport class Fq2 extends FieldExt<Fq> {\n    public static nil = new Fq2(1n, Fq.nil, Fq.nil);\n\n    public extension = 2;\n    public root: Fq;\n\n    constructor(Q: bigint, x: Fq, y: Fq) {\n        super(Q, [x, y]);\n        this.root = new Fq(Q, -1n);\n    }\n\n    public construct(Q: bigint, elements: Fq[]): this {\n        return new Fq2(Q, elements[0], elements[1]) as this;\n    }\n\n    public inverse(): this {\n        const [a, b] = this.elements;\n        const factor = a.multiply(a).add(b.multiply(b)).inverse();\n        return new Fq2(\n            this.Q,\n            a.multiply(factor) as Fq,\n            b.negate().multiply(factor) as Fq\n        ) as this;\n    }\n\n    public mulByNonResidue(): this {\n        const [a, b] = this.elements;\n        return new Fq2(this.Q, a.subtract(b) as Fq, a.add(b) as Fq) as this;\n    }\n\n    public modSqrt(): this {\n        const [a0, a1] = this.elements;\n        if (a1.equals(this.basefield.one(this.Q)))\n            return this.fromFq(this.Q, a0.modSqrt());\n        let alpha = a0.pow(2n).add(a1.pow(2n)) as Fq;\n        let gamma = alpha.pow((this.Q - 1n) / 2n);\n        if (new Fq(this.Q, -1n).equals(gamma))\n            throw new Error('No sqrt exists.');\n        alpha = alpha.modSqrt();\n        let delta = a0.add(alpha).multiply(new Fq(this.Q, 2n).inverse()) as Fq;\n        gamma = delta.pow((this.Q - 1n) / 2n) as Fq;\n        if (gamma.equals(new Fq(this.Q, -1n)))\n            delta = a0\n                .subtract(alpha)\n                .multiply(new Fq(this.Q, 2n).inverse()) as Fq;\n        const x0 = delta.modSqrt();\n        const x1 = a1.multiply(new Fq(this.Q, 2n).multiply(x0).inverse()) as Fq;\n        return new Fq2(this.Q, x0, x1) as this;\n    }\n}\n","import { FieldExt, Fq, Fq2 } from '../../internal';\n\nexport class Fq6 extends FieldExt<Fq2> {\n    public static nil = new Fq6(1n, Fq2.nil, Fq2.nil, Fq2.nil);\n\n    public extension = 6;\n    public root: Fq2;\n\n    constructor(Q: bigint, x: Fq2, y: Fq2, z: Fq2) {\n        super(Q, [x, y, z]);\n        this.root = new Fq2(Q, Fq.nil.one(Q), Fq.nil.one(Q));\n    }\n\n    public construct(Q: bigint, elements: Fq2[]): this {\n        return new Fq6(Q, elements[0], elements[1], elements[2]) as this;\n    }\n\n    public inverse(): this {\n        const [a, b, c] = this.elements;\n        const g0 = a.multiply(a).subtract(b.multiply(c.mulByNonResidue()));\n        const g1 = (c.multiply(c) as Fq2)\n            .mulByNonResidue()\n            .subtract(a.multiply(b));\n        const g2 = b.multiply(b).subtract(a.multiply(c));\n        const factor = g0\n            .multiply(a)\n            .add((g1.multiply(c).add(g2.multiply(b)) as Fq2).mulByNonResidue())\n            .inverse();\n        return new Fq6(\n            this.Q,\n            g0.multiply(factor) as Fq2,\n            g1.multiply(factor) as Fq2,\n            g2.multiply(factor) as Fq2\n        ) as this;\n    }\n\n    public mulByNonResidue(): this {\n        const [a, b, c] = this.elements;\n        return new Fq6(this.Q, c.multiply(this.root) as Fq2, a, b) as this;\n    }\n}\n","import { FieldExt, Fq2, Fq6 } from '../../internal';\n\nexport class Fq12 extends FieldExt<Fq6> {\n    public static nil = new Fq12(1n, Fq6.nil, Fq6.nil);\n\n    public extension = 12;\n    public root: Fq6;\n\n    constructor(Q: bigint, x: Fq6, y: Fq6) {\n        super(Q, [x, y]);\n        this.root = new Fq6(\n            Q,\n            Fq2.nil.zero(Q),\n            Fq2.nil.one(Q),\n            Fq2.nil.zero(Q)\n        );\n    }\n\n    public construct(Q: bigint, elements: Fq6[]): this {\n        return new Fq12(Q, elements[0], elements[1]) as this;\n    }\n\n    public inverse(): this {\n        const [a, b] = this.elements;\n        const factor = a\n            .multiply(a)\n            .subtract((b.multiply(b) as Fq6).mulByNonResidue())\n            .inverse();\n        return new Fq12(\n            this.Q,\n            a.multiply(factor) as Fq6,\n            b.negate().multiply(factor) as Fq6\n        ) as this;\n    }\n}\n","import { EC, Fq, Fq2 } from '../internal';\n\nexport const x = -0xd201000000010000n;\nexport const q =\n    0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\nexport const a = new Fq(q, 0n);\nexport const b = new Fq(q, 4n);\nexport const aTwist = new Fq2(q, new Fq(q, 0n), new Fq(q, 0n));\nexport const bTwist = new Fq2(q, new Fq(q, 4n), new Fq(q, 4n));\n\nexport const gx = new Fq(\n    q,\n    0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bbn\n);\n\nexport const gy = new Fq(\n    q,\n    0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1n\n);\n\nexport const g2x = new Fq2(\n    q,\n    new Fq(\n        q,\n        352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n\n    ),\n    new Fq(\n        q,\n        3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758n\n    )\n);\n\nexport const g2y = new Fq2(\n    q,\n    new Fq(\n        q,\n        1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905n\n    ),\n    new Fq(\n        q,\n        927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582n\n    )\n);\n\nexport const n =\n    0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001n;\nexport const h = 0x396c8c005555e1568c00aaab0000aaabn;\nexport const hEff =\n    0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551n;\nexport const k = 12n;\nexport const sqrtN3 =\n    1586958781458431025242759403266842894121773480562120986020912974854563298150952611241517463240701n;\nexport const sqrtN3m1o2 =\n    793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n;\n\nexport const defaultEc: EC = {\n    q,\n    a,\n    b,\n    gx,\n    gy,\n    g2x,\n    g2y,\n    n,\n    h,\n    x,\n    k,\n    sqrtN3,\n    sqrtN3m1o2,\n};\n\nexport const defaultEcTwist: EC = {\n    q,\n    a: aTwist,\n    b: bTwist,\n    gx,\n    gy,\n    g2x,\n    g2y,\n    n,\n    h: hEff,\n    x,\n    k,\n    sqrtN3,\n    sqrtN3m1o2,\n};\n","import { AnyField, Fq, Fq2, Fq6, q } from '../internal';\n\nexport const frobCoeffs: Record<`${number},${number},${number}`, AnyField> = {\n    '2,1,1': new Fq(q, -1n),\n    '6,1,1': new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn\n        )\n    ),\n    '6,1,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaadn\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,2,1': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,2,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,3,1': new Fq2(q, new Fq(q, 0n), new Fq(q, 1n)),\n    '6,3,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaan\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,4,1': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,4,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen\n        ),\n        new Fq(q, 0n)\n    ),\n    '6,5,1': new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen\n        )\n    ),\n    '6,5,2': new Fq2(\n        q,\n        new Fq(\n            q,\n            0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffffn\n        ),\n        new Fq(q, 0n)\n    ),\n    '12,1,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8n\n            ),\n            new Fq(\n                q,\n                0xfc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,2,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffffn\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,3,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2n\n            ),\n            new Fq(\n                q,\n                0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,4,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,5,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995n\n            ),\n            new Fq(\n                q,\n                0x5b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,6,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaan\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,7,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0xfc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3n\n            ),\n            new Fq(\n                q,\n                0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,8,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,9,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n\n            ),\n            new Fq(\n                q,\n                0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,10,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaadn\n            ),\n            new Fq(q, 0n)\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n    '12,11,1': new Fq6(\n        q,\n        new Fq2(\n            q,\n            new Fq(\n                q,\n                0x5b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116n\n            ),\n            new Fq(\n                q,\n                0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995n\n            )\n        ),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n)),\n        new Fq2(q, new Fq(q, 0n), new Fq(q, 0n))\n    ),\n};\n\nexport function getFrobCoeff(\n    extension: number,\n    i: number,\n    index: number\n): AnyField | undefined {\n    return frobCoeffs[`${extension},${i},${index}`];\n}\n","import SHA from 'jssha';\nimport { HashInfo } from '../internal';\n\nexport const sha256: HashInfo = {\n    byteSize: 32,\n    blockSize: 64,\n    convert: (buffer) => {\n        const hash = new SHA('SHA-256', 'UINT8ARRAY');\n        hash.update(buffer);\n        return hash.getHash('UINT8ARRAY');\n    },\n};\n\nexport const sha512: HashInfo = {\n    byteSize: 64,\n    blockSize: 128,\n    convert: (buffer) => {\n        const hash = new SHA('SHA-512', 'UINT8ARRAY');\n        hash.update(buffer);\n        return hash.getHash('UINT8ARRAY');\n    },\n};\n","import { Fq, Fq2, q } from '../internal';\n\nexport const xnum = [\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6n\n        ),\n        new Fq(\n            q,\n            0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6n\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71an\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71en\n        ),\n        new Fq(\n            q,\n            0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38dn\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1n\n        ),\n        new Fq(q, 0n)\n    ),\n];\n\nexport const xden = [\n    new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63n\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0xcn),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9fn\n        )\n    ),\n    new Fq2(q, new Fq(q, 1n), new Fq(q, 0n)),\n];\n\nexport const ynum = [\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706n\n        ),\n        new Fq(\n            q,\n            0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706n\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97ben\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71cn\n        ),\n        new Fq(\n            q,\n            0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38fn\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10n\n        ),\n        new Fq(q, 0n)\n    ),\n];\n\nexport const yden = [\n    new Fq2(\n        q,\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fbn\n        ),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fbn\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0n),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3n\n        )\n    ),\n    new Fq2(\n        q,\n        new Fq(q, 0x12n),\n        new Fq(\n            q,\n            0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99n\n        )\n    ),\n    new Fq2(q, new Fq(q, 1n), new Fq(q, 0n)),\n];\n","import { Fq, Fq2, q } from '../internal';\n\nexport const xi_2 = new Fq2(q, new Fq(q, -2n), new Fq(q, -1n));\nexport const Ell2p_a = new Fq2(q, new Fq(q, 0n), new Fq(q, 240n));\nexport const Ell2p_b = new Fq2(q, new Fq(q, 1012n), new Fq(q, 1012n));\nexport const ev1 =\n    0x699be3b8c6870965e5bf892ad5d2cc7b0e85a117402dfd83b7f4a947e02d978498255a2aaec0ac627b5afbdf1bf1c90n;\nexport const ev2 =\n    0x8157cd83046453f5dd0972b6e3949e4288020b5b8a9cc99ca07e27089a2ce2436d965026adad3ef7baba37f2183e9b5n;\nexport const ev3 =\n    0xab1c2ffdd6c253ca155231eb3e71ba044fd562f6f72bc5bad5ec46a0b7a3b0247cf08ce6c6317f40edbc653a72dee17n;\nexport const ev4 =\n    0xaa404866706722864480885d68ad0ccac1967c7544b447873cc37e0181271e006df72162a3d3e0287bf597fbf7f8fc1n;\nexport const etas = [\n    new Fq2(q, new Fq(q, ev1), new Fq(q, ev2)),\n    new Fq2(q, new Fq(q, q - ev2), new Fq(q, ev1)),\n    new Fq2(q, new Fq(q, ev3), new Fq(q, ev4)),\n    new Fq2(q, new Fq(q, q - ev4), new Fq(q, ev3)),\n];\n","import { Fq, Fq2, q } from '../internal';\n\nexport const rv1 =\n    0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n;\n\nexport const rootsOfUnity = [\n    new Fq2(q, new Fq(q, 1n), new Fq(q, 0n)),\n    new Fq2(q, new Fq(q, 0n), new Fq(q, 1n)),\n    new Fq2(q, new Fq(q, rv1), new Fq(q, rv1)),\n    new Fq2(q, new Fq(q, rv1), new Fq(q, q - rv1)),\n];\n","export const basicSchemeDst = new TextEncoder().encode(\n    'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_'\n);\nexport const augSchemeDst = new TextEncoder().encode(\n    'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_AUG_'\n);\nexport const popSchemeDst = new TextEncoder().encode(\n    'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP_'\n);\nexport const popSchemePopDst = new TextEncoder().encode(\n    'BLS_POP_BLS12381G2_XMD:SHA-256_SSWU_RO_POP_'\n);\n","import {\n    assert,\n    defaultEc,\n    EC,\n    Fq,\n    Fq12,\n    Fq2,\n    Fq6,\n    JacobianPoint,\n    scalarMultJacobian,\n} from '../../internal';\n\nexport class AffinePoint {\n    constructor(\n        public x: Fq | Fq2,\n        public y: Fq | Fq2,\n        public isInfinity: boolean,\n        public ec: EC = defaultEc\n    ) {\n        assert(x instanceof y.constructor);\n    }\n\n    public isOnCurve(): boolean {\n        return (\n            this.isInfinity ||\n            this.y\n                .multiply(this.y)\n                .equals(\n                    this.x\n                        .multiply(this.x)\n                        .multiply(this.x)\n                        .add(this.ec.a.multiply(this.x))\n                        .add(this.ec.b)\n                )\n        );\n    }\n\n    public toJacobian(): JacobianPoint {\n        return new JacobianPoint(\n            this.x,\n            this.y,\n            this.x.one(this.ec.q),\n            this.isInfinity,\n            this.ec\n        );\n    }\n\n    public twist(): AffinePoint {\n        const f = Fq12.nil.one(this.ec.q);\n        const wsq = new Fq12(this.ec.q, f.root, Fq6.nil.zero(this.ec.q));\n        const wcu = new Fq12(this.ec.q, Fq6.nil.zero(this.ec.q), f.root);\n        return new AffinePoint(\n            this.x.multiply(wsq) as Fq | Fq2,\n            this.y.multiply(wcu) as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public untwist(): AffinePoint {\n        const f = Fq12.nil.one(this.ec.q);\n        const wsq = new Fq12(this.ec.q, f.root, Fq6.nil.zero(this.ec.q));\n        const wcu = new Fq12(this.ec.q, Fq6.nil.zero(this.ec.q), f.root);\n        return new AffinePoint(\n            this.x.divide(wsq) as Fq | Fq2,\n            this.y.divide(wcu) as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public double(): AffinePoint {\n        const left = this.x\n            .multiply(this.x)\n            .multiply(new Fq(this.ec.q, 3n))\n            .add(this.ec.a);\n        const s = left.divide(this.y.multiply(new Fq(this.ec.q, 2n)));\n        const newX = s.multiply(s).subtract(this.x).subtract(this.x);\n        const newY = s.multiply(this.x.subtract(newX)).subtract(this.y);\n        return new AffinePoint(\n            newX as Fq | Fq2,\n            newY as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public add(value: AffinePoint): AffinePoint {\n        assert(this.isOnCurve());\n        assert(value.isOnCurve());\n        if (this.isInfinity) return value;\n        else if (value.isInfinity) return this;\n        else if (this.equals(value)) return this.double();\n        const s = value.y.subtract(this.y).divide(value.x.subtract(this.x));\n        const newX = s.multiply(s).subtract(this.x).subtract(value.x);\n        const newY = s.multiply(this.x.subtract(newX)).subtract(this.y);\n        return new AffinePoint(\n            newX as Fq | Fq2,\n            newY as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public subtract(value: AffinePoint): AffinePoint {\n        return this.add(value.negate());\n    }\n\n    public multiply(value: Fq | bigint): AffinePoint {\n        return scalarMultJacobian(value, this.toJacobian(), this.ec).toAffine();\n    }\n\n    public negate(): AffinePoint {\n        return new AffinePoint(\n            this.x,\n            this.y.negate(),\n            this.isInfinity,\n            this.ec\n        );\n    }\n\n    public equals(value: AffinePoint): boolean {\n        return (\n            this.x.equals(value.x) &&\n            this.y.equals(value.y) &&\n            this.isInfinity === value.isInfinity\n        );\n    }\n\n    public clone(): AffinePoint {\n        return new AffinePoint(\n            this.x.clone(),\n            this.y.clone(),\n            this.isInfinity,\n            this.ec\n        );\n    }\n\n    public toString(): string {\n        return `AffinePoint(x=${this.x}, y=${this.y}, i=${this.isInfinity})`;\n    }\n}\n","import { AnyField, Fq, Fq2 } from '../../internal';\n\nexport interface EC {\n    q: bigint;\n    a: AnyField;\n    b: AnyField;\n    gx: Fq;\n    gy: Fq;\n    g2x: Fq2;\n    g2y: Fq2;\n    n: bigint;\n    h: bigint;\n    x: bigint;\n    k: bigint;\n    sqrtN3: bigint;\n    sqrtN3m1o2: bigint;\n}\n","import {\n    AffinePoint,\n    assert,\n    bytesToInt,\n    defaultEc,\n    defaultEcTwist,\n    EC,\n    Fq,\n    Fq2,\n    fromHex,\n    hash256,\n    scalarMultJacobian,\n    signFq,\n    signFq2,\n    toHex,\n    yForX,\n} from '../../internal';\n\nexport class JacobianPoint {\n    public static fromBytes(\n        bytes: Uint8Array,\n        isExtension: boolean,\n        ec: EC = defaultEc\n    ): JacobianPoint {\n        const provider = isExtension ? Fq2 : Fq;\n        if (isExtension) {\n            if (bytes.length !== 96) throw new Error('Expected 96 bytes.');\n        } else {\n            if (bytes.length !== 48) throw new Error('Expected 48 bytes.');\n        }\n        const mByte = bytes[0] & 0xe0;\n        if ([0x20, 0x60, 0xe0].includes(mByte))\n            throw new Error('Invalid first three bits.');\n        const compressed = (mByte & 0x80) !== 0;\n        const infinity = (mByte & 0x40) !== 0;\n        const signed = (mByte & 0x20) !== 0;\n        if (!compressed) throw new Error('Compression bit must be 1.');\n        bytes[0] &= 0x1f;\n        if (infinity) {\n            for (const byte of bytes) {\n                if (byte !== 0)\n                    throw new Error(\n                        'Point at infinity, but found non-zero byte.'\n                    );\n            }\n            return new AffinePoint(\n                provider.nil.zero(ec.q),\n                provider.nil.zero(ec.q),\n                true,\n                ec\n            ).toJacobian();\n        }\n        const x = (isExtension ? Fq2 : Fq).nil.fromBytes(ec.q, bytes);\n        const yValue = yForX(x, ec);\n        const sign = isExtension\n            ? signFq2(yValue as Fq2, ec)\n            : signFq(yValue as Fq, ec);\n        const y = (sign === signed ? yValue : yValue.negate()) as Fq | Fq2;\n        return new AffinePoint(x, y, false, ec).toJacobian();\n    }\n\n    public static fromHex(\n        hex: string,\n        isExtension: boolean,\n        ec: EC = defaultEc\n    ): JacobianPoint {\n        return JacobianPoint.fromBytes(fromHex(hex), isExtension, ec);\n    }\n\n    public static generateG1(): JacobianPoint {\n        return new AffinePoint(\n            defaultEc.gx,\n            defaultEc.gy,\n            false,\n            defaultEc\n        ).toJacobian();\n    }\n\n    public static generateG2(): JacobianPoint {\n        return new AffinePoint(\n            defaultEcTwist.g2x,\n            defaultEcTwist.g2y,\n            false,\n            defaultEcTwist\n        ).toJacobian();\n    }\n\n    public static infinityG1(isExtension: boolean = false): JacobianPoint {\n        const provider = isExtension ? Fq2 : Fq;\n        return new JacobianPoint(\n            provider.nil.zero(defaultEc.q),\n            provider.nil.zero(defaultEc.q),\n            provider.nil.zero(defaultEc.q),\n            true,\n            defaultEc\n        );\n    }\n\n    public static infinityG2(isExtension: boolean = true): JacobianPoint {\n        const provider = isExtension ? Fq2 : Fq;\n        return new JacobianPoint(\n            provider.nil.zero(defaultEcTwist.q),\n            provider.nil.zero(defaultEcTwist.q),\n            provider.nil.zero(defaultEcTwist.q),\n            true,\n            defaultEcTwist\n        );\n    }\n\n    public static fromBytesG1(\n        bytes: Uint8Array,\n        isExtension: boolean = false\n    ): JacobianPoint {\n        return JacobianPoint.fromBytes(bytes, isExtension, defaultEc);\n    }\n\n    public static fromBytesG2(\n        bytes: Uint8Array,\n        isExtension: boolean = true\n    ): JacobianPoint {\n        return JacobianPoint.fromBytes(bytes, isExtension, defaultEcTwist);\n    }\n\n    public static fromHexG1(\n        hex: string,\n        isExtension: boolean = false\n    ): JacobianPoint {\n        return JacobianPoint.fromBytesG1(fromHex(hex), isExtension);\n    }\n\n    public static fromHexG2(\n        hex: string,\n        isExtension: boolean = true\n    ): JacobianPoint {\n        return JacobianPoint.fromBytesG2(fromHex(hex), isExtension);\n    }\n\n    constructor(\n        public x: Fq | Fq2,\n        public y: Fq | Fq2,\n        public z: Fq | Fq2,\n        public isInfinity: boolean,\n        public ec: EC = defaultEc\n    ) {\n        assert(x instanceof y.constructor);\n        assert(y instanceof z.constructor);\n    }\n\n    public isOnCurve(): boolean {\n        return this.isInfinity || this.toAffine().isOnCurve();\n    }\n\n    public isValid(): boolean {\n        return (\n            this.isOnCurve() &&\n            this.multiply(this.ec.n).equals(\n                this.x instanceof Fq\n                    ? JacobianPoint.infinityG1()\n                    : JacobianPoint.infinityG2()\n            )\n        );\n    }\n\n    public getFingerprint(): number {\n        const bytes = this.toBytes();\n        return bytesToInt(hash256(bytes).slice(0, 4), 'big');\n    }\n\n    public toAffine(): AffinePoint {\n        return this.isInfinity\n            ? new AffinePoint(\n                  this.x.zero(this.ec.q),\n                  this.y.zero(this.ec.q),\n                  true,\n                  this.ec\n              )\n            : new AffinePoint(\n                  this.x.divide(this.z.pow(2n)) as Fq | Fq2,\n                  this.y.divide(this.z.pow(3n)) as Fq | Fq2,\n                  false,\n                  this.ec\n              );\n    }\n\n    public toBytes(): Uint8Array {\n        const point = this.toAffine();\n        const output = point.x.toBytes();\n        if (point.isInfinity) {\n            const bytes = [0xc0];\n            for (let i = 0; i < output.length - 1; i++) bytes.push(0);\n            return Uint8Array.from(bytes);\n        }\n        const sign =\n            point.y instanceof Fq2\n                ? signFq2(point.y, this.ec)\n                : signFq(point.y, this.ec);\n        output[0] |= sign ? 0xa0 : 0x80;\n        return output;\n    }\n\n    public toHex(): string {\n        return toHex(this.toBytes());\n    }\n\n    public toString(): string {\n        return `JacobianPoint(x=${this.x}, y=${this.y}, z=${this.z}, i=${this.isInfinity})`;\n    }\n\n    public double(): JacobianPoint {\n        if (this.isInfinity || this.y.equals(this.x.zero(this.ec.q)))\n            return new JacobianPoint(\n                this.x.one(this.ec.q),\n                this.x.one(this.ec.q),\n                this.x.zero(this.ec.q),\n                true,\n                this.ec\n            );\n        const S = this.x\n            .multiply(this.y)\n            .multiply(this.y)\n            .multiply(new Fq(this.ec.q, 4n));\n        const Z_sq = this.z.multiply(this.z);\n        const Z_4th = Z_sq.multiply(Z_sq);\n        const Y_sq = this.y.multiply(this.y);\n        const Y_4th = Y_sq.multiply(Y_sq);\n        const M = this.x\n            .multiply(this.x)\n            .multiply(new Fq(this.ec.q, 3n))\n            .add(this.ec.a.multiply(Z_4th));\n        const X_p = M.multiply(M).subtract(S.multiply(new Fq(this.ec.q, 2n)));\n        const Y_p = M.multiply(S.subtract(X_p)).subtract(\n            Y_4th.multiply(new Fq(this.ec.q, 8n))\n        );\n        const Z_p = this.y.multiply(this.z).multiply(new Fq(this.ec.q, 2n));\n        return new JacobianPoint(\n            X_p as Fq | Fq2,\n            Y_p as Fq | Fq2,\n            Z_p as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public negate(): JacobianPoint {\n        return this.toAffine().negate().toJacobian();\n    }\n\n    public add(value: JacobianPoint): JacobianPoint {\n        if (this.isInfinity) return value;\n        else if (value.isInfinity) return this;\n        const U1 = this.x.multiply(value.z.pow(2n));\n        const U2 = value.x.multiply(this.z.pow(2n));\n        const S1 = this.y.multiply(value.z.pow(3n));\n        const S2 = value.y.multiply(this.z.pow(3n));\n        if (U1.equals(U2)) {\n            if (!S1.equals(S2)) {\n                return new JacobianPoint(\n                    this.x.one(this.ec.q),\n                    this.x.one(this.ec.q),\n                    this.x.zero(this.ec.q),\n                    true,\n                    this.ec\n                );\n            } else return this.double();\n        }\n        const H = U2.subtract(U1);\n        const R = S2.subtract(S1);\n        const H_sq = H.multiply(H);\n        const H_cu = H.multiply(H_sq);\n        const X3 = R.multiply(R)\n            .subtract(H_cu)\n            .subtract(U1.multiply(H_sq).multiply(new Fq(this.ec.q, 2n)));\n        const Y3 = R.multiply(U1.multiply(H_sq).subtract(X3)).subtract(\n            S1.multiply(H_cu)\n        );\n        const Z3 = H.multiply(this.z).multiply(value.z);\n        return new JacobianPoint(\n            X3 as Fq | Fq2,\n            Y3 as Fq | Fq2,\n            Z3 as Fq | Fq2,\n            false,\n            this.ec\n        );\n    }\n\n    public multiply(value: Fq | bigint): JacobianPoint {\n        return scalarMultJacobian(value, this, this.ec);\n    }\n\n    public equals(value: JacobianPoint): boolean {\n        return this.toAffine().equals(value.toAffine());\n    }\n\n    public clone(): JacobianPoint {\n        return new JacobianPoint(\n            this.x.clone(),\n            this.y.clone(),\n            this.z.clone(),\n            this.isInfinity,\n            this.ec\n        );\n    }\n}\n","export class OperatorError extends Error {\n    constructor(message: string) {\n        super(message);\n        Object.setPrototypeOf(this, OperatorError.prototype);\n    }\n}\n","export class AssertionError extends Error {\n    constructor(message: string) {\n        super(message);\n        Object.setPrototypeOf(this, AssertionError.prototype);\n    }\n}\n\nexport function assert(\n    test: boolean,\n    message: string = 'Assertion failed.'\n): void {\n    if (!test) throw new AssertionError(message);\n}\n","export interface HashInfo {\n    convert: (bytes: Uint8Array) => Uint8Array;\n    byteSize: number;\n    blockSize: number;\n}\n","import {\n    assert,\n    bigIntToBytes,\n    bytesToBigInt,\n    defaultEc,\n    extractExpand,\n    fromHex,\n    JacobianPoint,\n    mod,\n    toHex,\n} from '../internal';\n\nexport class PrivateKey {\n    public static size = 32;\n\n    public static fromBytes(bytes: Uint8Array): PrivateKey {\n        return new PrivateKey(mod(bytesToBigInt(bytes, 'big'), defaultEc.n));\n    }\n\n    public static fromHex(hex: string): PrivateKey {\n        return PrivateKey.fromBytes(fromHex(hex));\n    }\n\n    public static fromSeed(seed: Uint8Array): PrivateKey {\n        const length = 48;\n        const okm = extractExpand(\n            length,\n            Uint8Array.from([...seed, 0]),\n            new TextEncoder().encode('BLS-SIG-KEYGEN-SALT-'),\n            Uint8Array.from([0, length])\n        );\n        return new PrivateKey(mod(bytesToBigInt(okm, 'big'), defaultEc.n));\n    }\n\n    public static fromBigInt(value: bigint): PrivateKey {\n        return new PrivateKey(mod(value, defaultEc.n));\n    }\n\n    public static aggregate(privateKeys: PrivateKey[]): PrivateKey {\n        return new PrivateKey(\n            mod(\n                privateKeys.reduce(\n                    (aggregate, privateKey) => aggregate + privateKey.value,\n                    0n\n                ),\n                defaultEc.n\n            )\n        );\n    }\n\n    constructor(public value: bigint) {\n        assert(value < defaultEc.n);\n    }\n\n    public getG1(): JacobianPoint {\n        return JacobianPoint.generateG1().multiply(this.value);\n    }\n\n    public toBytes(): Uint8Array {\n        return bigIntToBytes(this.value, PrivateKey.size, 'big');\n    }\n\n    public toHex(): string {\n        return toHex(this.toBytes());\n    }\n\n    public toString(): string {\n        return `PrivateKey(0x${this.toHex()})`;\n    }\n\n    public equals(value: PrivateKey): boolean {\n        return this.value === value.value;\n    }\n}\n","import {\n    augSchemeDst,\n    coreAggregateMpl,\n    coreAggregateVerify,\n    coreSignMpl,\n    coreVerifyMpl,\n    deriveChildG1Unhardened,\n    deriveChildSk,\n    deriveChildSkUnhardened,\n    JacobianPoint,\n    keyGen,\n    PrivateKey,\n} from '../../internal';\n\nexport class AugSchemeMPL {\n    public static keyGen(seed: Uint8Array): PrivateKey {\n        return keyGen(seed);\n    }\n\n    public static sign(\n        privateKey: PrivateKey,\n        message: Uint8Array\n    ): JacobianPoint {\n        const publicKey = privateKey.getG1();\n        return coreSignMpl(\n            privateKey,\n            Uint8Array.from([...publicKey.toBytes(), ...message]),\n            augSchemeDst\n        );\n    }\n\n    public static sign_prepend(\n        privateKey: PrivateKey,\n        message: Uint8Array,\n        prependPublicKey: JacobianPoint\n    ): JacobianPoint {\n        return coreSignMpl(\n            privateKey,\n            Uint8Array.from([...prependPublicKey.toBytes(), ...message]),\n            augSchemeDst\n        );\n    }\n\n    public static verify(\n        publicKey: JacobianPoint,\n        message: Uint8Array,\n        signature: JacobianPoint\n    ): boolean {\n        return coreVerifyMpl(\n            publicKey,\n            Uint8Array.from([...publicKey.toBytes(), ...message]),\n            signature,\n            augSchemeDst\n        );\n    }\n\n    public static aggregate(signatures: JacobianPoint[]): JacobianPoint {\n        return coreAggregateMpl(signatures);\n    }\n\n    public static aggregateVerify(\n        publicKeys: JacobianPoint[],\n        messages: Uint8Array[],\n        signature: JacobianPoint\n    ): boolean {\n        if (publicKeys.length !== messages.length || !publicKeys.length)\n            return false;\n        const mPrimes: Array<Uint8Array> = [];\n        for (let i = 0; i < publicKeys.length; i++)\n            mPrimes.push(\n                Uint8Array.from([...publicKeys[i].toBytes(), ...messages[i]])\n            );\n        return coreAggregateVerify(\n            publicKeys,\n            mPrimes,\n            signature,\n            augSchemeDst\n        );\n    }\n\n    public static deriveChildSk(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSk(privateKey, index);\n    }\n\n    public static deriveChildSkUnhardened(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSkUnhardened(privateKey, index);\n    }\n\n    public static deriveChildPkUnhardened(\n        publicKey: JacobianPoint,\n        index: number\n    ): JacobianPoint {\n        return deriveChildG1Unhardened(publicKey, index);\n    }\n}\n","import {\n    basicSchemeDst,\n    bytesEqual,\n    coreAggregateMpl,\n    coreAggregateVerify,\n    coreSignMpl,\n    coreVerifyMpl,\n    deriveChildG1Unhardened,\n    deriveChildSk,\n    deriveChildSkUnhardened,\n    JacobianPoint,\n    keyGen,\n    PrivateKey,\n} from '../../internal';\n\nexport class BasicSchemeMPL {\n    public static keyGen(seed: Uint8Array): PrivateKey {\n        return keyGen(seed);\n    }\n\n    public static sign(\n        privateKey: PrivateKey,\n        message: Uint8Array\n    ): JacobianPoint {\n        return coreSignMpl(privateKey, message, basicSchemeDst);\n    }\n\n    public static verify(\n        publicKey: JacobianPoint,\n        message: Uint8Array,\n        signature: JacobianPoint\n    ): boolean {\n        return coreVerifyMpl(publicKey, message, signature, basicSchemeDst);\n    }\n\n    public static aggregate(signatures: JacobianPoint[]): JacobianPoint {\n        return coreAggregateMpl(signatures);\n    }\n\n    public static aggregateVerify(\n        publicKeys: JacobianPoint[],\n        messages: Uint8Array[],\n        signature: JacobianPoint\n    ): boolean {\n        if (publicKeys.length !== messages.length || !publicKeys.length)\n            return false;\n        for (const message of messages) {\n            for (const match of messages) {\n                if (message !== match && bytesEqual(message, match))\n                    return false;\n            }\n        }\n        return coreAggregateVerify(\n            publicKeys,\n            messages,\n            signature,\n            basicSchemeDst\n        );\n    }\n\n    public static deriveChildSk(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSk(privateKey, index);\n    }\n\n    public static deriveChildSkUnhardened(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSkUnhardened(privateKey, index);\n    }\n\n    public static deriveChildPkUnhardened(\n        publicKey: JacobianPoint,\n        index: number\n    ): JacobianPoint {\n        return deriveChildG1Unhardened(publicKey, index);\n    }\n}\n","import {\n    assert,\n    AssertionError,\n    atePairingMulti,\n    bytesEqual,\n    coreAggregateMpl,\n    coreAggregateVerify,\n    coreSignMpl,\n    coreVerifyMpl,\n    defaultEc,\n    deriveChildG1Unhardened,\n    deriveChildSk,\n    deriveChildSkUnhardened,\n    Fq12,\n    g2Map,\n    JacobianPoint,\n    keyGen,\n    popSchemeDst,\n    popSchemePopDst,\n    PrivateKey,\n} from '../../internal';\n\nexport class PopSchemeMPL {\n    public static keyGen(seed: Uint8Array): PrivateKey {\n        return keyGen(seed);\n    }\n\n    public static sign(\n        privateKey: PrivateKey,\n        message: Uint8Array\n    ): JacobianPoint {\n        return coreSignMpl(privateKey, message, popSchemeDst);\n    }\n\n    public static verify(\n        publicKey: JacobianPoint,\n        message: Uint8Array,\n        signature: JacobianPoint\n    ): boolean {\n        return coreVerifyMpl(publicKey, message, signature, popSchemeDst);\n    }\n\n    public static aggregate(signatures: JacobianPoint[]): JacobianPoint {\n        return coreAggregateMpl(signatures);\n    }\n\n    public static aggregateVerify(\n        publicKeys: JacobianPoint[],\n        messages: Uint8Array[],\n        signature: JacobianPoint\n    ): boolean {\n        if (publicKeys.length !== messages.length || !publicKeys.length)\n            return false;\n        for (const message of messages) {\n            for (const match of messages) {\n                if (message !== match && bytesEqual(message, match))\n                    return false;\n            }\n        }\n        return coreAggregateVerify(\n            publicKeys,\n            messages,\n            signature,\n            popSchemeDst\n        );\n    }\n\n    public static popProve(privateKey: PrivateKey): JacobianPoint {\n        const publicKey = privateKey.getG1();\n        return g2Map(publicKey.toBytes(), popSchemePopDst).multiply(\n            privateKey.value\n        );\n    }\n\n    public static popVerify(\n        publicKey: JacobianPoint,\n        proof: JacobianPoint\n    ): boolean {\n        try {\n            assert(proof.isValid());\n            assert(publicKey.isValid());\n            const q = g2Map(publicKey.toBytes(), popSchemePopDst);\n            const one = Fq12.nil.one(defaultEc.q);\n            const pairingResult = atePairingMulti(\n                [publicKey, JacobianPoint.generateG1().negate()],\n                [q, proof]\n            );\n            return pairingResult.equals(one);\n        } catch (e) {\n            if (e instanceof AssertionError) return false;\n            throw e;\n        }\n    }\n\n    public static fastAggregateVerify(\n        publicKeys: JacobianPoint[],\n        message: Uint8Array,\n        signature: JacobianPoint\n    ): boolean {\n        if (!publicKeys.length) return false;\n        let aggregate = publicKeys[0];\n        for (const publicKey of publicKeys.slice(1))\n            aggregate = aggregate.add(publicKey);\n        return coreVerifyMpl(aggregate, message, signature, popSchemeDst);\n    }\n\n    public static deriveChildSk(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSk(privateKey, index);\n    }\n\n    public static deriveChildSkUnhardened(\n        privateKey: PrivateKey,\n        index: number\n    ): PrivateKey {\n        return deriveChildSkUnhardened(privateKey, index);\n    }\n\n    public static deriveChildPkUnhardened(\n        publicKey: JacobianPoint,\n        index: number\n    ): JacobianPoint {\n        return deriveChildG1Unhardened(publicKey, index);\n    }\n}\n","import { mod, modNumber } from '../internal';\n\nexport type Endian = 'little' | 'big';\n\nexport function flip(binary: string): string {\n    return binary.replace(/[01]/g, (match) => (match === '0' ? '1' : '0'));\n}\n\nexport function intBitLength(value: number): number {\n    return Math.abs(value).toString(2).length;\n}\n\nexport function bigIntBitLength(value: bigint): number {\n    return (value < 0n ? -value : value).toString(2).length;\n}\n\nexport function bigIntToBits(i: bigint): number[] {\n    if (i < 1n) return [0];\n    const bits: Array<number> = [];\n    while (i !== 0n) {\n        bits.push(Number(mod(i, 2n)));\n        i /= 2n;\n    }\n    return bits.reverse();\n}\n\nexport function intToBits(i: number): number[] {\n    if (i < 1) return [0];\n    const bits: Array<number> = [];\n    while (i !== 0) {\n        bits.push(Number(modNumber(i, 2)));\n        i /= 2;\n    }\n    return bits.reverse();\n}\n\nexport function intToBytes(\n    value: number,\n    size: number,\n    endian: Endian,\n    signed: boolean = false\n): Uint8Array {\n    if (value < 0 && !signed)\n        throw new Error('Cannot convert negative number to unsigned.');\n    if (Math.floor(value) !== value)\n        throw new Error('Cannot convert floating point number.');\n    let binary = Math.abs(value)\n        .toString(2)\n        .padStart(size * 8, '0');\n    if (value < 0) {\n        binary = (parseInt(flip(binary), 2) + 1)\n            .toString(2)\n            .padStart(size * 8, '0');\n    }\n    var bytes = binary.match(/[01]{8}/g)!.map((match) => parseInt(match, 2));\n    if (endian === 'little') bytes.reverse();\n    return Uint8Array.from(bytes);\n}\n\nexport function bytesToInt(\n    bytes: Uint8Array,\n    endian: Endian,\n    signed: boolean = false\n): number {\n    if (bytes.length === 0) return 0;\n    const sign = bytes[endian === 'little' ? bytes.length - 1 : 0]\n        .toString(2)\n        .padStart(8, '0')[0];\n    const byteList = endian === 'little' ? bytes.reverse() : bytes;\n    let binary = '';\n    for (const byte of byteList) binary += byte.toString(2).padStart(8, '0');\n    if (sign === '1' && signed) {\n        binary = (parseInt(flip(binary), 2) + 1)\n            .toString(2)\n            .padStart(bytes.length * 8, '0');\n    }\n    const result = parseInt(binary, 2);\n    return sign === '1' && signed ? -result : result;\n}\n\nexport function encodeInt(value: number): Uint8Array {\n    if (value === 0) return Uint8Array.from([]);\n    const length = (intBitLength(value) + 8) >> 3;\n    let bytes = intToBytes(value, length, 'big', true);\n    while (\n        bytes.length > 1 &&\n        bytes[0] === ((bytes[1] & 0x80) !== 0 ? 0xff : 0)\n    )\n        bytes = bytes.slice(1);\n    return bytes;\n}\n\nexport function decodeInt(bytes: Uint8Array): number {\n    return bytesToInt(bytes, 'big', true);\n}\n\nexport function bigIntToBytes(\n    value: bigint,\n    size: number,\n    endian: Endian,\n    signed: boolean = false\n): Uint8Array {\n    if (value < 0n && !signed)\n        throw new Error('Cannot convert negative number to unsigned.');\n    let binary = (value < 0n ? -value : value)\n        .toString(2)\n        .padStart(size * 8, '0');\n    if (value < 0) {\n        binary = (BigInt('0b' + flip(binary)) + 1n)\n            .toString(2)\n            .padStart(size * 8, '0');\n    }\n    var bytes = binary.match(/[01]{8}/g)!.map((match) => parseInt(match, 2));\n    if (endian === 'little') bytes.reverse();\n    return Uint8Array.from(bytes);\n}\n\nexport function bytesToBigInt(\n    bytes: Uint8Array,\n    endian: Endian,\n    signed: boolean = false\n): bigint {\n    if (bytes.length === 0) return 0n;\n    const sign = bytes[endian === 'little' ? bytes.length - 1 : 0]\n        .toString(2)\n        .padStart(8, '0')[0];\n    const byteList = endian === 'little' ? bytes.reverse() : bytes;\n    let binary = '';\n    for (const byte of byteList) binary += byte.toString(2).padStart(8, '0');\n    if (sign === '1' && signed) {\n        binary = (BigInt('0b' + flip(binary)) + 1n)\n            .toString(2)\n            .padStart(bytes.length * 8, '0');\n    }\n    const result = BigInt('0b' + binary);\n    return sign === '1' && signed ? -result : result;\n}\n\nexport function encodeBigInt(value: bigint): Uint8Array {\n    if (value === 0n) return Uint8Array.from([]);\n    const length = (bigIntBitLength(value) + 8) >> 3;\n    let bytes = bigIntToBytes(value, length, 'big', true);\n    while (\n        bytes.length > 1 &&\n        bytes[0] === ((bytes[1] & 0x80) !== 0 ? 0xff : 0)\n    )\n        bytes = bytes.slice(1);\n    return bytes;\n}\n\nexport function decodeBigInt(bytes: Uint8Array): bigint {\n    return bytesToBigInt(bytes, 'big', true);\n}\n\nexport function concatBytes(...lists: Uint8Array[]): Uint8Array {\n    const bytes: Array<number> = [];\n    for (const list of lists) {\n        for (const byte of list) bytes.push(byte);\n    }\n    return Uint8Array.from(bytes);\n}\n\nexport function bytesEqual(a: Uint8Array, b: Uint8Array): boolean {\n    return (\n        a.length === b.length && a.findIndex((byte, i) => b[i] !== byte) === -1\n    );\n}\n\nconst HEX_STRINGS = '0123456789abcdef';\nconst MAP_HEX: Record<string, number> = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    a: 10,\n    b: 11,\n    c: 12,\n    d: 13,\n    e: 14,\n    f: 15,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n};\n\nexport function toHex(bytes: Uint8Array): string {\n    return Array.from(bytes)\n        .map((b) => HEX_STRINGS[b >> 4] + HEX_STRINGS[b & 15])\n        .join('');\n}\n\nexport function fromHex(hex: string): Uint8Array {\n    const bytes = new Uint8Array(Math.floor(hex.length / 2));\n    let i;\n    for (i = 0; i < bytes.length; i++) {\n        const a = MAP_HEX[hex[i * 2]];\n        const b = MAP_HEX[hex[i * 2 + 1]];\n        if (a === undefined || b === undefined) {\n            break;\n        }\n        bytes[i] = (a << 4) | b;\n    }\n    return i === bytes.length ? bytes : bytes.slice(0, i);\n}\n","import {\n    AffinePoint,\n    assert,\n    defaultEc,\n    defaultEcTwist,\n    EC,\n    Fq,\n    Fq2,\n    JacobianPoint,\n    mod,\n} from '../../internal';\n\nexport function yForX(x: Fq | Fq2, ec: EC = defaultEc): Fq | Fq2 {\n    const u = x.multiply(x).multiply(x).add(ec.a.multiply(x)).add(ec.b) as\n        | Fq\n        | Fq2;\n    const y = u.modSqrt();\n    if (y.equals(0n) || !new AffinePoint(x, y, false, ec).isOnCurve())\n        throw new Error('No y for point x.');\n    return y;\n}\n\nexport function scalarMultJacobian(\n    value: Fq | bigint,\n    point: JacobianPoint,\n    ec: EC = defaultEc\n): JacobianPoint {\n    if (value instanceof Fq) value = value.value;\n    let result = new JacobianPoint(\n        point.x.one(ec.q),\n        point.x.one(ec.q),\n        point.x.zero(ec.q),\n        true,\n        ec\n    );\n    if (point.isInfinity || mod(value, ec.q) === 0n) return result;\n    let addend = point;\n    while (value > 0n) {\n        if (value & 1n) result = result.add(addend);\n        addend = addend.add(addend);\n        value >>= 1n;\n    }\n    return result;\n}\n\nexport function evalIso(\n    P: JacobianPoint,\n    mapCoeffs: Fq2[][],\n    ec: EC\n): JacobianPoint {\n    const { x, y, z } = P;\n    const mapValues: Array<Fq2 | null> = [null, null, null, null];\n    let maxOrd = mapCoeffs[0].length;\n    for (const coeffs of mapCoeffs.slice(1))\n        maxOrd = Math.max(maxOrd, coeffs.length);\n    const zPows: Array<Fq2 | null> = [];\n    for (let i = 0; i < maxOrd; i++) zPows.push(null);\n    zPows[0] = z.pow(0n) as Fq2;\n    zPows[1] = z.pow(2n) as Fq2;\n    for (let i = 2; i < zPows.length; i++) {\n        assert(zPows[i - 1] !== null);\n        assert(zPows[1] !== null);\n        zPows[i] = zPows[i - 1]?.multiply(zPows[1]) as Fq2;\n    }\n    for (const [i, item] of mapCoeffs.entries()) {\n        const coeffsZ = item\n            .slice()\n            .reverse()\n            .map((item, i) => item.multiply(zPows[i]!));\n        let temp = coeffsZ[0];\n        for (const coeff of coeffsZ.slice(1)) {\n            temp = temp.multiply(x);\n            temp = temp.add(coeff);\n        }\n        mapValues[i] = temp as Fq2;\n    }\n    assert(mapCoeffs[1].length + 1 === mapCoeffs[0].length);\n    assert(zPows[1] !== null);\n    assert(mapValues[1] !== null);\n    mapValues[1] = mapValues[1]?.multiply(zPows[1]) as Fq2;\n    assert(mapValues[2] !== null);\n    assert(mapValues[3] !== null);\n    mapValues[2] = mapValues[2]!.multiply(y) as Fq2;\n    mapValues[3] = mapValues[3]!.multiply(z.pow(3n)) as Fq2;\n    const Z = mapValues[1].multiply(mapValues[3]);\n    const X = mapValues[0]!.multiply(mapValues[3]).multiply(Z);\n    const Y = mapValues[2].multiply(mapValues[1]).multiply(Z).multiply(Z);\n    return new JacobianPoint(\n        X as Fq | Fq2,\n        Y as Fq | Fq2,\n        Z as Fq | Fq2,\n        P.isInfinity,\n        ec\n    );\n}\n\nexport function signFq(element: Fq, ec: EC = defaultEc): boolean {\n    return element.gt(new Fq(ec.q, (ec.q - 1n) / 2n));\n}\n\nexport function signFq2(element: Fq2, ec: EC = defaultEcTwist): boolean {\n    if (element.elements[1].equals(new Fq(ec.q, 0n)))\n        return signFq(element.elements[0]);\n    return element.elements[1].gt(new Fq(ec.q, (ec.q - 1n) / 2n));\n}\n","import {\n    assert,\n    bigIntToBytes,\n    bytesEqual,\n    bytesToBigInt,\n    HashInfo,\n    mod,\n    q,\n    sha256,\n} from '../../internal';\n\nexport function I2OSP(value: bigint, length: number): Uint8Array {\n    if (value < 0n || value >= 1n << (8n * BigInt(length)))\n        throw new Error(`Bad I2OSP call: value=${value}, length=${length}.`);\n    const bytes: Array<number> = [];\n    for (let i = 0; i < length; i++) bytes.push(0);\n    let tempValue = value;\n    for (let i = length - 1; i >= 0; i--) {\n        bytes[i] = Number(tempValue & 0xffn);\n        tempValue >>= 8n;\n    }\n    const result = Uint8Array.from(bytes);\n    const toBytesValue = bigIntToBytes(value, length, 'big');\n    assert(bytesEqual(result, toBytesValue));\n    return result;\n}\n\nexport function OS2IP(octets: Uint8Array): bigint {\n    let result = 0n;\n    for (const octet of octets) {\n        result <<= 8n;\n        result += BigInt(octet);\n    }\n    assert(result === bytesToBigInt(octets, 'big'));\n    return result;\n}\n\nexport function bytesXor(a: Uint8Array, b: Uint8Array): Uint8Array {\n    return Uint8Array.from(a.map((element, i) => element ^ b[i]));\n}\n\nexport function expandMessageXmd(\n    message: Uint8Array,\n    dst: Uint8Array,\n    length: number,\n    hash: HashInfo\n): Uint8Array {\n    const ell = Math.trunc((length + hash.byteSize - 1) / hash.byteSize);\n    if (ell > 255)\n        throw new Error(`Bad expandMessageXmd call: ell=${ell} out of range.`);\n    const dst_prime = [...dst, ...I2OSP(BigInt(dst.length), 1)];\n    const Z_pad = I2OSP(0n, hash.blockSize);\n    const lib_str = I2OSP(BigInt(length), 2);\n    const b_0 = hash.convert(\n        Uint8Array.from([\n            ...Z_pad,\n            ...message,\n            ...lib_str,\n            ...I2OSP(0n, 1),\n            ...dst_prime,\n        ])\n    );\n    const bValues: Array<Uint8Array> = [];\n    bValues.push(\n        hash.convert(Uint8Array.from([...b_0, ...I2OSP(1n, 1), ...dst_prime]))\n    );\n    for (let i = 1; i <= ell; i++) {\n        bValues.push(\n            hash.convert(\n                Uint8Array.from([\n                    ...bytesXor(b_0, bValues[i - 1]),\n                    ...I2OSP(BigInt(i + 1), 1),\n                    ...dst_prime,\n                ])\n            )\n        );\n    }\n    const pseudoRandomBytes: Array<number> = [];\n    for (const item of bValues) pseudoRandomBytes.push(...item);\n    return Uint8Array.from(pseudoRandomBytes.slice(0, length));\n}\n\nexport function expandMessageXof(\n    message: Uint8Array,\n    dst: Uint8Array,\n    length: number,\n    hash: HashInfo\n): Uint8Array {\n    const dst_prime = [...dst, ...I2OSP(BigInt(dst.length), 1)];\n    const message_prime = [\n        ...message,\n        ...I2OSP(BigInt(length), 2),\n        ...dst_prime,\n    ];\n    return hash.convert(Uint8Array.from(message_prime)).slice(0, length);\n}\n\nexport function hashToField(\n    message: Uint8Array,\n    count: number,\n    dst: Uint8Array,\n    modulus: bigint,\n    degree: number,\n    byteLength: number,\n    expand: (\n        message: Uint8Array,\n        dst: Uint8Array,\n        length: number,\n        hash: HashInfo\n    ) => Uint8Array,\n    hash: HashInfo\n): bigint[][] {\n    const lengthInBytes = count * degree * byteLength;\n    const pseudoRandomBytes = expand(message, dst, lengthInBytes, hash);\n    const uValues: Array<Array<bigint>> = [];\n    for (let i = 0; i < count; i++) {\n        const eValues: Array<bigint> = [];\n        for (let j = 0; j < degree; j++) {\n            const elmOffset = byteLength * (j + i * degree);\n            const tv = pseudoRandomBytes.slice(\n                elmOffset,\n                elmOffset + byteLength\n            );\n            eValues.push(mod(OS2IP(tv), modulus));\n        }\n        uValues.push(eValues);\n    }\n    return uValues;\n}\n\nexport function Hp(\n    message: Uint8Array,\n    count: number,\n    dst: Uint8Array\n): bigint[][] {\n    return hashToField(message, count, dst, q, 1, 64, expandMessageXmd, sha256);\n}\n\nexport function Hp2(\n    message: Uint8Array,\n    count: number,\n    dst: Uint8Array\n): bigint[][] {\n    return hashToField(message, count, dst, q, 2, 64, expandMessageXmd, sha256);\n}\n","import {\n    bytesToBigInt,\n    defaultEc,\n    extractExpand,\n    hash256,\n    intToBytes,\n    JacobianPoint,\n    mod,\n    PrivateKey,\n} from '../../internal';\n\nexport function keyGen(seed: Uint8Array): PrivateKey {\n    const length = 48;\n    const okm = extractExpand(\n        length,\n        Uint8Array.from([...seed, 0]),\n        new TextEncoder().encode('BLS-SIG-KEYGEN-SALT-'),\n        Uint8Array.from([0, length])\n    );\n    return new PrivateKey(mod(bytesToBigInt(okm, 'big'), defaultEc.n));\n}\n\nexport function ikmToLamportSk(ikm: Uint8Array, salt: Uint8Array): Uint8Array {\n    return extractExpand(32 * 255, ikm, salt, Uint8Array.from([]));\n}\n\nexport function parentSkToLamportPk(\n    parentSk: PrivateKey,\n    index: number\n): Uint8Array {\n    const salt = intToBytes(index, 4, 'big');\n    const ikm = parentSk.toBytes();\n    const notIkm = Uint8Array.from(ikm.map((e) => e ^ 0xff));\n    const lamport0 = ikmToLamportSk(ikm, salt);\n    const lamport1 = ikmToLamportSk(notIkm, salt);\n    const lamportPk: Array<number> = [];\n    for (let i = 0; i < 255; i++)\n        lamportPk.push(...hash256(lamport0.slice(i * 32, (i + 1) * 32)));\n    for (let i = 0; i < 255; i++)\n        lamportPk.push(...hash256(lamport1.slice(i * 32, (i + 1) * 32)));\n    return hash256(Uint8Array.from(lamportPk));\n}\n\nexport function deriveChildSk(parentSk: PrivateKey, index: number): PrivateKey {\n    return keyGen(parentSkToLamportPk(parentSk, index));\n}\n\nexport function deriveChildSkUnhardened(\n    parentSk: PrivateKey,\n    index: number\n): PrivateKey {\n    const hash = hash256(\n        Uint8Array.from([\n            ...parentSk.getG1().toBytes(),\n            ...intToBytes(index, 4, 'big'),\n        ])\n    );\n    return PrivateKey.aggregate([PrivateKey.fromBytes(hash), parentSk]);\n}\n\nexport function deriveChildG1Unhardened(\n    parentPk: JacobianPoint,\n    index: number\n): JacobianPoint {\n    const hash = hash256(\n        Uint8Array.from([...parentPk.toBytes(), ...intToBytes(index, 4, 'big')])\n    );\n    return parentPk.add(\n        JacobianPoint.generateG1().multiply(PrivateKey.fromBytes(hash).value)\n    );\n}\n\nexport function deriveChildG2Unhardened(\n    parentPk: JacobianPoint,\n    index: number\n): JacobianPoint {\n    const hash = hash256(\n        Uint8Array.from([...parentPk.toBytes(), ...intToBytes(index, 4, 'big')])\n    );\n    return parentPk.add(\n        JacobianPoint.generateG2().multiply(PrivateKey.fromBytes(hash).value)\n    );\n}\n","import SHA from 'jssha';\nimport { assert } from '../../internal';\n\nexport const blockSize = 32;\n\nexport function extract(salt: Uint8Array, ikm: Uint8Array): Uint8Array {\n    const hash = new SHA('SHA-256', 'UINT8ARRAY', {\n        hmacKey: { format: 'UINT8ARRAY', value: salt },\n    });\n    hash.update(ikm);\n    return hash.getHash('UINT8ARRAY');\n}\n\nexport function expand(\n    length: number,\n    prk: Uint8Array,\n    info: Uint8Array\n): Uint8Array {\n    const blocks = Math.ceil(length / blockSize);\n    let bytesWritten = 0;\n    const okm: Array<number> = [];\n    let temp = Uint8Array.from([]);\n    for (let i = 1; i <= blocks; i++) {\n        temp = extract(\n            prk,\n            Uint8Array.from(i === 1 ? [...info, 1] : [...temp, ...info, i])\n        );\n        let toWrite = length - bytesWritten;\n        if (toWrite > blockSize) toWrite = blockSize;\n        okm.push(...temp.slice(0, toWrite));\n        bytesWritten += toWrite;\n    }\n    assert(bytesWritten === length);\n    return Uint8Array.from(okm);\n}\n\nexport function extractExpand(\n    length: number,\n    key: Uint8Array,\n    salt: Uint8Array,\n    info: Uint8Array\n): Uint8Array {\n    return expand(length, extract(salt, key), info);\n}\n","import SHA from 'jssha';\nexport const hmacBlockSize = 64;\n\nexport function hash256(message: Uint8Array): Uint8Array {\n    const hash = new SHA('SHA-256', 'UINT8ARRAY');\n    hash.update(message);\n    return hash.getHash('UINT8ARRAY');\n}\n\nexport function hash512(message: Uint8Array): Uint8Array {\n    return Uint8Array.from([\n        ...hash256(Uint8Array.from([...message, 0])),\n        ...hash256(Uint8Array.from([...message, 1])),\n    ]);\n}\n\nexport function hmac256(message: Uint8Array, k: Uint8Array): Uint8Array {\n    if (k.length > hmacBlockSize) k = hash256(k);\n    while (k.length < hmacBlockSize) k = Uint8Array.from([...k, 0]);\n    const kopad: Array<number> = [];\n    for (let i = 0; i < hmacBlockSize; i++) kopad.push(k[i] ^ 0x5c);\n    const kipad: Array<number> = [];\n    for (let i = 0; i < hmacBlockSize; i++) kipad.push(k[i] ^ 0x36);\n    return hash256(\n        Uint8Array.from([\n            ...kopad,\n            ...hash256(Uint8Array.from([...kipad, ...message])),\n        ])\n    );\n}\n","export function modPow(base: bigint, exponent: bigint, modulo: bigint): bigint {\n    if (exponent < 1n) return 1n;\n    else if (base < 0n || base > modulo) base = mod(base, modulo);\n    let result = 1n;\n    while (exponent > 0n) {\n        if ((exponent & 1n) > 0n) result = mod(result * base, modulo);\n        exponent >>= 1n;\n        base = mod(base * base, modulo);\n    }\n    return result;\n}\n\nexport function mod(value: bigint, modulus: bigint): bigint {\n    return ((value % modulus) + modulus) % modulus;\n}\n\nexport function modNumber(value: number, modulus: number): number {\n    return ((value % modulus) + modulus) % modulus;\n}\n","import {\n    assert,\n    defaultEcTwist,\n    Ell2p_a,\n    Ell2p_b,\n    etas,\n    evalIso,\n    Fq,\n    Fq2,\n    hEff,\n    Hp2,\n    JacobianPoint,\n    mod,\n    q,\n    rootsOfUnity,\n    xden,\n    xi_2,\n    xnum,\n    yden,\n    ynum,\n} from '../../internal';\n\nexport function sgn0(x: Fq2): bigint {\n    const sign0 = mod(x.elements[0].value, 2n) === 1n;\n    const zero0 = x.elements[0].value === 0n;\n    const sign1 = mod(x.elements[1].value, 2n) === 1n;\n    return sign0 || (zero0 && sign1) ? 1n : 0n;\n}\n\nexport function osswu2Help(t: Fq2): JacobianPoint {\n    const numDenCommon = xi_2\n        .pow(2n)\n        .multiply(t.pow(4n))\n        .add(xi_2.multiply(t.pow(2n)));\n    const x0_num = Ell2p_b.multiply(numDenCommon.add(new Fq(q, 1n)));\n    let x0_den = Ell2p_a.negate().multiply(numDenCommon);\n    x0_den = x0_den.equals(0n) ? Ell2p_a.multiply(xi_2) : x0_den;\n    const gx0_den = x0_den.pow(3n);\n    const gx0_num = Ell2p_b.multiply(gx0_den)\n        .add(Ell2p_a.multiply(x0_num).multiply(x0_den.pow(2n)))\n        .add(x0_num.pow(3n));\n    let temp1 = gx0_den.pow(7n);\n    const temp2 = gx0_num.multiply(temp1);\n    temp1 = temp1.multiply(temp2).multiply(gx0_den);\n    let sqrtCandidate = temp2.multiply(temp1.pow((q ** 2n - 9n) / 16n));\n    for (const root of rootsOfUnity) {\n        let y0 = sqrtCandidate.multiply(root) as Fq2;\n        if (y0.pow(2n).multiply(gx0_den).equals(gx0_num)) {\n            if (sgn0(y0) !== sgn0(t)) y0 = y0.negate();\n            assert(sgn0(y0) === sgn0(t));\n            return new JacobianPoint(\n                x0_num.multiply(x0_den) as Fq | Fq2,\n                y0.multiply(x0_den.pow(3n)) as Fq | Fq2,\n                x0_den as Fq | Fq2,\n                false,\n                defaultEcTwist\n            );\n        }\n    }\n    const x1_num = xi_2.multiply(t.pow(2n)).multiply(x0_num);\n    const x1_den = x0_den;\n    const gx1_num = xi_2.pow(3n).multiply(t.pow(6n)).multiply(gx0_num);\n    const gx1_den = gx0_den;\n    sqrtCandidate = sqrtCandidate.multiply(t.pow(3n));\n    for (const eta of etas) {\n        let y1 = eta.multiply(sqrtCandidate) as Fq2;\n        if (y1.pow(2n).multiply(gx1_den).equals(gx1_num)) {\n            if (sgn0(y1) !== sgn0(t)) y1 = y1.negate();\n            assert(sgn0(y1) === sgn0(t));\n            return new JacobianPoint(\n                x1_num.multiply(x1_den) as Fq | Fq2,\n                y1.multiply(x1_den.pow(3n)) as Fq | Fq2,\n                x1_den as Fq | Fq2,\n                false,\n                defaultEcTwist\n            );\n        }\n    }\n    throw new Error('Bad osswu2Help.');\n}\n\nexport function iso3(P: JacobianPoint): JacobianPoint {\n    return evalIso(P, [xnum, xden, ynum, yden], defaultEcTwist);\n}\n\nexport function optSwu2Map(t: Fq2, t2?: Fq2): JacobianPoint {\n    let Pp = iso3(osswu2Help(t));\n    if (t2) {\n        const Pp2 = iso3(osswu2Help(t2));\n        Pp = Pp.add(Pp2);\n    }\n    return Pp.multiply(hEff);\n}\n\nexport function g2Map(alpha: Uint8Array, dst: Uint8Array): JacobianPoint {\n    const elements = Hp2(alpha, 2, dst).map((hh) => {\n        const items = hh.map((value) => new Fq(q, value));\n        return new Fq2(q, items[0], items[1]);\n    });\n    return optSwu2Map(elements[0], elements[1]);\n}\n","import {\n    AffinePoint,\n    bigIntToBits,\n    defaultEc,\n    EC,\n    Fq,\n    Fq12,\n    Fq2,\n    JacobianPoint,\n} from '../../internal';\n\nexport function doubleLineEval(\n    R: AffinePoint,\n    P: AffinePoint,\n    ec: EC = defaultEc\n): Fq | Fq2 {\n    const R12 = R.untwist();\n    const slope = new Fq(ec.q, 3n)\n        .multiply(R12.x.pow(2n).add(ec.a))\n        .divide(R12.y.multiply(new Fq(ec.q, 2n)));\n    const v = R12.y.subtract(R12.x.multiply(slope));\n    return P.y.subtract(P.x.multiply(slope)).subtract(v) as Fq | Fq2;\n}\n\nexport function addLineEval(\n    R: AffinePoint,\n    Q: AffinePoint,\n    P: AffinePoint\n): Fq | Fq2 {\n    const R12 = R.untwist();\n    const Q12 = Q.untwist();\n    if (R12.equals(Q12.negate())) return P.x.subtract(R12.x) as Fq | Fq2;\n    const slope = Q12.y.subtract(R12.y).divide(Q12.x.subtract(R12.x));\n    const v = Q12.y\n        .multiply(R12.x)\n        .subtract(R12.y.multiply(Q12.x))\n        .divide(R12.x.subtract(Q12.x));\n    return P.y.subtract(P.x.multiply(slope)).subtract(v) as Fq | Fq2;\n}\n\nexport function millerLoop(\n    T: bigint,\n    P: AffinePoint,\n    Q: AffinePoint,\n    ec: EC = defaultEc\n): Fq12 {\n    const T_bits = bigIntToBits(T);\n    let R = Q;\n    let f = Fq12.nil.one(ec.q);\n    for (let i = 1; i < T_bits.length; i++) {\n        const lrr = doubleLineEval(R, P, ec);\n        f = f.multiply(f).multiply(lrr) as Fq12;\n        R = R.multiply(new Fq(ec.q, 2n));\n        if (T_bits[i] === 1) {\n            const lrq = addLineEval(R, Q, P);\n            f = f.multiply(lrq) as Fq12;\n            R = R.add(Q);\n        }\n    }\n    return f;\n}\n\nexport function finalExponentiation(element: Fq12, ec: EC = defaultEc): Fq12 {\n    if (ec.k === 12n) {\n        let ans = element.pow((ec.q ** 4n - ec.q ** 2n + 1n) / ec.n);\n        ans = ans.qiPower(2).multiply(ans) as Fq12;\n        ans = ans.qiPower(6).divide(ans) as Fq12;\n        return ans;\n    } else return element.pow((ec.q ** ec.k - 1n) / ec.n);\n}\n\nexport function atePairing(\n    P: JacobianPoint,\n    Q: JacobianPoint,\n    ec: EC = defaultEc\n): Fq12 {\n    const t = defaultEc.x + 1n;\n    let T = t - 1n;\n    T = T < 0n ? -T : T;\n    return finalExponentiation(millerLoop(T, P.toAffine(), Q.toAffine()), ec);\n}\n\nexport function atePairingMulti(\n    Ps: JacobianPoint[],\n    Qs: JacobianPoint[],\n    ec: EC = defaultEc\n): Fq12 {\n    const t = defaultEc.x + 1n;\n    let T = t - 1n;\n    T = T < 0n ? -T : T;\n    let prod = Fq12.nil.one(ec.q);\n    for (let i = 0; i < Qs.length; i++) {\n        prod = prod.multiply(\n            millerLoop(T, Ps[i].toAffine(), Qs[i].toAffine(), ec)\n        ) as Fq12;\n    }\n    return finalExponentiation(prod, ec);\n}\n","import {\n    assert,\n    atePairingMulti,\n    defaultEc,\n    Fq12,\n    g2Map,\n    JacobianPoint,\n    PrivateKey,\n} from '../../internal';\n\nexport function coreSignMpl(\n    sk: PrivateKey,\n    message: Uint8Array,\n    dst: Uint8Array\n): JacobianPoint {\n    return g2Map(message, dst).multiply(sk.value);\n}\n\nexport function coreVerifyMpl(\n    pk: JacobianPoint,\n    message: Uint8Array,\n    signature: JacobianPoint,\n    dst: Uint8Array\n): boolean {\n    if (!signature.isValid() || !pk.isValid()) return false;\n    const q = g2Map(message, dst);\n    const one = Fq12.nil.one(defaultEc.q);\n    const pairingResult = atePairingMulti(\n        [pk, JacobianPoint.generateG1().negate()],\n        [q, signature]\n    );\n    return pairingResult.equals(one);\n}\n\nexport function coreAggregateMpl(signatures: JacobianPoint[]): JacobianPoint {\n    if (!signatures.length)\n        throw new Error('Must aggregate at least 1 signature.');\n    let aggregate = signatures[0];\n    assert(aggregate.isValid());\n    for (const signature of signatures.slice(1)) {\n        assert(signature.isValid());\n        aggregate = aggregate.add(signature);\n    }\n    return aggregate;\n}\n\nexport function coreAggregateVerify(\n    pks: JacobianPoint[],\n    ms: Uint8Array[],\n    signature: JacobianPoint,\n    dst: Uint8Array\n): boolean {\n    if (pks.length !== ms.length || !pks.length) return false;\n    if (!signature.isValid()) return false;\n    const qs = [signature];\n    const ps = [JacobianPoint.generateG1().negate()];\n    for (let i = 0; i < pks.length; i++) {\n        if (!pks[i].isValid()) return false;\n        qs.push(g2Map(ms[i], dst));\n        ps.push(pks[i]);\n    }\n    return Fq12.nil.one(defaultEc.q).equals(atePairingMulti(ps, qs));\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../"}